{"version":3,"file":"main.acb4844ad3a2a12f.js","mappings":"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","names":["environment","projectId","appId","storageBucket","apiKey","authDomain","messagingSenderId","measurementId","ApiConfiguration","constructor","this","rootUrl","t","core","Yz7","factory","ɵfac","providedIn","BaseService","config","http","_rootUrl","i0","i1","i2","ParameterCodecInstance","ParameterCodec","encodeKey","key","encodeURIComponent","encodeValue","value","decodeKey","decodeURIComponent","decodeValue","Parameter","name","options","defaultStyle","defaultExplode","style","explode","serializeValue","separator","Array","map","v","split","join","array","Object","keys","propVal","push","String","PathParameter","super","append","path","prefix","alreadySerialized","replace","result","QueryParameter","params","HeaderParameter","headers","RequestBuilder","operationPath","method","_path","Map","_query","_header","set","query","header","body","contentType","_bodyContentType","Blob","type","pairs","val","formValue","formDataValue","_bodyContent","p","formData","FormData","toAppend","JSON","stringify","build","pathParam","values","url","httpParams","HttpParams","encoder","queryParam","httpHeaders","HttpHeaders","accept","headerParam","HttpRequest","toUpperCase","responseType","reportProgress","context","ItemsService","itemsControllerGetItems$Response","rb","ItemsControllerGetItemsPath","collectionId","request","pipe","filter","r","HttpResponse","itemsControllerGetItems","itemsControllerAddItem$Response","ItemsControllerAddItemPath","clone","parseFloat","itemsControllerAddItem","itemsControllerDeleteItemFromCollection$Response","ItemsControllerDeleteItemFromCollectionPath","collectionItemId","undefined","itemsControllerDeleteItemFromCollection","itemsControllerGetBestPair$Response","ItemsControllerGetBestPairPath","id","exclude","itemsControllerGetBestPair","CollectionsService","collectionControllerGetCurrentUserCollections$Response","CollectionControllerGetCurrentUserCollectionsPath","nameFilter","collectionControllerGetCurrentUserCollections","collectionControllerAddCollection$Response","CollectionControllerAddCollectionPath","collectionControllerAddCollection","collectionControllerGetCurrentUserFavoriteCollections$Response","CollectionControllerGetCurrentUserFavoriteCollectionsPath","collectionControllerGetCurrentUserFavoriteCollections","collectionControllerGetCollection$Response","CollectionControllerGetCollectionPath","collectionControllerGetCollection","collectionControllerAddCollectionToFav$Response","CollectionControllerAddCollectionToFavPath","collectionControllerAddCollectionToFav","collectionControllerRemoveCollectionFromFav$Response","CollectionControllerRemoveCollectionFromFavPath","collectionControllerRemoveCollectionFromFav","collectionControllerVisitCollection$Response","CollectionControllerVisitCollectionPath","collectionControllerVisitCollection","ItemsRelationService","itemRelationsControllerAddItem$Response","ItemRelationsControllerAddItemPath","fromId","toId","itemRelationsControllerAddItem","itemRelationsControllerGetItems$Response","ItemRelationsControllerGetItemsPath","itemAId","itemBId","itemRelationsControllerGetItems","BreakPoints","xs","sm","md","lg","xl","BreakpointsService","responsive","observe","Observable","observer","subscribe","matches","next","AddCollectionComponent","ref","formBuilder","collectionsService","form","group","Validators","addNewItem","event","updateFormValidity","valid","target","blur","newCollection","favourite","reset","close","controls","forEach","control","updateFormControlValidity","markAsTouched","markAsDirty","updateValueAndValidity","i3","Xpm","selectors","decls","vars","consts","template","rf","ctx","$event","invalid","ctx_r0","items","ctx_r1","ctx_r2","ctx_r3","ctx_r4","CollectionCardComponent","itemsService","ngOnInit","collection","slice","inputs","CollectionCardComponent_span_8_Template","CollectionCardComponent_span_10_Template","CollectionCardComponent_span_12_Template","CollectionCardComponent_span_14_Template","CollectionCardComponent_span_16_Template","_c0","collection_r3","CollectionsComponent_div_6_a_5_Template","favCollections","collection_r4","CollectionsComponent","breakpointsService","dialogService","showFavourite","console","log","collections","add","open","data","title","afterClosed$","getCollections","CollectionsComponent_div_6_Template","CollectionsComponent_div_12_Template","collection_r2","CollectionsSidepanelComponent_div_3_a_1_Template","CollectionsSidepanelComponent","CollectionsSidepanelComponent_div_3_Template","sidePanelColumns","CollectionsPageComponent","activatedRoute","showSidePanel","collectionsPanelColumns","routeData","CollectionsPageComponent_div_1_Template","pair","item1","_r7","ctx_r6","addRelation","item2","_r9","ctx_r8","deleteRelation","relation","from","to","_r11","ctx_r10","ctx_r5","PairComponent","itemsRelationService","pressed","EventEmitter","emit","outputs","PairComponent_span_0_Template","PairComponent_button_1_Template","PairComponent_span_2_Template","PairComponent_button_3_Template","PairComponent_span_4_Template","PairComponent_button_5_Template","i_r6","_r8","index","ctx_r7","itemPressed","p_r5","CalibrateItemComponent_div_2_li_2_Template","_r10","ctx_r9","getNextBestPair","_r12","ctx_r11","CalibrateItemComponent","calibrated","itemId","getPairs","length","ids","item","CalibrateItemComponent_div_2_Template","CalibrateItemComponent_span_3_Template","CalibrateItemComponent_h3_4_Template","CalibrateItemComponent_button_5_Template","AddItemComponent","itemService","changes","_r4","addToFavs","_r6","removeFromFavs","item_r7","$implicit","calibrateItem","CollectionPageComponent_li_11_a_2_Template","_r13","ctx_r12","deleteItem","CollectionPageComponent","itemsjson","reload","i4","i5","CollectionPageComponent_button_6_Template","CollectionPageComponent_button_7_Template","CollectionPageComponent_li_11_Template","findParam","route","parent","routes","component","resolve","inject","collectionIdParam","EMPTY","AppRoutingModule","oAB","cJS","RouterModule","FireAuthService","afAuth","authState","user","saveUser","userData","localStorage","setItem","isLoggedIn","userString","getItem","parse","emailVerified","GoogleAuth","AuthLogin","GoogleAuthProvider","then","res","getToken","_this","_asyncToGenerator","firstValueFrom","idToken","provider","signInWithPopup","SetUserData","location","catch","error","window","alert","uid","email","displayName","photoURL","SignOut","signOut","removeItem","ProfileComponent","fireAuthService","userName","logOut","_r3","profile","_r5","LoginComponent","loggedIn","login","LoginComponent_a_1_Template","LoginComponent_button_2_Template","AppComponent","ApiModule","static","ngModule","providers","provide","useValue","parentModule","Error","FirebaseAuthInterceptor","intercept","req","handle","token","lastValueFrom","req1","AppModule","bootstrap","HTTP_INTERCEPTORS","useClass","multi","ScreenTrackingService","UserTrackingService","imports","BrowserModule","HttpClientModule","ReactiveFormsModule","warnOnNgModelWithFormControl","AngularFireModule","provideFirebaseApp","initializeApp","provideAnalytics","getAnalytics","provideAuth","getAuth","__NgCli_bootstrap_1","bootstrapModule","err"],"sourceRoot":"webpack:///","sources":["./src/environments/environment.prod.ts","./src/app/api/api-configuration.ts","./src/app/api/base-service.ts","./src/app/api/request-builder.ts","./src/app/api/services/items.service.ts","./src/app/api/services/collections.service.ts","./src/app/api/services/items-relation.service.ts","./src/app/services/breakpoints.service.ts","./src/app/components/add-collection/add-collection.component.ts","./src/app/components/add-collection/add-collection.component.html","./src/app/components/collections/collection-card/collection-card.component.html","./src/app/components/collections/collection-card/collection-card.component.ts","./src/app/components/collections/collections/collections.component.html","./src/app/components/collections/collections/collections.component.ts","./src/app/components/collections/collections-sidepanel/collections-sidepanel.component.html","./src/app/components/collections/collections-sidepanel/collections-sidepanel.component.ts","./src/app/pages/collections-page/collections-page.component.html","./src/app/pages/collections-page/collections-page.component.ts","./src/app/components/pairs/pair/pair.component.html","./src/app/components/pairs/pair/pair.component.ts","./src/app/components/calibrate-item/calibrate-item.component.html","./src/app/components/calibrate-item/calibrate-item.component.ts","./src/app/components/add-item/add-item.component.ts","./src/app/components/add-item/add-item.component.html","./src/app/pages/collection-page/collection-page.component.html","./src/app/pages/collection-page/collection-page.component.ts","./src/app/resolvers/collection-items.resolver.ts","./src/app/resolvers/collection.resolver.ts","./src/app/app-routing.module.ts","./src/app/resolvers/collections.resolver.ts","./src/app/resolvers/favCollections.resolver.ts","./src/app/services/fire-auth.service.ts","./src/app/components/profile/profile.component.ts","./src/app/components/profile/profile.component.html","./src/app/components/login/login.component.html","./src/app/components/login/login.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/api/api.module.ts","./src/app/interceptors/firebase-auth.interceptor.ts","./src/app/app.module.ts","./src/main.ts"],"sourcesContent":["import { ApplicationEnvironment } from './application-environment';\n\nexport const environment: ApplicationEnvironment = {\n    firebase: {\n        projectId: 'queuest-cb885',\n        appId: '1:936633637141:web:9cc171d2c3bf1f5a5bb11c',\n        storageBucket: 'queuest-cb885.appspot.com',\n        apiKey: 'AIzaSyDPU4uUi8KAm_2VC1kZg7oIlPpQJvV7MQY',\n        authDomain: 'queuest-cb885.firebaseapp.com',\n        messagingSenderId: '936633637141',\n        measurementId: 'G-P8DPMCNH7X',\n    },\n    production: true,\n    application: {\n        apiUrl: 'https://api.queuest.c7d5a6.com',\n    },\n};\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Item } from '../models/item';\nimport { ItemPair } from '../models/item-pair';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ItemsService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation itemsControllerGetItems\n   */\n  static readonly ItemsControllerGetItemsPath = '/collections/{collectionId}/items';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerGetItems()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetItems$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Item>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerGetItemsPath, 'get');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Item>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerGetItems$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetItems(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<Array<Item>> {\n\n    return this.itemsControllerGetItems$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Item>>) => r.body as Array<Item>)\n    );\n  }\n\n  /**\n   * Path part for operation itemsControllerAddItem\n   */\n  static readonly ItemsControllerAddItemPath = '/collections/{collectionId}/items';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerAddItem()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  itemsControllerAddItem$Response(params: {\n    collectionId: number;\n    body: Item\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<number>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerAddItemPath, 'post');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: parseFloat(String((r as HttpResponse<any>).body)) }) as StrictHttpResponse<number>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerAddItem$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  itemsControllerAddItem(params: {\n    collectionId: number;\n    body: Item\n  },\n  context?: HttpContext\n\n): Observable<number> {\n\n    return this.itemsControllerAddItem$Response(params,context).pipe(\n      map((r: StrictHttpResponse<number>) => r.body as number)\n    );\n  }\n\n  /**\n   * Path part for operation itemsControllerDeleteItemFromCollection\n   */\n  static readonly ItemsControllerDeleteItemFromCollectionPath = '/collections/{collectionId}/items/{collectionItemId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerDeleteItemFromCollection()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerDeleteItemFromCollection$Response(params: {\n    collectionItemId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerDeleteItemFromCollectionPath, 'delete');\n    if (params) {\n      rb.path('collectionItemId', params.collectionItemId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerDeleteItemFromCollection$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerDeleteItemFromCollection(params: {\n    collectionItemId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.itemsControllerDeleteItemFromCollection$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation itemsControllerGetBestPair\n   */\n  static readonly ItemsControllerGetBestPairPath = '/collections/{collectionId}/items/{id}/bestpair';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerGetBestPair()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetBestPair$Response(params: {\n    id: number;\n    exclude?: Array<number>;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<ItemPair>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerGetBestPairPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n      rb.query('exclude', params.exclude, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ItemPair>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerGetBestPair$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetBestPair(params: {\n    id: number;\n    exclude?: Array<number>;\n  },\n  context?: HttpContext\n\n): Observable<ItemPair> {\n\n    return this.itemsControllerGetBestPair$Response(params,context).pipe(\n      map((r: StrictHttpResponse<ItemPair>) => r.body as ItemPair)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Collection } from '../models/collection';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CollectionsService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation collectionControllerGetCurrentUserCollections\n   */\n  static readonly CollectionControllerGetCurrentUserCollectionsPath = '/collections';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerGetCurrentUserCollections()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserCollections$Response(params?: {\n    nameFilter?: string;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Collection>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerGetCurrentUserCollectionsPath, 'get');\n    if (params) {\n      rb.query('nameFilter', params.nameFilter, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Collection>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerGetCurrentUserCollections$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserCollections(params?: {\n    nameFilter?: string;\n  },\n  context?: HttpContext\n\n): Observable<Array<Collection>> {\n\n    return this.collectionControllerGetCurrentUserCollections$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Collection>>) => r.body as Array<Collection>)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerAddCollection\n   */\n  static readonly CollectionControllerAddCollectionPath = '/collections';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerAddCollection()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  collectionControllerAddCollection$Response(params: {\n    body: Collection\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerAddCollectionPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerAddCollection$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  collectionControllerAddCollection(params: {\n    body: Collection\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.collectionControllerAddCollection$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerGetCurrentUserFavoriteCollections\n   */\n  static readonly CollectionControllerGetCurrentUserFavoriteCollectionsPath = '/collections/fav';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerGetCurrentUserFavoriteCollections()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserFavoriteCollections$Response(params?: {\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Collection>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerGetCurrentUserFavoriteCollectionsPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Collection>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerGetCurrentUserFavoriteCollections$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserFavoriteCollections(params?: {\n  },\n  context?: HttpContext\n\n): Observable<Array<Collection>> {\n\n    return this.collectionControllerGetCurrentUserFavoriteCollections$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Collection>>) => r.body as Array<Collection>)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerGetCollection\n   */\n  static readonly CollectionControllerGetCollectionPath = '/collections/{collectionId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerGetCollection()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCollection$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Collection>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerGetCollectionPath, 'get');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Collection>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerGetCollection$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCollection(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<Collection> {\n\n    return this.collectionControllerGetCollection$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Collection>) => r.body as Collection)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerAddCollectionToFav\n   */\n  static readonly CollectionControllerAddCollectionToFavPath = '/collections/fav/{collectionId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerAddCollectionToFav()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerAddCollectionToFav$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerAddCollectionToFavPath, 'post');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerAddCollectionToFav$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerAddCollectionToFav(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.collectionControllerAddCollectionToFav$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerRemoveCollectionFromFav\n   */\n  static readonly CollectionControllerRemoveCollectionFromFavPath = '/collections/fav/{collectionId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerRemoveCollectionFromFav()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerRemoveCollectionFromFav$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerRemoveCollectionFromFavPath, 'delete');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerRemoveCollectionFromFav$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerRemoveCollectionFromFav(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.collectionControllerRemoveCollectionFromFav$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerVisitCollection\n   */\n  static readonly CollectionControllerVisitCollectionPath = '/collections/visit/{collectionId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerVisitCollection()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerVisitCollection$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerVisitCollectionPath, 'post');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerVisitCollection$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerVisitCollection(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.collectionControllerVisitCollection$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ItemsRelationService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation itemRelationsControllerAddItem\n   */\n  static readonly ItemRelationsControllerAddItemPath = '/relations/{fromId}/{toId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemRelationsControllerAddItem()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemRelationsControllerAddItem$Response(params: {\n    fromId: number;\n    toId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsRelationService.ItemRelationsControllerAddItemPath, 'post');\n    if (params) {\n      rb.path('fromId', params.fromId, {});\n      rb.path('toId', params.toId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemRelationsControllerAddItem$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemRelationsControllerAddItem(params: {\n    fromId: number;\n    toId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.itemRelationsControllerAddItem$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation itemRelationsControllerGetItems\n   */\n  static readonly ItemRelationsControllerGetItemsPath = '/relations/{itemAId}/{itemBId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemRelationsControllerGetItems()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemRelationsControllerGetItems$Response(params: {\n    itemAId: number;\n    itemBId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsRelationService.ItemRelationsControllerGetItemsPath, 'delete');\n    if (params) {\n      rb.path('itemAId', params.itemAId, {});\n      rb.path('itemBId', params.itemBId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemRelationsControllerGetItems$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemRelationsControllerGetItems(params: {\n    itemAId: number;\n    itemBId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.itemRelationsControllerGetItems$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\n\nexport enum BreakPoints {\n    xs = '(max-width: 599.98px)',\n    sm = '(min-width: 600px) and (max-width: 904.98px)',\n    md = '(min-width: 905px) and (max-width: 1239.98px)',\n    lg = '(min-width: 1240px) and (max-width: 1439.98px)',\n    xl = '(min-width: 1440px)',\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BreakpointsService {\n    constructor(private responsive: BreakpointObserver) {}\n\n    public observe(): Observable<BreakPoints> {\n        return new Observable((observer) => {\n            this.responsive.observe(BreakPoints.xs).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.xs);\n            });\n            this.responsive.observe(BreakPoints.sm).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.sm);\n            });\n            this.responsive.observe(BreakPoints.md).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.md);\n            });\n            this.responsive.observe(BreakPoints.lg).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.lg);\n            });\n            this.responsive.observe(BreakPoints.xl).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.xl);\n            });\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n    AbstractControl,\n    FormBuilder,\n    FormGroup,\n    UntypedFormGroup,\n    Validators,\n} from '@angular/forms';\nimport { CollectionsService } from '../../api/services/collections.service';\nimport { Collection } from '../../api/models/collection';\nimport { DialogRef } from '@ngneat/dialog';\nimport { Data } from '@angular/router';\n\n@Component({\n    selector: 'app-add-collection',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './add-collection.component.html',\n    styleUrls: ['./add-collection.component.scss'],\n})\nexport class AddCollectionComponent {\n    readonly form: FormGroup = this.formBuilder.group({\n        name: [null, Validators.required],\n    });\n\n    constructor(\n        private ref: DialogRef<Data>,\n        private formBuilder: FormBuilder,\n        private collectionsService: CollectionsService,\n    ) {}\n\n    addNewItem(event: any): void {\n        this.updateFormValidity(this.form);\n        if (!this.form.valid) {\n            event.target.blur();\n            return;\n        }\n        const newCollection: Collection = this.form.value;\n        newCollection.favourite = false;\n        this.collectionsService\n            .collectionControllerAddCollection({ body: newCollection })\n            .subscribe(() => {\n                this.form.reset();\n                this.ref.close();\n            });\n    }\n\n    updateFormValidity(form: UntypedFormGroup): void {\n        Object.values<AbstractControl>(form.controls).forEach(\n            (control: AbstractControl): void => {\n                this.updateFormControlValidity(control);\n            },\n        );\n    }\n\n    updateFormControlValidity(control: AbstractControl): void {\n        control.markAsTouched();\n        control.markAsDirty();\n        control.updateValueAndValidity();\n    }\n}\n","<div class=\"addContainer\">\n  <form [formGroup]=\"form\">\n    <!--  <small>Name</small>-->\n    <input class=\"input-item\" formControlName=\"name\" id=\"name\" placeholder=\"Collection Name\">\n    <button (click)=\"addNewItem($event)\" [disabled]=\"form.invalid\">Add</button>\n  </form>\n</div>\n","<a [routerLink]=\"['collection', collection.id]\">\n  <div class=\"card\">\n    <div class=\"card-content\">\n      <div class=\"truncate\"><b>{{collection.name}}</b></div>\n      <ul class=\"items-text\">\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[0]\">{{items[0].name}}</span></li>\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[1]\">{{items[1].name}}</span></li>\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[2]\">{{items[2].name}}</span></li>\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[3]\">{{items[3].name}}</span></li>\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[4]\">{{items[4].name}}</span></li>\n      </ul>\n    </div>\n  </div>\n</a>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Collection} from '../../../api/models/collection';\nimport {ItemsService} from \"../../../api/services/items.service\";\nimport {Item} from \"../../../api/models/item\";\nimport {CollectionsService} from \"../../../api/services/collections.service\";\n\n@Component({\n  selector: 'app-collection-card',\n  templateUrl: './collection-card.component.html',\n  styleUrls: ['./collection-card.component.scss'],\n})\nexport class CollectionCardComponent implements OnInit {\n\n  @Input() collection!: Collection;\n  items: Item[] = [];\n\n  constructor(private itemsService: ItemsService, ) {\n  }\n\n  ngOnInit(): void {\n    this.itemsService\n      .itemsControllerGetItems({collectionId: this.collection.id!})\n      .subscribe(items => {\n        this.items = items.slice(0, 5);\n      })\n  }\n}\n","<div class=\"card\">\n  <div class=\"card-content\">\n    <div class=\"collection-bar\">\n      <input class=\"search\" placeholder=\"Search\">\n      <button (click)=\"add()\">NEW</button>\n    </div>\n  </div>\n</div>\n<div *ngIf=\"showFavourite && favCollections\" class=\"collections-with-header\">\n  <div class=\"heading\"><span class=\"text-heading\">Favorites</span></div>\n  <div class=\"collections-lines\">\n    <a *ngFor=\"let collection of favCollections;\" class=\"card\" [routerLink]=\"['collection', collection.id]\">\n      <div class=\"card-content\">{{collection.name}}</div>\n    </a>\n  </div>\n</div>\n<div class=\"collections-with-header\">\n  <div class=\"heading\"><span class=\"text-heading\">Collections</span></div>\n  <div class=\"collections-container\">\n    <div *ngFor=\"let collection of collections;\"  class=\"collection-card\">\n      <app-collection-card [collection]=\"collection\"></app-collection-card>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n    BreakPoints,\n    BreakpointsService,\n} from '../../../services/breakpoints.service';\nimport { CollectionsService } from '../../../api/services/collections.service';\nimport { Collection } from '../../../api/models/collection';\nimport { DialogService } from '@ngneat/dialog';\nimport { AddCollectionComponent } from '../../add-collection/add-collection.component';\n\n@Component({\n    selector: 'app-collections',\n    templateUrl: './collections.component.html',\n    styleUrls: ['./collections.component.scss'],\n})\nexport class CollectionsComponent implements OnInit {\n    @Input() collections!: Collection[];\n    @Input() favCollections!: Collection[];\n    showFavourite = false;\n\n    constructor(\n        private breakpointsService: BreakpointsService,\n        private collectionsService: CollectionsService,\n        private dialogService: DialogService,\n    ) {}\n\n    ngOnInit(): void {\n        console.log('CollectionsComponent', this.collections);\n        this.breakpointsService.observe().subscribe((value) => {\n            switch (value) {\n                case BreakPoints.xs:\n                    this.showFavourite = true;\n                    break;\n                case BreakPoints.sm:\n                    this.showFavourite = true;\n                    break;\n                case BreakPoints.md:\n                    this.showFavourite = false;\n                    break;\n                case BreakPoints.lg:\n                    this.showFavourite = false;\n                    break;\n                case BreakPoints.xl:\n                    this.showFavourite = false;\n                    break;\n                default:\n                    this.showFavourite = false;\n            }\n        });\n    }\n\n    add(): void {\n        this.dialogService\n            .open(AddCollectionComponent, {\n                // data is typed based on the passed generic\n                data: {\n                    title: 'Add collection',\n                },\n            })\n            .afterClosed$.subscribe(() => this.getCollections());\n    }\n\n    private getCollections() {\n        this.collectionsService\n            .collectionControllerGetCurrentUserCollections()\n            .subscribe((collections) => {\n                this.collections = collections;\n            });\n    }\n}\n","<div class=\"side-heading\"><span class=\"text-heading\">Favorite</span></div>\n<div class=\"side-collections\" *ngIf=\"favCollections\">\n  <a class=\"card\" *ngFor=\"let collection of favCollections;\" [routerLink]=\"['collection', collection.id]\"><div class=\"card-content\">{{collection.name}}</div></a>\n</div>\n","import {Component, Input} from '@angular/core';\nimport { Collection } from '../../../api/models/collection';\n\n@Component({\n    selector: 'app-collections-sidepanel',\n    templateUrl: './collections-sidepanel.component.html',\n    styleUrls: ['./collections-sidepanel.component.scss'],\n})\nexport class CollectionsSidepanelComponent {\n    @Input() favCollections!: Collection[];\n}\n","<div class=\"row\">\n  <div *ngIf=\"showSidePanel\" ngClass=\"col-{{sidePanelColumns}}\" class=\"side\">\n    <app-collections-sidepanel [favCollections]=\"favCollections\"></app-collections-sidepanel>\n  </div>\n  <div ngClass=\"col-{{collectionsPanelColumns}}\" class=\"collections\">\n    <app-collections [collections]=\"collections\" [favCollections]=\"favCollections\"></app-collections>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {\n    BreakPoints,\n    BreakpointsService,\n} from '../../services/breakpoints.service';\nimport { ActivatedRoute, Data } from '@angular/router';\nimport { Collection } from '../../api/models/collection';\n\n@Component({\n    selector: 'app-collections-page',\n    templateUrl: './collections-page.component.html',\n    styleUrls: ['./collections-page.component.scss'],\n})\nexport class CollectionsPageComponent implements OnInit {\n    collections: Array<Collection> = [];\n    favCollections: Array<Collection> = [];\n    showSidePanel = false;\n    sidePanelColumns = 0;\n    collectionsPanelColumns = 0;\n\n    constructor(\n        private breakpointsService: BreakpointsService,\n        private activatedRoute: ActivatedRoute,\n    ) {}\n\n    ngOnInit(): void {\n        console.log('CollectionsPageComponent');\n        this.breakpointsService.observe().subscribe((value) => {\n            this.showSidePanel = false;\n            this.sidePanelColumns = 3;\n            this.collectionsPanelColumns = 4;\n            switch (value) {\n                case BreakPoints.xs:\n                    break;\n                case BreakPoints.sm:\n                    this.collectionsPanelColumns = 8;\n                    break;\n                case BreakPoints.md:\n                    this.showSidePanel = true;\n                    this.collectionsPanelColumns = 9;\n                    break;\n              case BreakPoints.lg:\n                    this.showSidePanel = true;\n                    this.collectionsPanelColumns = 9;\n                    break;\n              case BreakPoints.xl:\n                    this.showSidePanel = true;\n                    this.sidePanelColumns = 4;\n                    this.collectionsPanelColumns = 8;\n                    break;\n                default:\n                    break;\n            }\n        });\n        this.activatedRoute.data.subscribe((routeData: Data) => {\n            const data = routeData as { collections: Array<Collection>, favCollections: Array<Collection> };\n            if (data) {\n              if (data.collections) {\n                this.collections = data.collections;\n              }\n              if (data.favCollections) {\n                this.favCollections = data.favCollections;\n              }\n            }\n        });\n    }\n}\n","<span *ngIf=\"pair.item1.id === pair.relation?.from\" class='bold-pair'>{{pair.item1.name}}</span>\n<button (click)=\"addRelation(pair.item1.id,pair.item2.id)\"\n        *ngIf=\"pair.item1.id !== pair.relation?.from\" class='btn-pair'>{{pair.item1.name}}</button>\n<span *ngIf=\"!pair.relation\" class='bold-pair'>=</span>\n<button (click)=\"deleteRelation(pair.relation.from,pair.relation.to)\" *ngIf=\"!!pair.relation\" class='btn-pair'>=</button>\n<span *ngIf=\"pair.item2.id === pair.relation?.from\" class='bold-pair'>{{pair.item2.name}}</span>\n<button (click)=\"addRelation(pair.item2.id,pair.item1.id)\"\n        *ngIf=\"pair.item2.id !== pair.relation?.from\" class='btn-pair'>{{pair.item2.name}}</button>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ItemPair} from \"../../../api/models/item-pair\";\nimport {ItemsRelationService} from \"../../../api/services/items-relation.service\";\n\n@Component({\n  selector: 'app-pair',\n  templateUrl: './pair.component.html',\n  styleUrls: ['./pair.component.scss'],\n})\nexport class PairComponent {\n  @Input() pair!: ItemPair;\n  @Output() pressed = new EventEmitter<void>();\n\n  constructor(private itemsRelationService: ItemsRelationService) {\n  }\n\n  addRelation(from: number | undefined, to: number | undefined) {\n    if (from !== undefined && to !== undefined) {\n      console.log('adding relation');\n      const relation = {\n        from: from,\n        to: to,\n      };\n      this.itemsRelationService\n        .itemRelationsControllerAddItem({\n          fromId: from,\n          toId: to\n        })\n        .subscribe(() => {\n          this.pair.relation = relation;\n          this.pressed.emit();\n        });\n    }\n  }\n\n  deleteRelation(from: number, to: number) {\n    console.log('deleting relation');\n    this.itemsRelationService\n      .itemRelationsControllerGetItems({\n        itemAId: from,\n        itemBId: to\n      })\n      .subscribe(() => {\n        this.pair.relation = undefined;\n        this.pressed.emit();\n      });\n  }\n}\n","<h2>{{title}}</h2>\n<div *ngIf=\"!calibrated\">\n  <ul>\n    <li *ngFor=\"let p of items; let i = index\"><app-pair (pressed)=\"itemPressed(i)\" [pair]=\"p\"></app-pair></li>\n  </ul>\n</div>\n<span *ngIf=\"!calibrated\" style=\"padding-left: 20px;\"><button (click)=\"getNextBestPair()\">Next</button></span>\n<h3 *ngIf=\"calibrated\">Calibrated!</h3>\n<button *ngIf=\"calibrated\" (click)=\"close()\">Close</button>\n","import {\n  Component, OnInit,\n} from '@angular/core';\nimport {ItemsService} from '../../api/services/items.service';\nimport {DialogRef} from \"@ngneat/dialog\";\nimport {Data} from \"@angular/router\";\nimport {ItemPair} from \"../../api/models/item-pair\";\n\n@Component({\n  selector: 'app-calibrate-item',\n  templateUrl: './calibrate-item.component.html',\n  styleUrls: ['./calibrate-item.component.scss'],\n})\nexport class CalibrateItemComponent implements OnInit {\n\n  itemId: number | undefined;\n  title: string = '';\n  items: ItemPair[] = [];\n  calibrated = true;\n\n  constructor(\n    private ref: DialogRef<Data>,\n    private itemsService: ItemsService,\n  ) {\n    console.log(ref.data);\n    if(ref.data['title']){\n      this.title = ref.data['title']\n    }\n    if(ref.data['itemId']){\n      this.itemId = ref.data['itemId']\n    }\n  }\n\n  getPairs() {\n    this.getNextBestPair();\n  }\n\n  itemPressed(id: number) {\n    if (id === this.items.length - 1) {\n        this.getNextBestPair();\n    }\n  }\n\n  getNextBestPair() {\n    const ids: number[] = [];\n    ids.push(this.itemId!);\n    this.items.forEach((item) => ids.push(item.item2.id!));\n    this.itemsService\n        .itemsControllerGetBestPair({\n            id: this.itemId!,\n            exclude: ids,\n        })\n        .subscribe((pair) => {\n            if (!!pair) {\n                this.items.push(pair);\n              this.calibrated = false;\n            } else {\n                this.calibrated = true;\n            }\n            console.log(pair,this.items.length)\n        });\n  }\n\n  ngOnInit(): void {\n    this.getNextBestPair();\n  }\n\n  close() {\n    this.ref.close();\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n    AbstractControl,\n    FormBuilder,\n    FormGroup,\n    UntypedFormGroup,\n    Validators,\n} from '@angular/forms';\nimport { ItemsService } from '../../api/services/items.service';\nimport { Collection } from '../../api/models/collection';\n\n@Component({\n    selector: 'app-add-item',\n    templateUrl: './add-item.component.html',\n    styleUrls: ['./add-item.component.scss'],\n})\nexport class AddItemComponent {\n    @Input() collection!: Collection;\n    @Output() changes = new EventEmitter<number>();\n\n    readonly form: FormGroup = this.formBuilder.group({\n        name: [null, Validators.required],\n    });\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private itemService: ItemsService,\n    ) {}\n\n    addNewItem(event: any): void {\n        this.updateFormValidity(this.form);\n        if (!this.form.valid) {\n            event.target.blur();\n            return;\n        }\n        const itemEntity = this.form.value;\n        if (!this.collection.id) return;\n        this.itemService\n            .itemsControllerAddItem({\n                collectionId: this.collection.id,\n                body: itemEntity,\n            })\n            .subscribe((id) => {\n                this.form.reset();\n                this.changes.emit(id);\n            });\n    }\n\n    updateFormValidity(form: UntypedFormGroup): void {\n        Object.values<AbstractControl>(form.controls).forEach(\n            (control: AbstractControl): void => {\n                this.updateFormControlValidity(control);\n            },\n        );\n    }\n\n    updateFormControlValidity(control: AbstractControl): void {\n        control.markAsTouched();\n        control.markAsDirty();\n        control.updateValueAndValidity();\n    }\n}\n","<form [formGroup]=\"form\">\n  <!--  <small>Name</small>-->\n  <input formControlName=\"name\" id=\"name\" placeholder=\"Item\" class=\"input-item\">\n  <button (click)=\"addNewItem($event)\" [disabled]=\"form.invalid\">Add</button>\n</form>\n","<div class=\"heading\">\n  <span class=\"text-heading\"><a [routerLink]=\"['']\" class=\"nav-button\"><</a></span>\n  <span class=\"text-heading\">{{collection.name}}</span>\n  <button class=\"fav-btn\" *ngIf=\"!collection.favourite\" (click)=\"addToFavs()\">♡</button>\n  <button class=\"fav-btn\" *ngIf=\"collection.favourite\" (click)=\"removeFromFavs()\">❤</button>\n</div>\n<app-add-item [collection]=\"collection\" (changes)=\"calibrateItem($event)\"></app-add-item>\n<div>\n  <ol>\n    <li *ngFor=\"let item of items\">{{item.name}}\n      <a *ngIf=\"!item.calibrated\" class=\"calibrate-btn\" (click)=\"calibrateItem(item.id!)\">↔</a>\n      <a class=\"delete-btn\" (click)=\"deleteItem(item.id)\">x</a>\n    </li>\n  </ol>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Data} from '@angular/router';\nimport {BreakpointsService} from '../../services/breakpoints.service';\nimport {Item} from '../../api/models/item';\nimport {Collection} from '../../api/models/collection';\nimport {ItemsService} from '../../api/services/items.service';\nimport {DialogService} from \"@ngneat/dialog\";\nimport {CalibrateItemComponent} from \"../../components/calibrate-item/calibrate-item.component\";\nimport {CollectionsService} from \"../../api/services/collections.service\";\n\n@Component({\n  selector: 'app-collection-page',\n  templateUrl: './collection-page.component.html',\n  styleUrls: ['./collection-page.component.scss'],\n})\nexport class CollectionPageComponent implements OnInit {\n  items: Array<Item> = [];\n  collection!: Collection;\n\n  constructor(\n    private breakpointsService: BreakpointsService,\n    private activatedRoute: ActivatedRoute,\n    private itemService: ItemsService,\n    private dialogService: DialogService,\n    private collectionsService: CollectionsService,\n  ) {\n  }\n\n  get itemsjson(): string {\n    return JSON.stringify(this.items);\n  }\n\n  ngOnInit(): void {\n    this.activatedRoute.data.subscribe((routeData: Data) => {\n      const data = routeData as {\n        items: Array<Item>;\n        collection: Collection;\n      };\n      if (data && data.items) {\n        this.items = data.items;\n        this.collection = data.collection;\n        this.collectionsService.collectionControllerVisitCollection({collectionId:this.collection.id!}).subscribe(()=>console.log(\"visited\"));\n      }\n    });\n  }\n\n  calibrateItem(id: number) {\n    this.dialogService\n      .open(CalibrateItemComponent, {\n        // data is typed based on the passed generic\n        data: {\n          title: `Calibrate`,\n          itemId: id,\n        },\n      })\n      .afterClosed$.subscribe(() =>\n      this.reload());\n\n  }\n\n  deleteItem(itemId: number | undefined) {\n    if (!itemId) {\n      return;\n    }\n    this.itemService\n      .itemsControllerDeleteItemFromCollection({collectionItemId: itemId})\n      .subscribe(() => this.reload());\n\n  }\n\n  addToFavs() {\n    this.collectionsService\n      .collectionControllerAddCollectionToFav({collectionId: this.collection.id!})\n      .subscribe(() => this.collection.favourite = true);\n  }\n\n  removeFromFavs() {\n    this.collectionsService\n      .collectionControllerRemoveCollectionFromFav({collectionId: this.collection.id!})\n      .subscribe(() => this.collection.favourite = false);\n  }\n\n  private reload() {\n    return this.itemService.itemsControllerGetItems({\n      collectionId: this.collection.id!,\n    }).subscribe((items) => (this.items = items));\n  }\n}\n","import { ActivatedRouteSnapshot, ResolveFn } from '@angular/router';\nimport { EMPTY, Observable } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { ItemsService } from '../api/services';\nimport { Item } from '../api/models/item';\n\nexport const collectionItemsResolver: ResolveFn<Array<Item>> = (\n    route: ActivatedRouteSnapshot,\n): Observable<Array<Item>> => {\n    const collectionIdParam: string | null = findParam(\n        ROUTER_PARAM_COLLECTION_ID,\n        route,\n    );\n    if (!collectionIdParam) {\n        return EMPTY;\n    }\n    const collectionId: number = +collectionIdParam;\n    return inject(ItemsService).itemsControllerGetItems({\n        collectionId: collectionId,\n    });\n};\n\nexport const ROUTER_PARAM_COLLECTION_ID = 'collectionId';\nexport function findParam(\n    name: string,\n    route: ActivatedRouteSnapshot,\n): string | null {\n    const value = route.params[name];\n    if (value) {\n        return value;\n    }\n    if (route.parent) {\n        return findParam(name, route.parent);\n    }\n    return null;\n}\n","import { ActivatedRouteSnapshot, ResolveFn } from '@angular/router';\nimport { EMPTY, Observable } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { CollectionsService } from '../api/services';\nimport { Collection } from '../api/models/collection';\n\nexport const collectionResolver: ResolveFn<Collection> = (\n    route: ActivatedRouteSnapshot,\n): Observable<Collection> => {\n    const collectionIdParam: string | null = findParam(\n        ROUTER_PARAM_COLLECTION_ID,\n        route,\n    );\n    if (!collectionIdParam) {\n        return EMPTY;\n    }\n    const collectionId: number = +collectionIdParam;\n    return inject(CollectionsService).collectionControllerGetCollection({\n        collectionId: collectionId,\n    });\n};\n\nexport const ROUTER_PARAM_COLLECTION_ID = 'collectionId';\nexport function findParam(\n    name: string,\n    route: ActivatedRouteSnapshot,\n): string | null {\n    const value = route.params[name];\n    if (value) {\n        return value;\n    }\n    if (route.parent) {\n        return findParam(name, route.parent);\n    }\n    return null;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { collectionsResolver } from './resolvers/collections.resolver';\nimport { CollectionsPageComponent } from './pages/collections-page/collections-page.component';\nimport { CollectionPageComponent } from './pages/collection-page/collection-page.component';\nimport { collectionItemsResolver } from './resolvers/collection-items.resolver';\nimport { collectionResolver } from './resolvers/collection.resolver';\nimport {favCollectionsResolver} from \"./resolvers/favCollections.resolver\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CollectionsPageComponent,\n        resolve: { collections: collectionsResolver, favCollections: favCollectionsResolver },\n    },\n    {\n        path: 'collection/:collectionId',\n        component: CollectionPageComponent,\n        resolve: {\n            items: collectionItemsResolver,\n            collection: collectionResolver,\n        },\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { ActivatedRouteSnapshot, ResolveFn } from '@angular/router';\nimport { Collection } from '../api/models/collection';\nimport { Observable } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { CollectionsService } from '../api/services';\n\nexport const collectionsResolver: ResolveFn<Array<Collection>> = (\n    route: ActivatedRouteSnapshot,\n): Observable<Array<Collection>> => {\n    return inject(\n        CollectionsService,\n    ).collectionControllerGetCurrentUserCollections();\n};\n","import { ActivatedRouteSnapshot, ResolveFn } from '@angular/router';\nimport { Collection } from '../api/models/collection';\nimport { Observable } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { CollectionsService } from '../api/services';\n\nexport const favCollectionsResolver: ResolveFn<Array<Collection>> = (\n    route: ActivatedRouteSnapshot,\n): Observable<Array<Collection>> => {\n    return inject(\n        CollectionsService,\n    ).collectionControllerGetCurrentUserFavoriteCollections();\n};\n","import { Injectable } from '@angular/core';\nimport { GoogleAuthProvider } from '@firebase/auth';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { User } from '../model/user';\nimport { firstValueFrom } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FireAuthService {\n    userData: any;\n\n    constructor(\n        private afAuth: AngularFireAuth, // private afs: AngularFirestore,\n    ) {\n        this.afAuth.authState.subscribe((user) => {\n            this.saveUser(user);\n        });\n    }\n\n    private saveUser(user: any) {\n        if (user) {\n            this.userData = user;\n            localStorage.setItem('fire.user', JSON.stringify(this.userData));\n        } else {\n            localStorage.setItem('fire.user', 'null');\n        }\n    }\n\n    get isLoggedIn(): boolean {\n        const userString = localStorage.getItem('fire.user');\n        const user = JSON.parse(userString ? userString : 'null');\n        return user !== null && user.emailVerified !== false;\n    }\n\n    GoogleAuth() {\n        return this.AuthLogin(new GoogleAuthProvider()).then((res: any) => {\n            // if (res) {\n            //   this.router.navigate(['dashboard']);\n            // }\n        });\n    }\n\n    async getToken() {\n        const token = await firstValueFrom(this.afAuth.idToken);\n        return token;\n    }\n\n    AuthLogin(provider: any) {\n        return this.afAuth\n            .signInWithPopup(provider)\n            .then((result) => {\n                // this.ngZone.run(() => {\n                //   this.router.navigate(['dashboard']);\n                // });\n                const user = this.SetUserData(result.user);\n                this.saveUser(user);\n                location.reload();\n            })\n            .catch((error) => {\n                window.alert(error);\n            });\n    }\n\n    /* Setting up user data when sign in with username/password,\nsign up with username/password and sign in with social auth\nprovider in Firestore database using AngularFirestore + AngularFirestoreDocument service */\n    SetUserData(user: any) {\n        // const userRef: AngularFirestoreDocument<any> = this.afs.doc<any>(\n        //     `users/${user.uid}`,\n        // );\n        const userData: User = {\n            uid: user.uid,\n            email: user.email,\n            displayName: user.displayName,\n            photoURL: user.photoURL,\n            emailVerified: user.emailVerified,\n        };\n        return userData;\n        // return userRef.set(userData, {\n        //     merge: true,\n        // });\n    }\n\n    // Sign out\n    SignOut() {\n        return this.afAuth.signOut().then(() => {\n            localStorage.removeItem('fire.user');\n            location.reload();\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DialogRef } from '@ngneat/dialog';\nimport { FireAuthService } from '../../services/fire-auth.service';\n\ninterface Data {\n    userName: string;\n}\n\n@Component({\n    selector: 'app-profile',\n    templateUrl: './profile.component.html',\n    styleUrls: ['./profile.component.scss'],\n})\nexport class ProfileComponent {\n    constructor(\n        private ref: DialogRef<Data>,\n        private fireAuthService: FireAuthService,\n    ) {}\n\n    get userName() {\n        return this.fireAuthService.userData.displayName;\n    }\n\n    get photoURL() {\n        return this.fireAuthService.userData.photoURL;\n    }\n\n    logOut(): void {\n        this.fireAuthService.SignOut();\n        this.ref.close();\n    }\n}\n","<div class=\"profileContainer\">\n  <div class=\"profileImageContainer\">\n    <img [src]=\"photoURL\" alt=\"\" class=\"profilePhoto\">\n    <div class=\"profilePhotoBorder\"></div>\n  </div>\n</div>\n<h2>Logged in as {{userName}}\n</h2>\n<button (click)=\"logOut()\" class=\"text-main link-btn\">LOGOUT</button>\n","<span class=\"login-block\">\n<a (click)=\"profile()\" *ngIf=\"loggedIn\" class=\"login\"></a>\n<button (click)=\"GoogleAuth()\" *ngIf=\"!loggedIn\" class=\"text-main link-btn\">LOGIN</button>\n</span>\n","import { Component } from '@angular/core';\nimport { FireAuthService } from '../../services/fire-auth.service';\nimport { DialogService } from '@ngneat/dialog';\nimport { ProfileComponent } from '../profile/profile.component';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n    constructor(\n        private fireAuthService: FireAuthService,\n        private dialogService: DialogService,\n    ) {}\n\n    get loggedIn(): boolean {\n        return this.fireAuthService.isLoggedIn;\n    }\n\n    get userName(): string {\n        const name = this.fireAuthService?.userData?.displayName;\n        return name ? name : 'Logged In';\n    }\n\n    login() {\n        this.GoogleAuth();\n    }\n\n    GoogleAuth(): void {\n        this.fireAuthService.GoogleAuth();\n    }\n\n    profile(): void {\n        this.dialogService.open(ProfileComponent, {\n            // data is typed based on the passed generic\n            data: {\n                title: 'asdasdsad',\n            },\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ItemsService } from './api/services/items.service';\nimport { Item } from './api/models/item';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n    // items: Item[] = [];\n    // lastItem?: Item;\n\n    constructor() {}\n\n    ngOnInit(): void {\n        // this.reloadItems();\n    }\n\n    // reloadItems() {\n    //   this.getItems();\n    //   this.getLastItem();\n    // }\n    //\n    // getItems() {\n    //   // this.itemsService\n    //   //     .itemsControllerGetItems()\n    //   //     .subscribe((value) => (this.items = value));\n    // }\n    //\n    // getLastItem() {\n    //   // this.itemsService\n    //   //     .itemsControllerGetLastItem()\n    //   //     .subscribe((value) => (this.lastItem = value));\n    // }\n}\n","<div class=\"topbar\">\n  <app-login class=\"login-block\"></app-login>\n</div>\n<div class=\"full-body\">\n  <div class=\"responsive-container\">\n    <router-outlet></router-outlet>\n    <!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-add-item (changes)=\"reloadItems()\"></app-add-item>-->\n<!--        <app-list [items]=\"items\"></app-list>-->\n<!--      </div>-->\n<!--    </div>-->\n<!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-calibrate-item (changes)=\"reloadItems()\" *ngIf=\"!!lastItem\" [lastItem]=\"lastItem\"></app-calibrate-item>-->\n<!--      </div>-->\n<!--    </div>-->\n<!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-pairs (changes)=\"reloadItems()\"></app-pairs>-->\n<!--      </div>-->\n<!--    </div>-->\n  </div>\n</div>\n\n","/* tslint:disable */\n/* eslint-disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { ItemsService } from './services/items.service';\nimport { CollectionsService } from './services/collections.service';\nimport { ItemsRelationService } from './services/items-relation.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    ItemsService,\n    CollectionsService,\n    ItemsRelationService,\n    ApiConfiguration\n  ],\n})\nexport class ApiModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<ApiModule> {\n    return {\n      ngModule: ApiModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: ApiModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    HttpEvent,\n    HttpHandler,\n    HttpInterceptor,\n    HttpRequest,\n} from '@angular/common/http';\nimport { FireAuthService } from '../services/fire-auth.service';\nimport { from, lastValueFrom, Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FirebaseAuthInterceptor implements HttpInterceptor {\n    constructor(private fireAuthService: FireAuthService) {}\n\n    intercept(\n        req: HttpRequest<any>,\n        next: HttpHandler,\n    ): Observable<HttpEvent<any>> {\n        return from(this.handle(req, next));\n    }\n\n    async handle(req: HttpRequest<any>, next: HttpHandler) {\n        const token = await this.fireAuthService.getToken();\n        if (!token) {\n            return await lastValueFrom(next.handle(req));\n        }\n        const req1 = req.clone({\n            headers: req.headers.set('Authorization', `Bearer ${token}`),\n        });\n        return await lastValueFrom(next.handle(req1));\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { environment } from '../environments/environment';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ListComponent } from './components/list/list.component';\nimport { ApiModule } from './api/api.module';\nimport { PairsComponent } from './components/pairs/pairs.component';\nimport { AddItemComponent } from './components/add-item/add-item.component';\nimport { PairComponent } from './components/pairs/pair/pair.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CalibrateItemComponent } from './components/calibrate-item/calibrate-item.component';\nimport { initializeApp, provideFirebaseApp } from '@angular/fire/app';\nimport {\n    getAnalytics,\n    provideAnalytics,\n    ScreenTrackingService,\n    UserTrackingService,\n} from '@angular/fire/analytics';\nimport { getAuth, provideAuth } from '@angular/fire/auth';\nimport { FireAuthService } from './services/fire-auth.service';\nimport { FirebaseAuthInterceptor } from './interceptors/firebase-auth.interceptor';\nimport { AngularFireModule } from '@angular/fire/compat';\nimport { LoginComponent } from './components/login/login.component';\nimport { CollectionsComponent } from './components/collections/collections/collections.component';\nimport { CollectionsPageComponent } from './pages/collections-page/collections-page.component';\nimport { CollectionsSidepanelComponent } from './components/collections/collections-sidepanel/collections-sidepanel.component';\nimport { CollectionCardComponent } from './components/collections/collection-card/collection-card.component';\nimport { AddCollectionComponent } from './components/add-collection/add-collection.component';\nimport { CollectionPageComponent } from './pages/collection-page/collection-page.component';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        ListComponent,\n        PairsComponent,\n        AddItemComponent,\n        PairComponent,\n        CalibrateItemComponent,\n        LoginComponent,\n        CollectionsComponent,\n        CollectionsPageComponent,\n        CollectionsSidepanelComponent,\n        CollectionCardComponent,\n        AddCollectionComponent,\n        CollectionPageComponent,\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        ReactiveFormsModule.withConfig({\n            warnOnNgModelWithFormControl: 'always',\n        }),\n        ApiModule.forRoot({ rootUrl: environment.application.apiUrl }),\n        AppRoutingModule,\n        AngularFireModule.initializeApp(environment.firebase),\n        provideFirebaseApp(() => {\n            console.log('*********MODULE*********', environment.firebase);\n            return initializeApp(environment.firebase);\n        }),\n        provideAnalytics(() => getAnalytics()),\n        provideAuth(() => getAuth()),\n    ],\n    providers: [\n        FireAuthService,\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: FirebaseAuthInterceptor,\n            multi: true,\n        },\n        ScreenTrackingService,\n        UserTrackingService,\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch((err) => console.error(err));\n"],"x_google_ignoreList":[]}