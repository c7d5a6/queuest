{"version":3,"file":"main.25753c4cc62f01b0.js","mappings":"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","names":["environment","projectId","appId","storageBucket","apiKey","authDomain","messagingSenderId","measurementId","ApiConfiguration","constructor","this","rootUrl","t","core","Yz7","factory","ɵfac","providedIn","BaseService","config","http","_rootUrl","i0","i1","i2","ParameterCodecInstance","ParameterCodec","encodeKey","key","encodeURIComponent","encodeValue","value","decodeKey","decodeURIComponent","decodeValue","Parameter","name","options","defaultStyle","defaultExplode","style","explode","serializeValue","separator","Array","map","v","split","join","array","Object","keys","propVal","push","String","PathParameter","super","append","path","prefix","alreadySerialized","replace","result","QueryParameter","params","HeaderParameter","headers","RequestBuilder","operationPath","method","_path","Map","_query","_header","set","query","header","body","contentType","_bodyContentType","Blob","type","pairs","val","formValue","formDataValue","_bodyContent","p","formData","FormData","toAppend","JSON","stringify","build","pathParam","values","url","httpParams","HttpParams","encoder","queryParam","httpHeaders","HttpHeaders","accept","headerParam","HttpRequest","toUpperCase","responseType","reportProgress","context","ItemsService","itemsControllerGetItems$Response","rb","ItemsControllerGetItemsPath","collectionId","request","pipe","filter","r","HttpResponse","itemsControllerGetItems","itemsControllerAddItem$Response","ItemsControllerAddItemPath","clone","undefined","itemsControllerAddItem","CollectionsService","collectionControllerGetCurrentUserCollections$Response","CollectionControllerGetCurrentUserCollectionsPath","collectionControllerGetCurrentUserCollections","collectionControllerAddCollection$Response","CollectionControllerAddCollectionPath","collectionControllerAddCollection","collectionControllerGetCurrentUserFavoriteCollections$Response","CollectionControllerGetCurrentUserFavoriteCollectionsPath","collectionControllerGetCurrentUserFavoriteCollections","BreakPoints","xs","sm","md","lg","xl","BreakpointsService","responsive","observe","Observable","observer","subscribe","matches","next","AddCollectionComponent","ref","formBuilder","collectionsService","form","group","Validators","addNewItem","event","updateFormValidity","valid","reset","close","target","blur","controls","forEach","control","updateFormControlValidity","markAsTouched","markAsDirty","updateValueAndValidity","i3","Xpm","selectors","decls","vars","consts","template","rf","ctx","$event","invalid","CollectionCardComponent","inputs","collection","collection_r3","CollectionsComponent_div_6_div_5_Template","ctx_r0","favCollections","collection_r4","CollectionsComponent","breakpointsService","dialogService","showFavourite","ngOnInit","console","log","collections","add","open","data","title","afterClosed$","getCollections","CollectionsComponent_div_6_Template","CollectionsComponent_div_12_Template","collection_r2","CollectionsSidepanelComponent_div_3_div_1_Template","CollectionsSidepanelComponent","CollectionsSidepanelComponent_div_3_Template","sidePanelColumns","routes","component","CollectionsPageComponent","activatedRoute","showSidePanel","collectionsPanelColumns","routeData","CollectionsPageComponent_div_1_Template","resolve","route","inject","CollectionPageComponent","AppRoutingModule","oAB","cJS","RouterModule","FireAuthService","afAuth","authState","user","saveUser","userData","localStorage","setItem","isLoggedIn","userString","getItem","parse","emailVerified","GoogleAuth","AuthLogin","GoogleAuthProvider","then","res","getToken","_this","_asyncToGenerator","firstValueFrom","idToken","provider","signInWithPopup","SetUserData","catch","error","window","alert","uid","email","displayName","photoURL","SignOut","signOut","removeItem","ProfileComponent","fireAuthService","userName","logOut","_r3","ctx_r2","profile","_r5","ctx_r4","LoginComponent","loggedIn","login","LoginComponent_a_1_Template","LoginComponent_button_2_Template","AppComponent","ApiModule","static","ngModule","providers","provide","useValue","parentModule","Error","FirebaseAuthInterceptor","intercept","req","from","handle","token","lastValueFrom","req1","AppModule","bootstrap","HTTP_INTERCEPTORS","useClass","multi","ScreenTrackingService","UserTrackingService","imports","BrowserModule","HttpClientModule","ReactiveFormsModule","warnOnNgModelWithFormControl","AngularFireModule","provideFirebaseApp","initializeApp","provideAnalytics","getAnalytics","provideAuth","getAuth","__NgCli_bootstrap_1","bootstrapModule","err"],"sourceRoot":"webpack:///","sources":["./src/environments/environment.prod.ts","./src/app/api/api-configuration.ts","./src/app/api/base-service.ts","./src/app/api/request-builder.ts","./src/app/api/services/items.service.ts","./src/app/api/services/collections.service.ts","./src/app/services/breakpoints.service.ts","./src/app/components/add-collection/add-collection.component.ts","./src/app/components/add-collection/add-collection.component.html","./src/app/components/collections/collection-card/collection-card.component.ts","./src/app/components/collections/collection-card/collection-card.component.html","./src/app/components/collections/collections/collections.component.html","./src/app/components/collections/collections/collections.component.ts","./src/app/components/collections/collections-sidepanel/collections-sidepanel.component.html","./src/app/components/collections/collections-sidepanel/collections-sidepanel.component.ts","./src/app/pages/collections-page/collections-page.component.html","./src/app/app-routing.module.ts","./src/app/pages/collections-page/collections-page.component.ts","./src/app/resolvers/collections.resolver.ts","./src/app/pages/collection-page/collection-page.component.ts","./src/app/pages/collection-page/collection-page.component.html","./src/app/services/fire-auth.service.ts","./src/app/components/profile/profile.component.ts","./src/app/components/profile/profile.component.html","./src/app/components/login/login.component.html","./src/app/components/login/login.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/api/api.module.ts","./src/app/interceptors/firebase-auth.interceptor.ts","./src/app/app.module.ts","./src/main.ts"],"sourcesContent":["import { ApplicationEnvironment } from './application-environment';\n\nexport const environment: ApplicationEnvironment = {\n    firebase: {\n        projectId: 'queuest-cb885',\n        appId: '1:936633637141:web:9cc171d2c3bf1f5a5bb11c',\n        storageBucket: 'queuest-cb885.appspot.com',\n        apiKey: 'AIzaSyDPU4uUi8KAm_2VC1kZg7oIlPpQJvV7MQY',\n        authDomain: 'queuest-cb885.firebaseapp.com',\n        messagingSenderId: '936633637141',\n        measurementId: 'G-P8DPMCNH7X',\n    },\n    production: true,\n    application: {\n        apiUrl: 'https://api.queuest.c7d5a6.com',\n    },\n};\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Item } from '../models/item';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ItemsService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation itemsControllerGetItems\n   */\n  static readonly ItemsControllerGetItemsPath = '/collections/{collectionId}/items';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerGetItems()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetItems$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Item>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerGetItemsPath, 'get');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Item>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerGetItems$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetItems(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<Array<Item>> {\n\n    return this.itemsControllerGetItems$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Item>>) => r.body as Array<Item>)\n    );\n  }\n\n  /**\n   * Path part for operation itemsControllerAddItem\n   */\n  static readonly ItemsControllerAddItemPath = '/collections/{collectionId}/items';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerAddItem()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  itemsControllerAddItem$Response(params: {\n    collectionId: number;\n    body: Item\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerAddItemPath, 'post');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerAddItem$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  itemsControllerAddItem(params: {\n    collectionId: number;\n    body: Item\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.itemsControllerAddItem$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Collection } from '../models/collection';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CollectionsService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation collectionControllerGetCurrentUserCollections\n   */\n  static readonly CollectionControllerGetCurrentUserCollectionsPath = '/collections';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerGetCurrentUserCollections()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserCollections$Response(params?: {\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Collection>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerGetCurrentUserCollectionsPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Collection>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerGetCurrentUserCollections$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserCollections(params?: {\n  },\n  context?: HttpContext\n\n): Observable<Array<Collection>> {\n\n    return this.collectionControllerGetCurrentUserCollections$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Collection>>) => r.body as Array<Collection>)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerAddCollection\n   */\n  static readonly CollectionControllerAddCollectionPath = '/collections';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerAddCollection()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  collectionControllerAddCollection$Response(params: {\n    body: Collection\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerAddCollectionPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerAddCollection$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  collectionControllerAddCollection(params: {\n    body: Collection\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.collectionControllerAddCollection$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerGetCurrentUserFavoriteCollections\n   */\n  static readonly CollectionControllerGetCurrentUserFavoriteCollectionsPath = '/collections/fav';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerGetCurrentUserFavoriteCollections()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserFavoriteCollections$Response(params?: {\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Collection>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerGetCurrentUserFavoriteCollectionsPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Collection>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerGetCurrentUserFavoriteCollections$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserFavoriteCollections(params?: {\n  },\n  context?: HttpContext\n\n): Observable<Array<Collection>> {\n\n    return this.collectionControllerGetCurrentUserFavoriteCollections$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Collection>>) => r.body as Array<Collection>)\n    );\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {BreakpointObserver, Breakpoints} from \"@angular/cdk/layout\";\nimport {Observable} from \"rxjs\";\n\nexport enum BreakPoints {\n  xs = '(max-width: 599.98px)',\n  sm = '(min-width: 600px) and (max-width: 904.98px)',\n  md = '(min-width: 905px) and (max-width: 1239.98px)',\n  lg = '(min-width: 1240px) and (max-width: 1439.98px)',\n  xl = '(min-width: 1440px)',\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreakpointsService {\n\n  constructor(private responsive: BreakpointObserver) {\n  }\n\n  public observe(): Observable<BreakPoints> {\n    return new Observable((observer) => {\n      this.responsive.observe(BreakPoints.xs).subscribe(result => {\n        if (result.matches) observer.next(BreakPoints.xs);\n      });\n      this.responsive.observe(BreakPoints.sm).subscribe(result => {\n        if (result.matches) observer.next(BreakPoints.sm);\n      });\n      this.responsive.observe(BreakPoints.md).subscribe(result => {\n        if (result.matches) observer.next(BreakPoints.md);\n      });\n      this.responsive.observe(BreakPoints.lg).subscribe(result => {\n        if (result.matches) observer.next(BreakPoints.lg);\n      });\n      this.responsive.observe(BreakPoints.xl).subscribe(result => {\n        if (result.matches) observer.next(BreakPoints.xl);\n      });\n    });\n  }\n\n}\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {AbstractControl, FormBuilder, FormGroup, UntypedFormGroup, Validators} from \"@angular/forms\";\nimport {CollectionsService} from \"../../api/services/collections.service\";\nimport {Collection} from \"../../api/models/collection\";\nimport {DialogRef} from \"@ngneat/dialog\";\nimport {Data} from \"@angular/router\";\n\n@Component({\n  selector: 'app-add-collection',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './add-collection.component.html',\n  styleUrls: ['./add-collection.component.scss']\n})\nexport class AddCollectionComponent {\n\n  readonly form: FormGroup = this.formBuilder.group({\n    name: [null, Validators.required],\n  });\n\n  constructor(\n    private ref: DialogRef<Data>,\n    private formBuilder: FormBuilder,\n    private collectionsService: CollectionsService,\n  ) {\n  }\n\n  addNewItem(event: any): void {\n    this.updateFormValidity(this.form);\n    if (!this.form.valid) {\n      event.target.blur();\n      return;\n    }\n    const newCollection: Collection = this.form.value;\n    this.collectionsService\n      .collectionControllerAddCollection({body: newCollection})\n      .subscribe(() => {\n        this.form.reset();\n        this.ref.close();\n      });\n  }\n\n  updateFormValidity(form: UntypedFormGroup): void {\n    Object.values<AbstractControl>(form.controls).forEach(\n      (control: AbstractControl): void => {\n        this.updateFormControlValidity(control);\n      },\n    );\n  }\n\n  updateFormControlValidity(control: AbstractControl): void {\n    control.markAsTouched();\n    control.markAsDirty();\n    control.updateValueAndValidity();\n  }\n\n}\n","<div class=\"addContainer\">\n  <form [formGroup]=\"form\">\n    <!--  <small>Name</small>-->\n    <input class=\"input-item\" formControlName=\"name\" id=\"name\" placeholder=\"Collection Name\">\n    <button (click)=\"addNewItem($event)\" [disabled]=\"form.invalid\">Add</button>\n  </form>\n</div>\n","import {Component, Input} from '@angular/core';\nimport {Collection} from \"../../../api/models/collection\";\n\n@Component({\n  selector: 'app-collection-card',\n  templateUrl: './collection-card.component.html',\n  styleUrls: ['./collection-card.component.scss']\n})\nexport class CollectionCardComponent {\n  @Input() collection!: Collection;\n\n}\n","<div class=\"card\">\n  <div class=\"card-content\">\n    <div><b>{{collection.name}}</b></div>\n<!--    <ul>-->\n<!--      <li>Item 1</li>-->\n<!--      <li>Item 2</li>-->\n<!--      <li>Long item 3</li>-->\n<!--      <li>S-t 4</li>-->\n<!--      <li>Item 5</li>-->\n<!--    </ul>-->\n    <div class=\"card-footer\"><button disabled>X</button></div>\n  </div>\n</div>\n","<div class=\"card\">\n  <div class=\"card-content\">\n    <div class=\"collection-bar\">\n      <input class=\"search\" placeholder=\"Search\">\n      <button (click)=\"add()\">+</button>\n    </div>\n  </div>\n</div>\n<div *ngIf=\"showFavourite && favCollections\" class=\"collections-with-header\">\n  <div class=\"heading\"><span class=\"text-heading\">Favorites</span></div>\n  <div class=\"collections-container\">\n    <div *ngFor=\"let collection of favCollections;\" class=\"collection-card\">\n      <app-collection-card [collection]=\"collection\"></app-collection-card>\n    </div>\n  </div>\n</div>\n<div class=\"collections-with-header\">\n  <div class=\"heading\"><span class=\"text-heading\">Collections</span></div>\n  <div class=\"collections-container\">\n    <div *ngFor=\"let collection of collections;\"  class=\"collection-card\">\n      <app-collection-card [collection]=\"collection\"></app-collection-card>\n    </div>\n  </div>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {BreakPoints, BreakpointsService} from \"../../../services/breakpoints.service\";\nimport {CollectionsService} from \"../../../api/services/collections.service\";\nimport {Collection} from \"../../../api/models/collection\";\nimport {DialogService} from \"@ngneat/dialog\";\nimport {AddCollectionComponent} from \"../../add-collection/add-collection.component\";\n\n@Component({\n  selector: 'app-collections',\n  templateUrl: './collections.component.html',\n  styleUrls: ['./collections.component.scss']\n})\nexport class CollectionsComponent implements OnInit {\n\n  @Input() collections!: Collection[];\n  favCollections: Collection[] = [];\n  showFavourite: boolean = false;\n\n  constructor(private breakpointsService: BreakpointsService,\n              private collectionsService: CollectionsService,\n              private dialogService: DialogService) {\n  }\n\n  ngOnInit(): void {\n    console.log('CollectionsComponent', this.collections)\n    this.breakpointsService.observe().subscribe(value => {\n      switch (value) {\n        case BreakPoints.xs:\n          this.showFavourite = true;\n          break;\n        case BreakPoints.sm:\n          this.showFavourite = true;\n          break;\n        case BreakPoints.md:\n          this.showFavourite = false;\n          break;\n        case BreakPoints.lg:\n          this.showFavourite = false;\n          break;\n        case BreakPoints.xl:\n          this.showFavourite = false;\n          break;\n        default:\n          this.showFavourite = false;\n      }\n    });\n  }\n\n  add(): void {\n    this.dialogService.open(AddCollectionComponent, {\n      // data is typed based on the passed generic\n      data: {\n        title: 'Add collection',\n      },\n    }).afterClosed$.subscribe(() => this.getCollections());\n  }\n\n  private getCollections() {\n    this.collectionsService.collectionControllerGetCurrentUserCollections().subscribe(collections => {\n      this.collections = collections;\n    })\n  }\n\n}\n","<div class=\"side-heading\"><span class=\"text-heading\">Favorite</span></div>\n<div class=\"side-collections\" *ngIf=\"favCollections\">\n  <div class=\"card\" *ngFor=\"let collection of favCollections;\"><div class=\"card-content\">{{collection.name}}</div></div>\n</div>\n","import { Component } from '@angular/core';\nimport {Collection} from \"../../../api/models/collection\";\n\n@Component({\n  selector: 'app-collections-sidepanel',\n  templateUrl: './collections-sidepanel.component.html',\n  styleUrls: ['./collections-sidepanel.component.scss']\n})\nexport class CollectionsSidepanelComponent {\n\n  favCollections: Collection[] = [];\n\n}\n","<div class=\"row\">\n  <div *ngIf=\"showSidePanel\" ngClass=\"col-{{sidePanelColumns}}\" class=\"side\">\n    <app-collections-sidepanel></app-collections-sidepanel>\n  </div>\n  <div ngClass=\"col-{{collectionsPanelColumns}}\" class=\"collections\">\n    <app-collections [collections]=\"collections\"></app-collections>\n  </div>\n</div>\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {collectionsResolver} from \"./resolvers/collections.resolver\";\nimport {CollectionsPageComponent} from \"./pages/collections-page/collections-page.component\";\nimport {CollectionPageComponent} from \"./pages/collection-page/collection-page.component\";\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CollectionsPageComponent,\n    resolve: {collections: collectionsResolver}\n  },\n  {\n    path: 'collection/:collectionId',\n    component: CollectionPageComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {\n}\n","import {Component, OnInit} from '@angular/core';\nimport {BreakPoints, BreakpointsService} from \"../../services/breakpoints.service\";\nimport {ActivatedRoute, Data} from \"@angular/router\";\nimport {Collection} from \"../../api/models/collection\";\n\n@Component({\n  selector: 'app-collections-page',\n  templateUrl: './collections-page.component.html',\n  styleUrls: ['./collections-page.component.scss']\n})\nexport class CollectionsPageComponent implements OnInit {\n  collections: Array<Collection> = [];\n  showSidePanel: boolean = false;\n  sidePanelColumns: number = 0;\n  collectionsPanelColumns: number = 0;\n\n  constructor(private breakpointsService: BreakpointsService,\n              private activatedRoute: ActivatedRoute) {\n  }\n\n  ngOnInit(): void {\n    console.log(\"CollectionsPageComponent\")\n    this.breakpointsService.observe().subscribe(value => {\n      this.showSidePanel = false;\n      this.sidePanelColumns = 3;\n      this.collectionsPanelColumns = 4;\n      switch (value) {\n        case BreakPoints.xs:\n          break;\n        case BreakPoints.sm:\n          this.collectionsPanelColumns = 8;\n          break;\n        case BreakPoints.md:\n          this.showSidePanel = true;\n          this.collectionsPanelColumns = 9;\n          break;\n        case BreakPoints.lg:\n          this.showSidePanel = true;\n          this.collectionsPanelColumns = 9;\n          break;\n        case BreakPoints.xl:\n          this.showSidePanel = true;\n          this.sidePanelColumns = 4;\n          this.collectionsPanelColumns = 8;\n          break;\n        default:\n          break;\n      }\n    });\n    this.activatedRoute.data.subscribe((routeData: Data) => {\n      const data = routeData as { collections: Array<Collection> };\n      if (data && data.collections) {\n        this.collections = data.collections;\n      }\n    });\n\n  }\n}\n","import {ActivatedRouteSnapshot, ResolveFn} from \"@angular/router\";\nimport {Collection} from \"../api/models/collection\";\nimport {Observable} from \"rxjs\";\nimport {inject} from \"@angular/core\";\nimport {CollectionsService} from \"../api/services\";\n\nexport const collectionsResolver: ResolveFn<Array<Collection>> = (route: ActivatedRouteSnapshot): Observable<Array<Collection>> => {\n  return inject(CollectionsService).collectionControllerGetCurrentUserCollections();\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-collection-page',\n  templateUrl: './collection-page.component.html',\n  styleUrls: ['./collection-page.component.scss']\n})\nexport class CollectionPageComponent {\n\n}\n","<p>collection-page works!</p>\n","import {Injectable} from '@angular/core';\nimport { GoogleAuthProvider } from '@firebase/auth';\nimport {AngularFireAuth} from \"@angular/fire/compat/auth\";\nimport {User} from \"../model/user\";\nimport {firstValueFrom} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FireAuthService {\n  userData: any;\n\n  constructor(\n    private afAuth: AngularFireAuth,\n    // private afs: AngularFirestore,\n  ) {\n    this.afAuth.authState.subscribe((user) => {\n      this.saveUser(user);\n    });\n  }\n\n  private saveUser(user: any) {\n    if (user) {\n      this.userData = user;\n      localStorage.setItem(\n        'fire.user',\n        JSON.stringify(this.userData),\n      );\n    } else {\n      localStorage.setItem('fire.user', 'null');\n    }\n  }\n\n  get isLoggedIn(): boolean {\n    const userString = localStorage.getItem('fire.user');\n    const user = JSON.parse(userString ? userString : 'null');\n    return user !== null && user.emailVerified !== false;\n  }\n\n  GoogleAuth() {\n    return this.AuthLogin(new GoogleAuthProvider()).then((res: any) => {\n      // if (res) {\n      //   this.router.navigate(['dashboard']);\n      // }\n    });\n  }\n\n  async getToken() {\n    const token = await firstValueFrom(this.afAuth.idToken);\n    return token;\n  }\n\n  AuthLogin(provider: any) {\n    return this.afAuth\n      .signInWithPopup(provider)\n      .then((result) => {\n        // this.ngZone.run(() => {\n        //   this.router.navigate(['dashboard']);\n        // });\n        let user = this.SetUserData(result.user);\n        this.saveUser(user);\n      })\n      .catch((error) => {\n        window.alert(error);\n      });\n  }\n\n  /* Setting up user data when sign in with username/password,\nsign up with username/password and sign in with social auth\nprovider in Firestore database using AngularFirestore + AngularFirestoreDocument service */\n  SetUserData(user: any) {\n      // const userRef: AngularFirestoreDocument<any> = this.afs.doc<any>(\n      //     `users/${user.uid}`,\n      // );\n      const userData: User = {\n          uid: user.uid,\n          email: user.email,\n          displayName: user.displayName,\n          photoURL: user.photoURL,\n          emailVerified: user.emailVerified,\n      };\n      return userData;\n      // return userRef.set(userData, {\n      //     merge: true,\n      // });\n  }\n\n  // Sign out\n  SignOut() {\n    return this.afAuth.signOut().then(() => {\n      localStorage.removeItem('fire.user');\n    });\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DialogRef } from '@ngneat/dialog';\nimport { FireAuthService } from '../../services/fire-auth.service';\n\ninterface Data {\n    userName: string;\n}\n\n@Component({\n    selector: 'app-profile',\n    templateUrl: './profile.component.html',\n    styleUrls: ['./profile.component.scss'],\n})\nexport class ProfileComponent {\n\n    constructor(\n        private ref: DialogRef<Data>,\n        private fireAuthService: FireAuthService,\n    ) {}\n\n    get userName() {\n        return this.fireAuthService.userData.displayName;\n    }\n\n    get photoURL() {\n        return this.fireAuthService.userData.photoURL;\n    }\n\n    logOut(): void {\n        this.fireAuthService.SignOut();\n        this.ref.close();\n    }\n}\n","<div class=\"profileContainer\">\n  <div class=\"profileImageContainer\">\n    <img [src]=\"photoURL\" alt=\"\" class=\"profilePhoto\">\n    <div class=\"profilePhotoBorder\"></div>\n  </div>\n</div>\n<h2>Logged in as {{userName}}\n</h2>\n<button (click)=\"logOut()\" class=\"text-main link-btn\">LOGOUT</button>\n","<span class=\"login-block\">\n<a (click)=\"profile()\" *ngIf=\"loggedIn\" class=\"login\"></a>\n<button (click)=\"GoogleAuth()\" *ngIf=\"!loggedIn\" class=\"text-main link-btn\">LOGIN</button>\n</span>\n","import {Component} from '@angular/core';\nimport {FireAuthService} from '../../services/fire-auth.service';\nimport {DialogService} from '@ngneat/dialog';\nimport {ProfileComponent} from '../profile/profile.component';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n  constructor(\n    private fireAuthService: FireAuthService,\n    private dialogService: DialogService,\n  ) {\n  }\n\n  get loggedIn(): boolean {\n    return this.fireAuthService.isLoggedIn;\n  }\n\n  get userName(): string {\n    const name = this.fireAuthService?.userData?.displayName;\n    return name ? name : 'Logged In';\n  }\n\n  login() {\n    this.GoogleAuth();\n  }\n\n  GoogleAuth(): void {\n    this.fireAuthService.GoogleAuth();\n  }\n\n  profile(): void {\n    this.dialogService.open(ProfileComponent, {\n      // data is typed based on the passed generic\n      data: {\n        title: 'asdasdsad',\n      },\n    });\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {ItemsService} from './api/services/items.service';\nimport {Item} from \"./api/models/item\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  // items: Item[] = [];\n  // lastItem?: Item;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    // this.reloadItems();\n  }\n\n  // reloadItems() {\n  //   this.getItems();\n  //   this.getLastItem();\n  // }\n  //\n  // getItems() {\n  //   // this.itemsService\n  //   //     .itemsControllerGetItems()\n  //   //     .subscribe((value) => (this.items = value));\n  // }\n  //\n  // getLastItem() {\n  //   // this.itemsService\n  //   //     .itemsControllerGetLastItem()\n  //   //     .subscribe((value) => (this.lastItem = value));\n  // }\n}\n","<div class=\"topbar\">\n  <app-login class=\"login-block\"></app-login>\n</div>\n<div class=\"full-body\">\n  <div class=\"responsive-container\">\n    <router-outlet></router-outlet>\n    <!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-add-item (changes)=\"reloadItems()\"></app-add-item>-->\n<!--        <app-list [items]=\"items\"></app-list>-->\n<!--      </div>-->\n<!--    </div>-->\n<!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-calibrate-item (changes)=\"reloadItems()\" *ngIf=\"!!lastItem\" [lastItem]=\"lastItem\"></app-calibrate-item>-->\n<!--      </div>-->\n<!--    </div>-->\n<!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-pairs (changes)=\"reloadItems()\"></app-pairs>-->\n<!--      </div>-->\n<!--    </div>-->\n  </div>\n</div>\n\n","/* tslint:disable */\n/* eslint-disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { ItemsService } from './services/items.service';\nimport { CollectionsService } from './services/collections.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    ItemsService,\n    CollectionsService,\n    ApiConfiguration\n  ],\n})\nexport class ApiModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<ApiModule> {\n    return {\n      ngModule: ApiModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: ApiModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    HttpEvent,\n    HttpHandler,\n    HttpInterceptor,\n    HttpRequest,\n} from '@angular/common/http';\nimport { FireAuthService } from '../services/fire-auth.service';\nimport { from, lastValueFrom, Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FirebaseAuthInterceptor implements HttpInterceptor {\n    constructor(private fireAuthService: FireAuthService) {}\n\n    intercept(\n        req: HttpRequest<any>,\n        next: HttpHandler,\n    ): Observable<HttpEvent<any>> {\n        return from(this.handle(req, next));\n    }\n\n    async handle(req: HttpRequest<any>, next: HttpHandler) {\n        const token = await this.fireAuthService.getToken();\n        if (!token) {\n            return await lastValueFrom(next.handle(req));\n        }\n        const req1 = req.clone({\n            headers: req.headers.set('Authorization', `Bearer ${token}`),\n        });\n        return await lastValueFrom(next.handle(req1));\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\nimport {environment} from '../environments/environment';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {ListComponent} from './components/list/list.component';\nimport {ApiModule} from './api/api.module';\nimport {PairsComponent} from './components/pairs/pairs.component';\nimport {AddItemComponent} from './components/add-item/add-item.component';\nimport {PairComponent} from './components/pairs/pair/pair.component';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CalibrateItemComponent} from './components/calibrate-item/calibrate-item.component';\nimport {initializeApp, provideFirebaseApp} from '@angular/fire/app';\nimport {\n  getAnalytics,\n  provideAnalytics,\n  ScreenTrackingService,\n  UserTrackingService,\n} from '@angular/fire/analytics';\nimport {getAuth, provideAuth} from '@angular/fire/auth';\nimport {FireAuthService} from './services/fire-auth.service';\nimport {FirebaseAuthInterceptor} from './interceptors/firebase-auth.interceptor';\nimport {AngularFireModule} from '@angular/fire/compat';\nimport {LoginComponent} from './components/login/login.component';\nimport {CollectionsComponent} from './components/collections/collections/collections.component';\nimport {CollectionsPageComponent} from './pages/collections-page/collections-page.component';\nimport {CollectionsSidepanelComponent} from './components/collections/collections-sidepanel/collections-sidepanel.component';\nimport { CollectionCardComponent } from './components/collections/collection-card/collection-card.component';\nimport { AddCollectionComponent } from './components/add-collection/add-collection.component';\nimport { CollectionPageComponent } from './pages/collection-page/collection-page.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ListComponent,\n    PairsComponent,\n    AddItemComponent,\n    PairComponent,\n    CalibrateItemComponent,\n    LoginComponent,\n    CollectionsComponent,\n    CollectionsPageComponent,\n    CollectionsSidepanelComponent,\n    CollectionCardComponent,\n    AddCollectionComponent,\n    CollectionPageComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule.withConfig({\n      warnOnNgModelWithFormControl: 'always',\n    }),\n    ApiModule.forRoot({rootUrl: environment.application.apiUrl}),\n    AppRoutingModule,\n    AngularFireModule.initializeApp(environment.firebase),\n    provideFirebaseApp(() => {\n      console.log('*********MODULE*********', environment.firebase);\n      return initializeApp(environment.firebase);\n    }),\n    provideAnalytics(() => getAnalytics()),\n    provideAuth(() => getAuth()),\n  ],\n  providers: [\n    FireAuthService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: FirebaseAuthInterceptor,\n      multi: true,\n    },\n    ScreenTrackingService,\n    UserTrackingService,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {\n}\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch((err) => console.error(err));\n"],"x_google_ignoreList":[]}