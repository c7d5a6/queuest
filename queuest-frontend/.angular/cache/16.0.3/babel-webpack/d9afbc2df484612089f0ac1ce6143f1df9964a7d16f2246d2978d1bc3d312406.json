{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nclass ApiService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /**\n   * Path part for operation appControllerGetHello\n   */\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `appControllerGetHello()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  appControllerGetHello$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ApiService.AppControllerGetHelloPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `appControllerGetHello$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  appControllerGetHello(params, context) {\n    return this.appControllerGetHello$Response(params, context).pipe(map(r => r.body));\n  }\n}\nApiService.AppControllerGetHelloPath = '/';\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});\nexport { ApiService };","map":{"version":3,"names":["HttpResponse","BaseService","RequestBuilder","map","filter","ApiService","constructor","config","http","appControllerGetHello$Response","params","context","rb","rootUrl","AppControllerGetHelloPath","request","build","responseType","accept","pipe","r","clone","body","undefined","appControllerGetHello","i0","ɵɵinject","i1","ApiConfiguration","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/nkukovenko/projects/queuest/queuest-frontend/src/app/api/services/api.service.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation appControllerGetHello\n   */\n  static readonly AppControllerGetHelloPath = '/';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `appControllerGetHello()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  appControllerGetHello$Response(params?: {\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ApiService.AppControllerGetHelloPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `appControllerGetHello$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  appControllerGetHello(params?: {\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.appControllerGetHello$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n"],"mappings":"AAGA,SAAqBA,YAAY,QAAqB,sBAAsB;AAC5E,SAASC,WAAW,QAAQ,iBAAiB;AAG7C,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,SAASC,GAAG,EAAEC,MAAM,QAAQ,gBAAgB;;;;AAG5C,MAGaC,UAAW,SAAQJ,WAAW;EACzCK,YACEC,MAAwB,EACxBC,IAAgB;IAEhB,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;;;EAKA;;;;;;EAMAC,8BAA8BA,CAACC,MAC9B,EACDC,OAAqB;IAInB,MAAMC,EAAE,GAAG,IAAIV,cAAc,CAAC,IAAI,CAACW,OAAO,EAAER,UAAU,CAACS,yBAAyB,EAAE,KAAK,CAAC;IACxF,IAAIJ,MAAM,EAAE,C;IAGZ,OAAO,IAAI,CAACF,IAAI,CAACO,OAAO,CAACH,EAAE,CAACI,KAAK,CAAC;MAChCC,YAAY,EAAE,MAAM;MACpBC,MAAM,EAAE,KAAK;MACbP,OAAO,EAAEA;KACV,CAAC,CAAC,CAACQ,IAAI,CACNf,MAAM,CAAEgB,CAAM,IAAKA,CAAC,YAAYpB,YAAY,CAAC,EAC7CG,GAAG,CAAEiB,CAAoB,IAAI;MAC3B,OAAQA,CAAuB,CAACC,KAAK,CAAC;QAAEC,IAAI,EAAEC;MAAS,CAAE,CAA6B;IACxF,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAC,qBAAqBA,CAACd,MACrB,EACDC,OAAqB;IAInB,OAAO,IAAI,CAACF,8BAA8B,CAACC,MAAM,EAACC,OAAO,CAAC,CAACQ,IAAI,CAC7DhB,GAAG,CAAEiB,CAA2B,IAAKA,CAAC,CAACE,IAAY,CAAC,CACrD;EACH;;AAxDWjB,UAAW,CAWNS,yBAAyB,GAAG,GAAG;AAXpCT,UAAW,C;mBAAXA,UAAU,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;AAAA;AAAVzB,UAAW,C;SAAXA,UAAU;EAAA0B,OAAA,EAAV1B,UAAU,CAAA2B,IAAA;EAAAC,UAAA,EAFT;AAAM;SAEP5B,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}