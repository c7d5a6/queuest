{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport { map, filter } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nlet ItemsService = /*#__PURE__*/(() => {\n  class ItemsService extends BaseService {\n    constructor(config, http) {\n      super(config, http);\n    }\n    /**\n     * Path part for operation itemsControllerGetItems\n     */\n\n    /**\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\n     * To access only the response body, use `itemsControllerGetItems()` instead.\n     *\n     * This method doesn't expect any request body.\n     */\n    itemsControllerGetItems$Response(params, context) {\n      const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerGetItemsPath, 'get');\n      if (params) {}\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'application/json',\n        context: context\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\n     * This method provides access only to the response body.\n     * To access the full response (for headers, for example), `itemsControllerGetItems$Response()` instead.\n     *\n     * This method doesn't expect any request body.\n     */\n    itemsControllerGetItems(params, context) {\n      return this.itemsControllerGetItems$Response(params, context).pipe(map(r => r.body));\n    }\n    /**\n     * Path part for operation itemsControllerAddItem\n     */\n\n    /**\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\n     * To access only the response body, use `itemsControllerAddItem()` instead.\n     *\n     * This method sends `application/json` and handles request body of type `application/json`.\n     */\n    itemsControllerAddItem$Response(params, context) {\n      const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerAddItemPath, 'post');\n      if (params) {\n        rb.body(params.body, 'application/json');\n      }\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: '*/*',\n        context: context\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: undefined\n        });\n      }));\n    }\n    /**\n     * This method provides access only to the response body.\n     * To access the full response (for headers, for example), `itemsControllerAddItem$Response()` instead.\n     *\n     * This method sends `application/json` and handles request body of type `application/json`.\n     */\n    itemsControllerAddItem(params, context) {\n      return this.itemsControllerAddItem$Response(params, context).pipe(map(r => r.body));\n    }\n    /**\n     * Path part for operation itemsControllerGetBestPairs\n     */\n\n    /**\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\n     * To access only the response body, use `itemsControllerGetBestPairs()` instead.\n     *\n     * This method doesn't expect any request body.\n     */\n    itemsControllerGetBestPairs$Response(params, context) {\n      const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerGetBestPairsPath, 'get');\n      if (params) {\n        rb.query('exclude', params.exclude, {});\n        rb.query('size', params.size, {});\n      }\n      return this.http.request(rb.build({\n        responseType: 'json',\n        accept: 'application/json',\n        context: context\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r;\n      }));\n    }\n    /**\n     * This method provides access only to the response body.\n     * To access the full response (for headers, for example), `itemsControllerGetBestPairs$Response()` instead.\n     *\n     * This method doesn't expect any request body.\n     */\n    itemsControllerGetBestPairs(params, context) {\n      return this.itemsControllerGetBestPairs$Response(params, context).pipe(map(r => r.body));\n    }\n    /**\n     * Path part for operation itemsControllerAddRelation\n     */\n\n    /**\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\n     * To access only the response body, use `itemsControllerAddRelation()` instead.\n     *\n     * This method sends `application/json` and handles request body of type `application/json`.\n     */\n    itemsControllerAddRelation$Response(params, context) {\n      const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerAddRelationPath, 'post');\n      if (params) {\n        rb.body(params.body, 'application/json');\n      }\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: '*/*',\n        context: context\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: undefined\n        });\n      }));\n    }\n    /**\n     * This method provides access only to the response body.\n     * To access the full response (for headers, for example), `itemsControllerAddRelation$Response()` instead.\n     *\n     * This method sends `application/json` and handles request body of type `application/json`.\n     */\n    itemsControllerAddRelation(params, context) {\n      return this.itemsControllerAddRelation$Response(params, context).pipe(map(r => r.body));\n    }\n    /**\n     * Path part for operation itemsControllerDeleteRelation\n     */\n\n    /**\n     * This method provides access to the full `HttpResponse`, allowing access to response headers.\n     * To access only the response body, use `itemsControllerDeleteRelation()` instead.\n     *\n     * This method sends `application/json` and handles request body of type `application/json`.\n     */\n    itemsControllerDeleteRelation$Response(params, context) {\n      const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerDeleteRelationPath, 'delete');\n      if (params) {\n        rb.body(params.body, 'application/json');\n      }\n      return this.http.request(rb.build({\n        responseType: 'text',\n        accept: '*/*',\n        context: context\n      })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n        return r.clone({\n          body: undefined\n        });\n      }));\n    }\n    /**\n     * This method provides access only to the response body.\n     * To access the full response (for headers, for example), `itemsControllerDeleteRelation$Response()` instead.\n     *\n     * This method sends `application/json` and handles request body of type `application/json`.\n     */\n    itemsControllerDeleteRelation(params, context) {\n      return this.itemsControllerDeleteRelation$Response(params, context).pipe(map(r => r.body));\n    }\n  }\n  ItemsService.ItemsControllerGetItemsPath = '/items';\n  ItemsService.ItemsControllerAddItemPath = '/items';\n  ItemsService.ItemsControllerGetBestPairsPath = '/items/pairs';\n  ItemsService.ItemsControllerAddRelationPath = '/items/relation';\n  ItemsService.ItemsControllerDeleteRelationPath = '/items/relation';\n  ItemsService.ɵfac = function ItemsService_Factory(t) {\n    return new (t || ItemsService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n  };\n  ItemsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ItemsService,\n    factory: ItemsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ItemsService;\n})();\nexport { ItemsService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}