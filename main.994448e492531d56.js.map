{"version":3,"file":"main.994448e492531d56.js","mappings":"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","names":["exports","ApiConfiguration","constructor","this","rootUrl","factory","ɵfac","providedIn","require","api_configuration_1","items_service_1","collections_service_1","ApiModule","static","params","ngModule","providers","provide","useValue","parentModule","http","Error","i0","ɵɵinject","i1","HttpClient","ItemsService","CollectionsService","BaseService","config","_rootUrl","i2","http_1","ParameterCodecInstance","ParameterCodec","encodeKey","key","encodeURIComponent","encodeValue","value","decodeKey","decodeURIComponent","decodeValue","Parameter","name","options","defaultStyle","defaultExplode","style","explode","serializeValue","separator","Array","map","v","split","join","array","Object","keys","propVal","push","String","PathParameter","super","append","path","prefix","alreadySerialized","replace","result","QueryParameter","HeaderParameter","headers","RequestBuilder","operationPath","method","_path","Map","_query","_header","set","query","header","body","contentType","_bodyContentType","Blob","type","pairs","val","formValue","formDataValue","_bodyContent","p","formData","FormData","toAppend","JSON","stringify","build","pathParam","values","url","httpParams","HttpParams","encoder","queryParam","httpHeaders","HttpHeaders","accept","headerParam","HttpRequest","toUpperCase","responseType","reportProgress","context","base_service_1","request_builder_1","operators_1","collectionControllerGetCurrentUserCollections$Response","rb","CollectionControllerGetCurrentUserCollectionsPath","request","pipe","filter","r","HttpResponse","collectionControllerGetCurrentUserCollections","collectionControllerAddCollection$Response","CollectionControllerAddCollectionPath","clone","undefined","collectionControllerAddCollection","collectionControllerGetCurrentUserFavoriteCollections$Response","CollectionControllerGetCurrentUserFavoriteCollectionsPath","collectionControllerGetCurrentUserFavoriteCollections","itemsControllerGetItems$Response","ItemsControllerGetItemsPath","collectionId","itemsControllerGetItems","itemsControllerAddItem$Response","ItemsControllerAddItemPath","itemsControllerAddItem","router_1","routes","AppRoutingModule","RouterModule","forRoot","core_1","auth_1","breakpoints_service_1","AppComponent","itemsService","breakpointsService","items","breakpont","auth","inject","Auth","ngOnInit","reloadItems","observe","subscribe","BreakPoints","xs","sm","md","lg","xl","getItems","getLastItem","ɵɵdirectiveInject","BreakpointsService","selectors","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","platform_browser_1","environment_1","app_routing_module_1","app_component_1","api_module_1","forms_1","app_1","analytics_1","fire_auth_service_1","firebase_auth_interceptor_1","compat_1","AppModule","bootstrap","FireAuthService","HTTP_INTERCEPTORS","useClass","FirebaseAuthInterceptor","multi","ScreenTrackingService","UserTrackingService","imports","BrowserModule","HttpClientModule","ReactiveFormsModule","withConfig","warnOnNgModelWithFormControl","environment","application","apiUrl","AngularFireModule","initializeApp","firebase","provideFirebaseApp","console","log","provideAnalytics","getAnalytics","provideAuth","getAuth","CollectionCardComponent","ɵɵtext","CollectionsSidepanelComponent","CollectionsComponent","showFavourite","ɵɵtemplate","CollectionsComponent_div_6_Template","ɵɵadvance","ɵɵproperty","profile_component_1","ɵɵlistener","ɵɵrestoreView","_r3","ctx_r2","ɵɵnextContext","ɵɵresetView","profile","_r5","ctx_r4","GoogleAuth","LoginComponent","fireAuthService","dialogService","loggedIn","isLoggedIn","userName","_b","_a","userData","displayName","login","open","ProfileComponent","data","title","DialogService","LoginComponent_a_1_Template","LoginComponent_button_2_Template","ref","photoURL","logOut","SignOut","close","DialogRef","standalone","features","ɵɵStandaloneFeature","ɵɵsanitizeUrl","ɵɵtextInterpolate1","rxjs_1","intercept","req","next","from","handle","_this","_asyncToGenerator","token","getToken","lastValueFrom","req1","ɵɵpropertyInterpolate1","ctx_r0","sidePanelColumns","CollectionsPageComponent","showSidePanel","collectionsPanelColumns","CollectionsPageComponent_div_1_Template","responsive","Observable","observer","matches","BreakpointObserver","auth_2","afAuth","afs","authState","user","localStorage","setItem","userString","getItem","parse","emailVerified","AuthLogin","GoogleAuthProvider","then","res","currentUser","getIdToken","provider","signInWithPopup","SetUserData","catch","error","window","alert","doc","uid","email","merge","signOut","removeItem","AngularFireAuth","AngularFirestore","projectId","appId","storageBucket","apiKey","authDomain","messagingSenderId","measurementId","production","app_module_1","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","err"],"sourceRoot":"webpack:///","sources":["./src/app/api/api-configuration.ts","./src/app/api/api.module.ts","./src/app/api/base-service.ts","./src/app/api/request-builder.ts","./src/app/api/services/collections.service.ts","./src/app/api/services/items.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/collections/collection-card/collection-card.component.ts","./src/app/components/collections/collection-card/collection-card.component.html","./src/app/components/collections/collections-sidepanel/collections-sidepanel.component.ts","./src/app/components/collections/collections-sidepanel/collections-sidepanel.component.html","./src/app/components/collections/collections/collections.component.ts","./src/app/components/collections/collections/collections.component.html","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/profile/profile.component.ts","./src/app/components/profile/profile.component.html","./src/app/interceptors/firebase-auth.interceptor.ts","./src/app/pages/collections/collections-page.component.ts","./src/app/pages/collections/collections-page.component.html","./src/app/services/breakpoints.service.ts","./src/app/services/fire-auth.service.ts","./src/environments/environment.prod.ts","./src/main.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { ItemsService } from './services/items.service';\nimport { CollectionsService } from './services/collections.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    ItemsService,\n    CollectionsService,\n    ApiConfiguration\n  ],\n})\nexport class ApiModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<ApiModule> {\n    return {\n      ngModule: ApiModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: ApiModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Collection } from '../models/collection';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CollectionsService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation collectionControllerGetCurrentUserCollections\n   */\n  static readonly CollectionControllerGetCurrentUserCollectionsPath = '/collections';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerGetCurrentUserCollections()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserCollections$Response(params?: {\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Collection>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerGetCurrentUserCollectionsPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Collection>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerGetCurrentUserCollections$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserCollections(params?: {\n  },\n  context?: HttpContext\n\n): Observable<Array<Collection>> {\n\n    return this.collectionControllerGetCurrentUserCollections$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Collection>>) => r.body as Array<Collection>)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerAddCollection\n   */\n  static readonly CollectionControllerAddCollectionPath = '/collections';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerAddCollection()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  collectionControllerAddCollection$Response(params: {\n    body: Collection\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerAddCollectionPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerAddCollection$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  collectionControllerAddCollection(params: {\n    body: Collection\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.collectionControllerAddCollection$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerGetCurrentUserFavoriteCollections\n   */\n  static readonly CollectionControllerGetCurrentUserFavoriteCollectionsPath = '/collections/fav';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerGetCurrentUserFavoriteCollections()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserFavoriteCollections$Response(params?: {\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Collection>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerGetCurrentUserFavoriteCollectionsPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Collection>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerGetCurrentUserFavoriteCollections$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserFavoriteCollections(params?: {\n  },\n  context?: HttpContext\n\n): Observable<Array<Collection>> {\n\n    return this.collectionControllerGetCurrentUserFavoriteCollections$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Collection>>) => r.body as Array<Collection>)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Item } from '../models/item';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ItemsService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation itemsControllerGetItems\n   */\n  static readonly ItemsControllerGetItemsPath = '/collections/{collectionId}/items';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerGetItems()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetItems$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Item>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerGetItemsPath, 'get');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Item>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerGetItems$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetItems(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<Array<Item>> {\n\n    return this.itemsControllerGetItems$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Item>>) => r.body as Array<Item>)\n    );\n  }\n\n  /**\n   * Path part for operation itemsControllerAddItem\n   */\n  static readonly ItemsControllerAddItemPath = '/collections/{collectionId}/items';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerAddItem()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  itemsControllerAddItem$Response(params: {\n    collectionId: number;\n    body: Item\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerAddItemPath, 'post');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerAddItem$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  itemsControllerAddItem(params: {\n    collectionId: number;\n    body: Item\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.itemsControllerAddItem$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import {Component, inject, OnInit} from '@angular/core';\nimport {ItemsService} from './api/services/items.service';\nimport {Auth} from '@angular/fire/auth';\nimport {Item} from \"./api/models/item\";\nimport {BreakpointObserver, Breakpoints, MediaMatcher} from \"@angular/cdk/layout\";\nimport {BreakPoints, BreakpointsService} from \"./services/breakpoints.service\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  items: Item[] = [];\n  lastItem?: Item;\n  breakpont: string = 'none';\n  private auth: Auth = inject(Auth);\n\n  constructor(private itemsService: ItemsService, private breakpointsService: BreakpointsService) {\n  }\n\n  ngOnInit(): void {\n    this.reloadItems();\n    this.breakpointsService.observe().subscribe(value => {\n      switch (value){\n        case BreakPoints.xs: this.breakpont = 'XS'; break;\n        case BreakPoints.sm: this.breakpont = 'SM'; break;\n        case BreakPoints.md: this.breakpont = 'MD'; break;\n        case BreakPoints.lg: this.breakpont = 'LG'; break;\n        case BreakPoints.xl: this.breakpont = 'XL'; break;\n        default:  this.breakpont = 'NONE'; break;\n      }\n    });\n  }\n\n  reloadItems() {\n    this.getItems();\n    this.getLastItem();\n  }\n\n  getItems() {\n    // this.itemsService\n    //     .itemsControllerGetItems()\n    //     .subscribe((value) => (this.items = value));\n  }\n\n  getLastItem() {\n    // this.itemsService\n    //     .itemsControllerGetLastItem()\n    //     .subscribe((value) => (this.lastItem = value));\n  }\n}\n","<div class=\"topbar\">\n  <app-login class=\"login-block\"></app-login>\n</div>\n<div class=\"full-body\">\n  <div class=\"responsive-container\">\n    <app-collections-page></app-collections-page>\n<!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-add-item (changes)=\"reloadItems()\"></app-add-item>-->\n<!--        <app-list [items]=\"items\"></app-list>-->\n<!--      </div>-->\n<!--    </div>-->\n<!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-calibrate-item (changes)=\"reloadItems()\" *ngIf=\"!!lastItem\" [lastItem]=\"lastItem\"></app-calibrate-item>-->\n<!--      </div>-->\n<!--    </div>-->\n<!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-pairs (changes)=\"reloadItems()\"></app-pairs>-->\n<!--      </div>-->\n<!--    </div>-->\n  </div>\n</div>\n\n","import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\nimport {environment} from '../environments/environment';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {ListComponent} from './components/list/list.component';\nimport {ApiModule} from './api/api.module';\nimport {PairsComponent} from './components/pairs/pairs.component';\nimport {AddItemComponent} from './components/add-item/add-item.component';\nimport {PairComponent} from './components/pairs/pair/pair.component';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {CalibrateItemComponent} from './components/calibrate-item/calibrate-item.component';\nimport {initializeApp, provideFirebaseApp} from '@angular/fire/app';\nimport {\n  getAnalytics,\n  provideAnalytics,\n  ScreenTrackingService,\n  UserTrackingService,\n} from '@angular/fire/analytics';\nimport {getAuth, provideAuth} from '@angular/fire/auth';\nimport {FireAuthService} from './services/fire-auth.service';\nimport {FirebaseAuthInterceptor} from './interceptors/firebase-auth.interceptor';\nimport {AngularFireModule} from '@angular/fire/compat';\nimport {LoginComponent} from './components/login/login.component';\nimport {ProfileComponent} from './components/profile/profile.component';\nimport {CollectionsComponent} from './components/collections/collections/collections.component';\nimport {CollectionsPageComponent} from './pages/collections/collections-page.component';\nimport {CollectionsSidepanelComponent} from './components/collections/collections-sidepanel/collections-sidepanel.component';\nimport { CollectionCardComponent } from './components/collections/collection-card/collection-card.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ListComponent,\n    PairsComponent,\n    AddItemComponent,\n    PairComponent,\n    CalibrateItemComponent,\n    LoginComponent,\n    CollectionsComponent,\n    CollectionsPageComponent,\n    CollectionsSidepanelComponent,\n    CollectionCardComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule.withConfig({\n      warnOnNgModelWithFormControl: 'always',\n    }),\n    ApiModule.forRoot({rootUrl: environment.application.apiUrl}),\n    AppRoutingModule,\n    AngularFireModule.initializeApp(environment.firebase),\n    provideFirebaseApp(() => {\n      console.log('*********MODULE*********', environment.firebase);\n      return initializeApp(environment.firebase);\n    }),\n    provideAnalytics(() => getAnalytics()),\n    provideAuth(() => getAuth()),\n  ],\n  providers: [\n    FireAuthService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: FirebaseAuthInterceptor,\n      multi: true,\n    },\n    ScreenTrackingService,\n    UserTrackingService,\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-collection-card',\n  templateUrl: './collection-card.component.html',\n  styleUrls: ['./collection-card.component.scss']\n})\nexport class CollectionCardComponent {\n\n}\n","<div class=\"card\">\n  <div class=\"card-content\">\n    <div><b>Collection name</b></div>\n    <ul>\n      <li>Item 1</li>\n      <li>Item 2</li>\n      <li>Long item 3</li>\n      <li>S-t 4</li>\n      <li>Item 5</li>\n    </ul>\n    <div class=\"card-footer\"><button>X</button></div>\n  </div>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-collections-sidepanel',\n  templateUrl: './collections-sidepanel.component.html',\n  styleUrls: ['./collections-sidepanel.component.scss']\n})\nexport class CollectionsSidepanelComponent {\n\n}\n","<div class=\"side-heading\"><span class=\"text-heading\">Favorite</span></div>\n<div class=\"side-collections\">\n  <div class=\"card\"><div class=\"card-content\">Collection name 1</div></div>\n  <div class=\"card\"><div class=\"card-content\">Collection name 2</div></div>\n  <div class=\"card\"><div class=\"card-content\">Collection name 3</div></div>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {BreakPoints, BreakpointsService} from \"../../../services/breakpoints.service\";\n\n@Component({\n  selector: 'app-collections',\n  templateUrl: './collections.component.html',\n  styleUrls: ['./collections.component.scss']\n})\nexport class CollectionsComponent implements OnInit {\n\n  showFavourite: boolean = false;\n\n  constructor(private breakpointsService: BreakpointsService) {\n  }\n\n  ngOnInit(): void {\n    this.breakpointsService.observe().subscribe(value => {\n      switch (value){\n        case BreakPoints.xs: this.showFavourite = true; break;\n        case BreakPoints.sm: this.showFavourite = true; break;\n        case BreakPoints.md: this.showFavourite = false; break;\n        case BreakPoints.lg: this.showFavourite = false; break;\n        case BreakPoints.xl: this.showFavourite = false; break;\n        default:  this.showFavourite = false;\n      }\n    });\n  }\n\n}\n","<div class=\"card\">\n  <div class=\"card-content\">\n    <div class=\"collection-bar\">\n      <input class=\"search\" placeholder=\"Search\">\n      <button>+</button>\n    </div>\n  </div>\n</div>\n<div *ngIf=\"showFavourite\" class=\"collections-with-header\">\n  <div class=\"heading\"><span class=\"text-heading\">Favorites</span></div>\n  <div class=\"collections-container\">\n    <div class=\"collection-card\">\n      <app-collection-card></app-collection-card>\n    </div>\n    <div class=\"collection-card\">\n      <app-collection-card></app-collection-card>\n    </div>\n    <div class=\"collection-card\">\n      <app-collection-card></app-collection-card>\n    </div>\n    <div class=\"collections-container\">\n    </div>\n  </div>\n</div>\n<div class=\"collections-with-header\">\n  <div class=\"heading\"><span class=\"text-heading\">Collections</span></div>\n  <div class=\"collections-container\">\n    <div class=\"collection-card\">\n      <app-collection-card></app-collection-card>\n    </div>\n    <div class=\"collection-card\">\n      <app-collection-card></app-collection-card>\n    </div>\n    <div class=\"collection-card\">\n      <app-collection-card></app-collection-card>\n    </div>\n    <div class=\"collection-card\">\n      <app-collection-card></app-collection-card>\n    </div>\n    <div class=\"collection-card\">\n      <app-collection-card></app-collection-card>\n    </div>\n    <div class=\"collection-card\">\n      <app-collection-card></app-collection-card>\n    </div>\n    <div class=\"collection-card\">\n      <app-collection-card></app-collection-card>\n    </div>\n  </div>\n</div>\n","import { Component, inject } from '@angular/core';\nimport { FireAuthService } from '../../services/fire-auth.service';\nimport { DialogService, DialogRef } from '@ngneat/dialog';\nimport { ProfileComponent } from '../profile/profile.component';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n    constructor(\n        private fireAuthService: FireAuthService,\n        private dialogService: DialogService,\n    ) {}\n\n    get loggedIn(): boolean {\n        return this.fireAuthService.isLoggedIn;\n    }\n\n    get userName(): string {\n        const name = this.fireAuthService?.userData?.displayName;\n        return name ? name : 'Logged In';\n    }\n\n    login() {\n        this.GoogleAuth();\n    }\n\n    GoogleAuth(): void {\n        this.fireAuthService.GoogleAuth();\n    }\n\n    profile(): void {\n        this.dialogService.open(ProfileComponent, {\n            // data is typed based on the passed generic\n            data: {\n                title: 'asdasdsad',\n            },\n        });\n    }\n}\n","<span class=\"login-block\">\n<a (click)=\"profile()\" *ngIf=\"loggedIn\" class=\"login\"></a>\n<button (click)=\"GoogleAuth()\" *ngIf=\"!loggedIn\" class=\"text-main link-btn\">LOGIN</button>\n</span>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DialogRef } from '@ngneat/dialog';\nimport { FireAuthService } from '../../services/fire-auth.service';\nimport { firebaseApp$ } from '@angular/fire/app';\n\ninterface Data {\n    userName: string;\n}\n\n@Component({\n    selector: 'app-profile',\n    standalone: true,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './profile.component.html',\n    styleUrls: ['./profile.component.scss'],\n})\nexport class ProfileComponent {\n    constructor(\n        private ref: DialogRef<Data>,\n        private fireAuthService: FireAuthService,\n    ) {}\n\n    get userName() {\n        return this.fireAuthService.userData.displayName;\n    }\n\n    get photoURL() {\n        return this.fireAuthService.userData.photoURL;\n    }\n\n    logOut(): void {\n        this.fireAuthService.SignOut();\n        this.ref.close();\n    }\n}\n","<div class=\"profileContainer\">\n  <div class=\"profileImageContainer\">\n    <img [src]=\"photoURL\" alt=\"\" class=\"profilePhoto\">\n    <div class=\"profilePhotoBorder\"></div>\n  </div>\n</div>\n<h2>Logged in as {{userName}}\n</h2>\n<button (click)=\"logOut()\" class=\"text-main link-btn\">LOGOUT</button>\n","import { Injectable } from '@angular/core';\nimport {\n    HttpEvent,\n    HttpHandler,\n    HttpInterceptor,\n    HttpRequest,\n} from '@angular/common/http';\nimport { FireAuthService } from '../services/fire-auth.service';\nimport { from, lastValueFrom, Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FirebaseAuthInterceptor implements HttpInterceptor {\n    constructor(private fireAuthService: FireAuthService) {}\n\n    intercept(\n        req: HttpRequest<any>,\n        next: HttpHandler,\n    ): Observable<HttpEvent<any>> {\n        return from(this.handle(req, next));\n    }\n\n    async handle(req: HttpRequest<any>, next: HttpHandler) {\n        const token = await this.fireAuthService.getToken();\n        if (!token) {\n            return await lastValueFrom(next.handle(req));\n        }\n        const req1 = req.clone({\n            headers: req.headers.set('Authorization', `Bearer ${token}`),\n        });\n        return await lastValueFrom(next.handle(req1));\n    }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {BreakPoints, BreakpointsService} from \"../../services/breakpoints.service\";\n\n@Component({\n  selector: 'app-collections-page',\n  templateUrl: './collections-page.component.html',\n  styleUrls: ['./collections-page.component.scss']\n})\nexport class CollectionsPageComponent implements OnInit {\n  showSidePanel: boolean;\n  sidePanelColumns: number;\n  collectionsPanelColumns: number;\n\n  constructor(private breakpointsService: BreakpointsService) {\n  }\n\n  ngOnInit(): void {\n    this.breakpointsService.observe().subscribe(value => {\n      this.showSidePanel = false;\n      this.sidePanelColumns = 3;\n      this.collectionsPanelColumns = 4;\n      switch (value) {\n        case BreakPoints.xs:\n          break;\n        case BreakPoints.sm:\n          this.collectionsPanelColumns = 8;\n          break;\n        case BreakPoints.md:\n          this.showSidePanel = true;\n          this.collectionsPanelColumns = 9;\n          break;\n        case BreakPoints.lg:\n          this.showSidePanel = true;\n          this.collectionsPanelColumns = 9;\n          break;\n        case BreakPoints.xl:\n          this.showSidePanel = true;\n          this.sidePanelColumns = 4;\n          this.collectionsPanelColumns = 8;\n          break;\n        default:\n          break;\n      }\n    });\n\n  }\n}\n","<div class=\"row\">\n  <div *ngIf=\"showSidePanel\" ngClass=\"col-{{sidePanelColumns}}\" class=\"side\">\n    <app-collections-sidepanel></app-collections-sidepanel>\n  </div>\n  <div ngClass=\"col-{{collectionsPanelColumns}}\" class=\"collections\">\n    <app-collections></app-collections>\n  </div>\n</div>\n","import {Injectable} from '@angular/core';\nimport {BreakpointObserver, Breakpoints} from \"@angular/cdk/layout\";\nimport {Observable} from \"rxjs\";\n\nexport enum BreakPoints {\n  xs = '(max-width: 599.98px)',\n  sm = '(min-width: 600px) and (max-width: 904.98px)',\n  md = '(min-width: 905px) and (max-width: 1239.98px)',\n  lg = '(min-width: 1240px) and (max-width: 1439.98px)',\n  xl = '(min-width: 1440px)',\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BreakpointsService {\n\n  constructor(private responsive: BreakpointObserver) {\n  }\n\n  public observe(): Observable<BreakPoints> {\n    return new Observable((observer) => {\n      this.responsive.observe(BreakPoints.xs).subscribe(result => {\n        if (result.matches) observer.next(BreakPoints.xs);\n      });\n      this.responsive.observe(BreakPoints.sm).subscribe(result => {\n        if (result.matches) observer.next(BreakPoints.sm);\n      });\n      this.responsive.observe(BreakPoints.md).subscribe(result => {\n        if (result.matches) observer.next(BreakPoints.md);\n      });\n      this.responsive.observe(BreakPoints.lg).subscribe(result => {\n        if (result.matches) observer.next(BreakPoints.lg);\n      });\n      this.responsive.observe(BreakPoints.xl).subscribe(result => {\n        if (result.matches) observer.next(BreakPoints.xl);\n      });\n    });\n  }\n\n// {\n\n// this.responsive.observe(Breakpoints.Small)\n//   .subscribe(result => {\n//     if (result.matches) {\n//       this.breakpont = `Small`\n//     }\n//   });\n// this.responsive.observe(Breakpoints.Medium)\n//   .subscribe(result => {\n//     if (result.matches) {\n//       this.breakpont = `Medium`\n//     }\n//   });\n// this.responsive.observe(Breakpoints.Large)\n//   .subscribe(result => {\n//     if (result.matches) {\n//       this.breakpont = `Large`\n//     }\n//   });\n// this.responsive.observe(Breakpoints.XLarge)\n//   .subscribe(result => {\n//     if (result.matches) {\n//       this.breakpont = `XLarge`\n//     }\n//   });\n//\n// }\n}\n","import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport {\n    AngularFirestore,\n    AngularFirestoreDocument,\n} from '@angular/fire/compat/firestore';\nimport { User } from '../model/user';\nimport { GoogleAuthProvider } from '@firebase/auth';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FireAuthService {\n    userData: any;\n\n    constructor(\n        private afAuth: AngularFireAuth,\n        private afs: AngularFirestore,\n    ) {\n        this.afAuth.authState.subscribe((user) => {\n            if (user) {\n                this.userData = user;\n                localStorage.setItem(\n                    'fire.user',\n                    JSON.stringify(this.userData),\n                );\n            } else {\n                localStorage.setItem('fire.user', 'null');\n            }\n        });\n    }\n\n    get isLoggedIn(): boolean {\n        const userString = localStorage.getItem('fire.user');\n        const user = JSON.parse(userString ? userString : 'null');\n        return user !== null && user.emailVerified !== false;\n    }\n\n    GoogleAuth() {\n        return this.AuthLogin(new GoogleAuthProvider()).then((res: any) => {\n            // if (res) {\n            //   this.router.navigate(['dashboard']);\n            // }\n        });\n    }\n\n    async getToken() {\n        const user = await this.afAuth.currentUser;\n        return await user?.getIdToken(false);\n    }\n\n    AuthLogin(provider: any) {\n        return this.afAuth\n            .signInWithPopup(provider)\n            .then((result) => {\n                // this.ngZone.run(() => {\n                //   this.router.navigate(['dashboard']);\n                // });\n                this.SetUserData(result.user);\n            })\n            .catch((error) => {\n                window.alert(error);\n            });\n    }\n\n    /* Setting up user data when sign in with username/password,\n  sign up with username/password and sign in with social auth\n  provider in Firestore database using AngularFirestore + AngularFirestoreDocument service */\n    SetUserData(user: any) {\n        const userRef: AngularFirestoreDocument<any> = this.afs.doc<any>(\n            `users/${user.uid}`,\n        );\n        const userData: User = {\n            uid: user.uid,\n            email: user.email,\n            displayName: user.displayName,\n            photoURL: user.photoURL,\n            emailVerified: user.emailVerified,\n        };\n        return userRef.set(userData, {\n            merge: true,\n        });\n    }\n\n    // Sign out\n    SignOut() {\n        return this.afAuth.signOut().then(() => {\n            localStorage.removeItem('fire.user');\n        });\n    }\n}\n","import { ApplicationEnvironment } from './application-environment';\n\nexport const environment: ApplicationEnvironment = {\n    firebase: {\n        projectId: 'queuest-cb885',\n        appId: '1:936633637141:web:9cc171d2c3bf1f5a5bb11c',\n        storageBucket: 'queuest-cb885.appspot.com',\n        apiKey: 'AIzaSyDPU4uUi8KAm_2VC1kZg7oIlPpQJvV7MQY',\n        authDomain: 'queuest-cb885.firebaseapp.com',\n        messagingSenderId: '936633637141',\n        measurementId: 'G-P8DPMCNH7X',\n    },\n    production: true,\n    application: {\n        apiUrl: 'https://api.queuest.c7d5a6.com',\n    },\n};\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch((err) => console.error(err));\n"],"x_google_ignoreList":[]}