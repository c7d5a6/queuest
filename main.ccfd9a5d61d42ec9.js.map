{"version":3,"file":"main.ccfd9a5d61d42ec9.js","mappings":"8IAEO,MAAMA,WACC,CACNC,UAAW,gBACXC,MAAO,4CACPC,cAAe,4BACfC,OAAQ,0CACRC,WAAY,gCACZC,kBAAmB,eACnBC,cAAe,gBARVP,qBAYG,yDCJT,IAAMQ,EAAgB,MAAvB,MAAOA,EAHbC,cAIEC,KAAAC,QAAkB,GACnBC,SAAAF,KAAA,mBAAAG,iBAFYL,EAAgB,EAAAI,SAAAF,KAAA,WAAAI,EAAAC,IAAA,OAAhBP,EAAgBQ,QAAhBR,EAAgBS,UAAAC,WAFf,gBAEDV,CAAgB,KCAhBW,EAAW,MAAlB,MAAOA,EACXV,YACYW,EACAC,GADAX,KAAAU,SACAV,KAAAW,OAIJX,KAAAY,SAAmB,EAF3B,CAQA,WAAIX,GACF,OAAOD,KAAKY,UAAYZ,KAAKU,OAAOT,OACtC,CAKA,WAAIA,CAAQA,GACVD,KAAKY,SAAWX,CAClB,CAACC,SAAAF,KAAA,mBAAAG,iBAtBUM,GAAWI,MAAAC,GAAAD,MAAAE,MAAA,EAAAb,SAAAF,KAAA,WAAAI,EAAAC,IAAA,OAAXI,EAAWH,QAAXG,EAAWF,mBAAXE,CAAW,KCexB,MAAMO,EAAyB,IAjB/B,MAAMC,EACJC,UAAUC,GACR,OAAOC,mBAAmBD,EAC5B,CAEAE,YAAYC,GACV,OAAOF,mBAAmBE,EAC5B,CAEAC,UAAUJ,GACR,OAAOK,mBAAmBL,EAC5B,CAEAM,YAAYH,GACV,OAAOE,mBAAmBF,EAC5B,GAeF,MAAeI,EACb3B,YAAmB4B,EAAqBL,EAAmBM,EAA2BC,EAAsBC,GAAzF9B,KAAA2B,OAAqB3B,KAAAsB,QAAmBtB,KAAA4B,UACzD5B,KAAK4B,QAAUA,GAAW,SACtB5B,KAAK4B,QAAQG,QACf/B,KAAK4B,QAAQG,MAAQF,SAEnB7B,KAAK4B,QAAQI,UACfhC,KAAK4B,QAAQI,QAAUF,EAE3B,CAEAG,eAAeX,EAAYY,EAAY,KACrC,GAAc,MAAVZ,EACF,MAAO,GACF,GAAIA,aAAiBa,MAC1B,OAAOb,EAAMc,IAAIC,GAAKrC,KAAKiC,eAAeI,GAAGC,MAAMJ,GAAWK,KAAKnB,mBAAmBc,KAAaK,KAAKL,GACnG,GAAqB,iBAAVZ,EAAoB,CACpC,MAAMkB,EAAkB,GACxB,UAAWrB,KAAOsB,OAAOC,KAAKpB,GAAQ,CACpC,IAAIqB,EAAUrB,EAAMH,GACJ,MAAZwB,IACFA,EAAU3C,KAAKiC,eAAeU,GAASL,MAAMJ,GAAWK,KAAKnB,mBAAmBc,IAC5ElC,KAAK4B,QAAQI,QACfQ,EAAMI,KAAK,GAAGzB,KAAOwB,MAErBH,EAAMI,KAAKzB,GACXqB,EAAMI,KAAKD,KAIjB,OAAOH,EAAMD,KAAKL,GAElB,OAAOW,OAAOvB,EAElB,EAMF,MAAMwB,UAAsBpB,EAC1B3B,YAAY4B,EAAcL,EAAYM,GACpCmB,MAAMpB,EAAML,EAAOM,EAAS,UAAU,EACxC,CAEAoB,OAAOC,GACL,IAAI3B,EAAQtB,KAAKsB,MACH,MAAVA,IACFA,EAAQ,IAEV,IAAI4B,EAAgC,UAAvBlD,KAAK4B,QAAQG,MAAoB,IAAM,GAChDG,EAAYlC,KAAK4B,QAAQI,QAAqB,KAAXkB,EAAgB,IAAMA,EAAS,IAClEC,GAAoB,EACxB,MAA2B,WAAvBnD,KAAK4B,QAAQG,QAEfmB,EAAS,IAAIlD,KAAK2B,QACd3B,KAAK4B,QAAQI,SAA4B,iBAAVV,IACjC4B,EAAS,IACL5B,aAAiBa,OAEnBb,EAAQA,EAAMc,IAAIC,GAAK,GAAGrC,KAAK2B,QAAQ3B,KAAKiC,eAAeI,EAAG,QAC9Df,EAAQA,EAAMiB,KAAK,KACnBY,GAAoB,IAGpB7B,EAAQtB,KAAKiC,eAAeX,EAAO,KACnC6B,GAAoB,KAI1B7B,EAAQ4B,GAAUC,EAAoB7B,EAAQtB,KAAKiC,eAAeX,EAAOY,KAEzEe,EAAOA,EAAKG,QAAQ,IAAIpD,KAAK2B,QAASL,IAC1B8B,QAAQ,IAAIF,IAASlD,KAAK2B,OAAO3B,KAAK4B,QAAQI,QAAU,IAAM,MAAOV,EAEnF,CAGAW,eAAeX,EAAYY,EAAY,KACrC,IAAImB,EAA0B,iBAAV/B,EAAqBF,mBAAmBE,GAASyB,MAAMd,eAAeX,EAAOY,GACjGmB,OACAA,GADAA,EAASA,EAAOD,QAAQ,OAAQ,MAChBA,QAAQ,OAAQ,MAChBA,QAAQ,OAAQ,IAElC,EAMF,MAAME,UAAuB5B,EAC3B3B,YAAY4B,EAAcL,EAAYM,GACpCmB,MAAMpB,EAAML,EAAOM,EAAS,QAAQ,EACtC,CAEAoB,OAAOO,GACL,GAAIvD,KAAKsB,iBAAiBa,MAExB,KAAInC,KAAK4B,QAAQI,QAQf,OAAOuB,EAAOP,OAAOhD,KAAK2B,KAAM3B,KAAKiC,eAAejC,KAAKsB,MAHhB,mBAAvBtB,KAAK4B,QAAQG,MAC3B,IAA6B,kBAAvB/B,KAAK4B,QAAQG,MACjB,IAAM,MANZ,UAAWM,KAAKrC,KAAKsB,MACnBiC,EAASA,EAAOP,OAAOhD,KAAK2B,KAAM3B,KAAKiC,eAAeI,YAQlC,OAAfrC,KAAKsB,OAAwC,iBAAftB,KAAKsB,MAE5C,GAA2B,eAAvBtB,KAAK4B,QAAQG,MAEf,UAAWZ,KAAOsB,OAAOC,KAAK1C,KAAKsB,OAAQ,CACzC,MAAMqB,EAAU3C,KAAKsB,MAAMH,GACX,MAAZwB,IACFY,EAASA,EAAOP,OAAO,GAAGhD,KAAK2B,QAAQR,KAAQnB,KAAKiC,eAAeU,aAG9D3C,KAAK4B,QAAQI,QAEtB,UAAWb,KAAOsB,OAAOC,KAAK1C,KAAKsB,OAAQ,CACzC,MAAMqB,EAAU3C,KAAKsB,MAAMH,GACX,MAAZwB,IACFY,EAASA,EAAOP,OAAO7B,EAAKnB,KAAKiC,eAAeU,SAG/C,CAEL,MAAMH,EAAe,GACrB,UAAWrB,KAAOsB,OAAOC,KAAK1C,KAAKsB,OAAQ,CACzC,MAAMqB,EAAU3C,KAAKsB,MAAMH,GACX,MAAZwB,IACFH,EAAMI,KAAKzB,GACXqB,EAAMI,KAAKD,IAGfY,EAASA,EAAOP,OAAOhD,KAAK2B,KAAM3B,KAAKiC,eAAeO,SAE/CxC,WAAKsB,QAEdiC,EAASA,EAAOP,OAAOhD,KAAK2B,KAAM3B,KAAKiC,eAAejC,KAAKsB,SAE7D,OAAOiC,CACT,EAMF,MAAMC,UAAwB9B,EAC5B3B,YAAY4B,EAAcL,EAAYM,GACpCmB,MAAMpB,EAAML,EAAOM,EAAS,UAAU,EACxC,CAEAoB,OAAOS,GACL,GAAIzD,WAAKsB,MACP,GAAItB,KAAKsB,iBAAiBa,MACxB,UAAWE,KAAKrC,KAAKsB,MACnBmC,EAAUA,EAAQT,OAAOhD,KAAK2B,KAAM3B,KAAKiC,eAAeI,SAG1DoB,EAAUA,EAAQT,OAAOhD,KAAK2B,KAAM3B,KAAKiC,eAAejC,KAAKsB,QAGjE,OAAOmC,CACT,EAMI,MAAOC,EAQX3D,YACSE,EACA0D,EACAC,GAFA5D,KAAAC,UACAD,KAAA2D,gBACA3D,KAAA4D,SATD5D,KAAA6D,MAAQ,IAAIC,IACZ9D,KAAA+D,OAAS,IAAID,IACb9D,KAAAgE,QAAU,IAAIF,GAQtB,CAKAb,KAAKtB,EAAcL,EAAYM,GAC7B5B,KAAK6D,MAAMI,IAAItC,EAAM,IAAImB,EAAcnB,EAAML,EAAOM,GAAW,IACjE,CAKAsC,MAAMvC,EAAcL,EAAYM,GAC9B5B,KAAK+D,OAAOE,IAAItC,EAAM,IAAI2B,EAAe3B,EAAML,EAAOM,GAAW,IACnE,CAKAuC,OAAOxC,EAAcL,EAAYM,GAC/B5B,KAAKgE,QAAQC,IAAItC,EAAM,IAAI6B,EAAgB7B,EAAML,EAAOM,GAAW,IACrE,CAKAwC,KAAK9C,EAAY+C,EAAc,oBAM7B,GAJErE,KAAKsE,iBADHhD,aAAiBiD,KACKjD,EAAMkD,KAENH,EAEI,sCAA1BrE,KAAKsE,kBAAsE,OAAVhD,GAAmC,iBAAVA,EAAoB,CAEhH,MAAMmD,EAAiC,GACvC,UAAWtD,KAAOsB,OAAOC,KAAKpB,GAAQ,CACpC,IAAIoD,EAAMpD,EAAMH,GACVuD,aAAevC,QACnBuC,EAAM,CAACA,IAET,UAAWrC,KAAKqC,EAAK,CACnB,MAAMC,EAAY3E,KAAK4E,cAAcvC,GACnB,OAAdsC,GACFF,EAAM7B,KAAK,CAACzB,EAAKwD,KAIvB3E,KAAK6E,aAAeJ,EAAMrC,IAAI0C,GAAK,GAAG1D,mBAAmB0D,EAAE,OAAO1D,mBAAmB0D,EAAE,OAAOvC,KAAK,aAChE,wBAA1BvC,KAAKsE,iBAA4C,CAE1D,MAAMS,EAAW,IAAIC,SACrB,GAAc,MAAV1D,EACF,UAAWH,KAAOsB,OAAOC,KAAKpB,GAAQ,CACpC,MAAMoD,EAAMpD,EAAMH,GAClB,GAAIuD,aAAevC,MACjB,UAAWE,KAAKqC,EAAK,CACnB,MAAMO,EAAWjF,KAAK4E,cAAcvC,GACnB,OAAb4C,GACFF,EAAS/B,OAAO7B,EAAK8D,OAGpB,CACL,MAAMA,EAAWjF,KAAK4E,cAAcF,GACnB,OAAbO,GACFF,EAASd,IAAI9C,EAAK8D,IAK1BjF,KAAK6E,aAAeE,OAGpB/E,KAAK6E,aAAevD,CAExB,CAEQsD,cAActD,GACpB,OAAc,MAAVA,EACK,KAELA,aAAiBiD,KACZjD,EAEY,iBAAVA,EACF4D,KAAKC,UAAU7D,GAEjBuB,OAAOvB,EAChB,CAKA8D,MAAexD,GAcbA,EAAUA,GAAW,GAGrB,IAAIqB,EAAOjD,KAAK2D,cAChB,UAAW0B,KAAarF,KAAK6D,MAAMyB,SACjCrC,EAAOoC,EAAUrC,OAAOC,GAE1B,MAAMsC,EAAMvF,KAAKC,QAAUgD,EAG3B,IAAIuC,EAAa,IAAIC,KAAW,CAC9BC,QAAS1E,IAEX,UAAW2E,KAAc3F,KAAK+D,OAAOuB,SACnCE,EAAaG,EAAW3C,OAAOwC,GAIjC,IAAII,EAAc,IAAIC,KAClBjE,EAAQkE,SACVF,EAAcA,EAAY5C,OAAO,SAAUpB,EAAQkE,SAErD,UAAWC,KAAe/F,KAAKgE,QAAQsB,SACrCM,EAAcG,EAAY/C,OAAO4C,GAInC,OAAI5F,KAAKsE,oBAAsBtE,KAAK6E,wBAAwBG,YAC1DY,EAAcA,EAAY3B,IAAI,eAAgBjE,KAAKsE,mBAI9C,IAAI0B,KAAehG,KAAK4D,OAAOqC,cAAeV,EAAKvF,KAAK6E,aAAc,CAC3EtB,OAAQiC,EACR/B,QAASmC,EACTM,aAActE,EAAQsE,aACtBC,eAAgBvE,EAAQuE,eACxBC,QAASxE,EAAQwE,SAErB,0BC5VK,IAAMC,EAAa,MAApB,MAAOA,UAAqB5F,EAChCV,YACEW,EACAC,GAEAoC,MAAMrC,EAAQC,EAChB,CAEAT,SAGgBF,KAAAsG,4BAA8B,oCAQ9CC,iCAAiChD,EAGjC6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASoG,EAAaC,4BAA6B,OACtF,OAAI/C,GACFiD,EAAGvD,KAAK,eAAgBM,EAAOkD,aAAc,IAGxCzG,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,mBACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACIA,GAGb,CAQAE,wBAAwBxD,EAGxB6C,GAIE,OAAOpG,KAAKuG,iCAAiChD,EAAO6C,GAASO,QAC3DvE,KAAKyE,GAA+CA,EAAEzC,MAE1D,CAEAlE,SAGgBF,KAAAgH,2BAA6B,oCAQ7CC,gCAAgC1D,EAIhC6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASoG,EAAaW,2BAA4B,QACrF,OAAIzD,IACFiD,EAAGvD,KAAK,eAAgBM,EAAOkD,aAAc,IAC7CD,EAAGpC,KAAKb,EAAOa,KAAM,qBAGhBpE,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,mBACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACKA,EAAwBK,MAAM,CAAE9C,KAAM+C,WAAWtE,OAAQgE,EAAwBzC,UAG/F,CAQAgD,uBAAuB7D,EAIvB6C,GAIE,OAAOpG,KAAKiH,gCAAgC1D,EAAO6C,GAASO,QAC1DvE,KAAKyE,GAAkCA,EAAEzC,MAE7C,CAEAlE,SAGgBF,KAAAqH,4CAA8C,uDAQ9DC,iDAAiD/D,EAGjD6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASoG,EAAagB,4CAA6C,UACtG,OAAI9D,GACFiD,EAAGvD,KAAK,mBAAoBM,EAAOgE,iBAAkB,IAGhDvH,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,MACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACKA,EAAwBK,MAAM,CAAE9C,UAAMoD,KAGpD,CAQAC,wCAAwClE,EAGxC6C,GAIE,OAAOpG,KAAKsH,iDAAiD/D,EAAO6C,GAASO,QAC3EvE,KAAKyE,GAAgCA,EAAEzC,MAE3C,CAEAlE,SAGgBF,KAAA0H,0CAA4C,qDAQ5DC,+CAA+CpE,EAG/C6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASoG,EAAaqB,0CAA2C,OACpG,OAAInE,GACFiD,EAAGvD,KAAK,eAAgBM,EAAOkD,aAAc,IAGxCzG,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,mBACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACIA,GAGb,CAQAe,sCAAsCrE,EAGtC6C,GAIE,OAAOpG,KAAK2H,+CAA+CpE,EAAO6C,GAASO,QACzEvE,KAAKyE,GAAgCA,EAAEzC,MAE3C,CAEAlE,SAGgBF,KAAA6H,+BAAiC,2DAQjDC,oCAAoCvE,EAKpC6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASoG,EAAawB,+BAAgC,OACzF,OAAItE,IACFiD,EAAGvD,KAAK,KAAMM,EAAOwE,GAAI,IACzBvB,EAAGvD,KAAK,SAAUM,EAAOyE,OAAQ,IACjCxB,EAAGtC,MAAM,UAAWX,EAAO0E,QAAS,KAG/BjI,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,mBACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACIA,GAGb,CAQAqB,2BAA2B3E,EAK3B6C,GAIE,OAAOpG,KAAK8H,oCAAoCvE,EAAO6C,GAASO,QAC9DvE,KAAKyE,GAAoCA,EAAEzC,MAE/C,CAAClE,SAAAF,KAAA,mBAAAG,iBAxRUkG,GAAYxF,MAAAC,GAAAD,MAAAE,MAAA,EAAAb,SAAAF,KAAA,WAAAI,EAAAC,IAAA,OAAZgG,EAAY/F,QAAZ+F,EAAY9F,UAAAC,WAFX,gBAED6F,CAAa,KCFb8B,EAAmB,MAA1B,MAAOA,UAA2B1H,EACtCV,YACEW,EACAC,GAEAoC,MAAMrC,EAAQC,EAChB,CAEAT,SAGgBF,KAAAoI,kDAAoD,eAQpEC,uDAAuD9E,EAGvD6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASkI,EAAmBC,kDAAmD,OAClH,OAAI7E,GACFiD,EAAGtC,MAAM,aAAcX,EAAO+E,WAAY,IAGrCtI,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,mBACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACIA,GAGb,CAQA0B,8CAA8ChF,EAG9C6C,GAIE,OAAOpG,KAAKqI,uDAAuD9E,EAAO6C,GAASO,QACjFvE,KAAKyE,GAA6CA,EAAEzC,MAExD,CAEAlE,SAGgBF,KAAAwI,sCAAwC,eAQxDC,2CAA2ClF,EAG3C6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASkI,EAAmBK,sCAAuC,QACtG,OAAIjF,GACFiD,EAAGpC,KAAKb,EAAOa,KAAM,oBAGhBpE,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,MACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACKA,EAAwBK,MAAM,CAAE9C,UAAMoD,KAGpD,CAQAkB,kCAAkCnF,EAGlC6C,GAIE,OAAOpG,KAAKyI,2CAA2ClF,EAAO6C,GAASO,QACrEvE,KAAKyE,GAAgCA,EAAEzC,MAE3C,CAEAlE,SAGgBF,KAAA2I,0DAA4D,mBAQ5EC,+DAA+DrF,EAE/D6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASkI,EAAmBQ,0DAA2D,OAI1H,OAAO3I,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,mBACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACIA,GAGb,CAQAgC,sDAAsDtF,EAEtD6C,GAIE,OAAOpG,KAAK4I,+DAA+DrF,EAAO6C,GAASO,QACzFvE,KAAKyE,GAA6CA,EAAEzC,MAExD,CAEAlE,SAGgBF,KAAA8I,sCAAwC,8BAQxDC,2CAA2CxF,EAG3C6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASkI,EAAmBW,sCAAuC,OACtG,OAAIvF,GACFiD,EAAGvD,KAAK,eAAgBM,EAAOkD,aAAc,IAGxCzG,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,mBACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACIA,GAGb,CAQAmC,kCAAkCzF,EAGlC6C,GAIE,OAAOpG,KAAK+I,2CAA2CxF,EAAO6C,GAASO,QACrEvE,KAAKyE,GAAsCA,EAAEzC,MAEjD,CAEAlE,SAGgBF,KAAAiJ,2CAA6C,kCAQ7DC,gDAAgD3F,EAGhD6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASkI,EAAmBc,2CAA4C,QAC3G,OAAI1F,GACFiD,EAAGvD,KAAK,eAAgBM,EAAOkD,aAAc,IAGxCzG,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,MACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACKA,EAAwBK,MAAM,CAAE9C,UAAMoD,KAGpD,CAQA2B,uCAAuC5F,EAGvC6C,GAIE,OAAOpG,KAAKkJ,gDAAgD3F,EAAO6C,GAASO,QAC1EvE,KAAKyE,GAAgCA,EAAEzC,MAE3C,CAEAlE,SAGgBF,KAAAoJ,gDAAkD,kCAQlEC,qDAAqD9F,EAGrD6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASkI,EAAmBiB,gDAAiD,UAChH,OAAI7F,GACFiD,EAAGvD,KAAK,eAAgBM,EAAOkD,aAAc,IAGxCzG,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,MACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACKA,EAAwBK,MAAM,CAAE9C,UAAMoD,KAGpD,CAQA8B,4CAA4C/F,EAG5C6C,GAIE,OAAOpG,KAAKqJ,qDAAqD9F,EAAO6C,GAASO,QAC/EvE,KAAKyE,GAAgCA,EAAEzC,MAE3C,CAEAlE,SAGgBF,KAAAuJ,wCAA0C,oCAQ1DC,6CAA6CjG,EAG7C6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASkI,EAAmBoB,wCAAyC,QACxG,OAAIhG,GACFiD,EAAGvD,KAAK,eAAgBM,EAAOkD,aAAc,IAGxCzG,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,MACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACKA,EAAwBK,MAAM,CAAE9C,UAAMoD,KAGpD,CAQAiC,oCAAoClG,EAGpC6C,GAIE,OAAOpG,KAAKwJ,6CAA6CjG,EAAO6C,GAASO,QACvEvE,KAAKyE,GAAgCA,EAAEzC,MAE3C,CAAClE,SAAAF,KAAA,mBAAAG,iBAtXUgI,GAAkBtH,MAAAC,GAAAD,MAAAE,MAAA,EAAAb,SAAAF,KAAA,WAAAI,EAAAC,IAAA,OAAlB8H,EAAkB7H,QAAlB6H,EAAkB5H,UAAAC,WAFjB,gBAED2H,CAAmB,KCDnBuB,EAAqB,MAA5B,MAAOA,UAA6BjJ,EACxCV,YACEW,EACAC,GAEAoC,MAAMrC,EAAQC,EAChB,CAEAT,SAGgBF,KAAA2J,mCAAqC,6BAQrDC,wCAAwCrG,EAIxC6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASyJ,EAAqBC,mCAAoC,QACrG,OAAIpG,IACFiD,EAAGvD,KAAK,SAAUM,EAAOsG,OAAQ,IACjCrD,EAAGvD,KAAK,OAAQM,EAAOuG,KAAM,KAGxB9J,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,MACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACKA,EAAwBK,MAAM,CAAE9C,UAAMoD,KAGpD,CAQAuC,+BAA+BxG,EAI/B6C,GAIE,OAAOpG,KAAK4J,wCAAwCrG,EAAO6C,GAASO,QAClEvE,KAAKyE,GAAgCA,EAAEzC,MAE3C,CAEAlE,SAGgBF,KAAAgK,oCAAsC,iCAQtDC,yCAAyC1G,EAIzC6C,GAIE,MAAMI,EAAK,IAAI9C,EAAe1D,KAAKC,QAASyJ,EAAqBM,oCAAqC,UACtG,OAAIzG,IACFiD,EAAGvD,KAAK,UAAWM,EAAO2G,QAAS,IACnC1D,EAAGvD,KAAK,UAAWM,EAAO4G,QAAS,KAG9BnK,KAAKW,KAAK+F,QAAQF,EAAGpB,MAAM,CAChCc,aAAc,OACdJ,OAAQ,MACRM,QAASA,KACPO,QACFC,KAAQC,GAAWA,aAAaC,OAAY,EAC5C1E,KAAKyE,GACKA,EAAwBK,MAAM,CAAE9C,UAAMoD,KAGpD,CAQA4C,gCAAgC7G,EAIhC6C,GAIE,OAAOpG,KAAKiK,yCAAyC1G,EAAO6C,GAASO,QACnEvE,KAAKyE,GAAgCA,EAAEzC,MAE3C,CAAClE,SAAAF,KAAA,mBAAAG,iBAtHUuJ,GAAoB7I,MAAAC,GAAAD,MAAAE,MAAA,EAAAb,SAAAF,KAAA,WAAAI,EAAAC,IAAA,OAApBqJ,EAAoBpJ,QAApBoJ,EAAoBnJ,UAAAC,WAFnB,gBAEDkJ,CAAqB,6BCXtBW,EAAZ,SAAYA,GACRA,SAAAC,GAAA,wBACAD,EAAAE,GAAA,+CACAF,EAAAG,GAAA,gDACAH,EAAAI,GAAA,iDACAJ,EAAAK,GAAA,sBALQL,CAMZ,CANA,CAAYA,GAAW,IAWhB,IAAMM,EAAkB,MAAzB,MAAOA,EACT5K,YAAoB6K,GAAA5K,KAAA4K,YAAiC,CAE9CC,UACH,OAAO,IAAIC,IAAYC,IACnB/K,KAAK4K,WAAWC,QAAQR,EAAYC,IAAIU,UAAW3H,IAC3CA,EAAO4H,SAASF,EAASG,KAAKb,EAAYC,GAAE,GAEpDtK,KAAK4K,WAAWC,QAAQR,EAAYE,IAAIS,UAAW3H,IAC3CA,EAAO4H,SAASF,EAASG,KAAKb,EAAYE,GAAE,GAEpDvK,KAAK4K,WAAWC,QAAQR,EAAYG,IAAIQ,UAAW3H,IAC3CA,EAAO4H,SAASF,EAASG,KAAKb,EAAYG,GAAE,GAEpDxK,KAAK4K,WAAWC,QAAQR,EAAYI,IAAIO,UAAW3H,IAC3CA,EAAO4H,SAASF,EAASG,KAAKb,EAAYI,GAAE,GAEpDzK,KAAK4K,WAAWC,QAAQR,EAAYK,IAAIM,UAAW3H,IAC3CA,EAAO4H,SAASF,EAASG,KAAKb,EAAYK,GAAE,EACnD,EAET,CAACxK,SAAAF,KAAA,mBAAAG,iBArBQwK,GAAkB9J,MAAAC,MAAA,EAAAZ,SAAAF,KAAA,WAAAI,EAAAC,IAAA,OAAlBsK,EAAkBrK,QAAlBqK,EAAkBpK,UAAAC,WAFf,gBAEHmK,CAAkB,uCCIxB,IAAMQ,EAAsB,MAA7B,MAAOA,EAMTpL,YACYqL,EACAC,EACAC,GAFAtL,KAAAoL,MACApL,KAAAqL,cACArL,KAAAsL,qBAPHtL,KAAAuL,KAAkBvL,KAAKqL,YAAYG,MAAM,CAC9C7J,KAAM,CAAC,KAAM8J,KAAWC,WAOzB,CAEHC,WAAWC,GAEP,GADA5L,KAAK6L,mBAAmB7L,KAAKuL,OACxBvL,KAAKuL,KAAKO,MAEX,YADAF,EAAMG,OAAOC,OAGjB,MAAMC,EAA4BjM,KAAKuL,KAAKjK,MAC5C2K,EAAcC,WAAY,EAC1BlM,KAAKsL,mBACA5C,kCAAkC,CAAEtE,KAAM6H,IAC1CjB,UAAU,KACPhL,KAAKuL,KAAKY,QACVnM,KAAKoL,IAAIgB,OAAK,EAE1B,CAEAP,mBAAmBN,GACf9I,OAAO6C,OAAwBiG,EAAKc,UAAUC,QACzCC,IACGvM,KAAKwM,0BAA0BD,EAAO,EAGlD,CAEAC,0BAA0BD,GACtBA,EAAQE,gBACRF,EAAQG,cACRH,EAAQI,wBACZ,CAACzM,SAAAF,KAAA,mBAAAG,iBAxCQgL,GAAsBtK,MAAAC,MAAAD,MAAAE,MAAAF,MAAA+L,GAAA,EAAA1M,SAAAF,KAAA,UAAAI,EAAAyM,IAAA,MAAtB1B,EAAsB2B,UAAA,yBAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,kJAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ICnBnCtM,MAAA,UAAAA,CAA0B,YAGtBA,MAAA,aACAA,MAAA,cAAQA,MAAA,iBAAAwM,GAAA,OAASD,EAAAzB,WAAA0B,EAAkB,GAA4BxM,MAAA,SAAGA,mBAH9DA,MAAA,GAAAA,MAAA,YAAAuM,EAAA7B,MAGiC1K,MAAA,GAAAA,MAAA,WAAAuM,EAAA7B,KAAA+B,oRDe5BnC,CAAsB,8BEdPtK,MAAA,YAAwCA,MAAA,GAAiBA,8BAAjBA,MAAA,GAAAA,MAAA0M,EAAAC,MAAA,GAAA7L,gCACxCd,MAAA,YAAwCA,MAAA,GAAiBA,8BAAjBA,MAAA,GAAAA,MAAA4M,EAAAD,MAAA,GAAA7L,gCACxCd,MAAA,YAAwCA,MAAA,GAAiBA,8BAAjBA,MAAA,GAAAA,MAAA6M,EAAAF,MAAA,GAAA7L,gCACxCd,MAAA,YAAwCA,MAAA,GAAiBA,8BAAjBA,MAAA,GAAAA,MAAA8M,EAAAH,MAAA,GAAA7L,gCACxCd,MAAA,YAAwCA,MAAA,GAAiBA,8BAAjBA,MAAA,GAAAA,MAAA+M,EAAAJ,MAAA,GAAA7L,mDCE7D,IAAMkM,GAAuB,MAA9B,MAAOA,EAKX9N,YAAoB+N,GAAA9N,KAAA8N,eAFpB9N,KAAAwN,MAAgB,EAGhB,CAEAO,WACE/N,KAAK8N,aACF/G,wBAAwB,CAACN,aAAczG,KAAKgO,WAAWjG,KACvDiD,UAAUwC,IACTxN,KAAKwN,MAAQA,EAAMA,MAAMS,MAAM,EAAG,EAAC,EAEzC,CAAC/N,SAAAF,KAAA,mBAAAG,iBAdU0N,GAAuBhN,MAAAC,GAAA,EAAAZ,SAAAF,KAAA,UAAAI,EAAAyM,IAAA,MAAvBgB,EAAuBf,UAAA,0BAAAoB,OAAA,CAAAF,WAAA,cAAAjB,MAAA,GAAAC,KAAA,EAAAC,OAAA,6HAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDXpCtM,MAAA,QAAAA,CAAgD,UAAhDA,CAAgD,UAAhDA,CAAgD,UAAhDA,CAAgD,OAGjBA,MAAA,GAAmBA,UAC5CA,MAAA,SAAAA,CAAuB,UACDA,MAAA,EAAAsN,EAAA,cAAgEtN,QACpFA,MAAA,UAAoBA,MAAA,GAAAuN,EAAA,cAAgEvN,QACpFA,MAAA,WAAoBA,MAAA,GAAAwN,EAAA,cAAgExN,QACpFA,MAAA,WAAoBA,MAAA,GAAAyN,EAAA,cAAgEzN,QACpFA,MAAA,WAAoBA,MAAA,GAAA0N,EAAA,cAAgE1N,uBATzFA,MAAA,aAAAA,MAAA,EAAA2N,EAAApB,EAAAY,WAAAjG,KAG4BlH,MAAA,GAAAA,MAAAuM,EAAAY,WAAArM,MAEqBd,MAAA,GAAAA,MAAA,OAAAuM,EAAAI,MAAA,IACA3M,MAAA,GAAAA,MAAA,OAAAuM,EAAAI,MAAA,IACA3M,MAAA,GAAAA,MAAA,OAAAuM,EAAAI,MAAA,IACA3M,MAAA,GAAAA,MAAA,OAAAuM,EAAAI,MAAA,IACA3M,MAAA,GAAAA,MAAA,OAAAuM,EAAAI,MAAA,y0MCEvCK,CAAuB,4ECShChN,MAAA,SAAAA,CAAwG,WAC5EA,MAAA,GAAmBA,oCADDA,MAAA,aAAAA,MAAA,EAAA2N,GAAAC,EAAA1G,KAClBlH,MAAA,GAAAA,MAAA4N,EAAA9M,iCAJhCd,MAAA,UAAAA,CAA6E,UAA7EA,CAA6E,aAC3BA,MAAA,eAASA,UACzDA,MAAA,YACEA,MAAA,EAAA6N,GAAA,YAGF7N,gCAH4BA,MAAA,GAAAA,MAAA,UAAA0M,EAAAoB,2CAQ1B9N,MAAA,YACEA,MAAA,4BACFA,kCADuBA,MAAA,GAAAA,MAAA,aAAA+N,ICdpB,IAAMC,GAAoB,MAA3B,MAAOA,EAKT9O,YACY+O,EACAxD,EACAyD,GAFA/O,KAAA8O,qBACA9O,KAAAsL,qBACAtL,KAAA+O,gBALZ/O,KAAAgP,eAAgB,CAMb,CAEHjB,WACIkB,QAAQC,IAAI,uBAAwBlP,KAAKmP,aACzCnP,KAAK8O,mBAAmBjE,UAAUG,UAAW1J,IACzC,OAAQA,GACJ,KAAK+I,EAAYC,GAGjB,KAAKD,EAAYE,GACbvK,KAAKgP,eAAgB,EACrB,MAUJ,QACIhP,KAAKgP,eAAgB,IAGrC,CAEAI,MACIpP,KAAK+O,cACAM,KAAKlE,EAAwB,CAE1BmE,KAAM,CACFC,MAAO,oBAGdC,aAAaxE,UAAU,IAAMhL,KAAKyP,iBAC3C,CAEQA,iBACJzP,KAAKsL,mBACA/C,gDACAyC,UAAWmE,IACRnP,KAAKmP,YAAcA,GAE/B,CAACjP,SAAAF,KAAA,mBAAAG,iBArDQ0O,GAAoBhO,MAAAC,GAAAD,MAAAE,GAAAF,MAAA+L,MAAA,EAAA1M,SAAAF,KAAA,UAAAI,EAAAyM,IAAA,MAApBgC,EAAoB/B,UAAA,sBAAAoB,OAAA,CAAAiB,YAAA,cAAAR,eAAA,kBAAA5B,MAAA,GAAAC,KAAA,EAAAC,OAAA,0fAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDfjCtM,MAAA,UAAAA,CAA6B,UAA7BA,CAA6B,UAA7BA,CAA6B,WAIrBA,MAAA,aACFA,YAGJA,MAAA,UAAAA,CAAkB,UAAlBA,CAAkB,UAAlBA,CAAkB,SAGTA,MAAA,0BAASuM,EAAAgC,KAAK,GAAiCvO,gBAM1DA,MAAA,EAAA6O,GAAA,aAQA7O,MAAA,WAAAA,CAAqC,WAArCA,CAAqC,cACaA,MAAA,kBAAWA,UAC3DA,MAAA,aACEA,MAAA,GAAA8O,GAAA,cAGF9O,iBAdIA,MAAA,GAAAA,MAAA,OAAAuM,EAAA4B,eAAA5B,EAAAuB,gBAW0B9N,MAAA,GAAAA,MAAA,UAAAuM,EAAA+B,g8UCbnBN,CAAoB,4ECb/BhO,MAAA,QAAAA,CAAwG,WAA0BA,MAAA,GAAmBA,oCAA1FA,MAAA,aAAAA,MAAA,EAAA2N,GAAAoB,EAAA7H,KAAuElH,MAAA,GAAAA,MAAA+O,EAAAjO,iCADpId,MAAA,WACEA,MAAA,EAAAgP,GAAA,WACFhP,8BADyCA,MAAA,GAAAA,MAAA,UAAA0M,EAAAoB,iBCMlC,IAAMmB,GAA6B,MAApC,MAAOA,EAA6B5P,SAAAF,KAAA,mBAAAG,iBAA7B2P,EAA6B,EAAA5P,SAAAF,KAAA,UAAAI,EAAAyM,IAAA,MAA7BiD,EAA6BhD,UAAA,gCAAAoB,OAAA,CAAAS,eAAA,kBAAA5B,MAAA,EAAAC,KAAA,EAAAC,OAAA,sMAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDR1CtM,MAAA,UAAAA,CAA0B,YAA2BA,MAAA,cAAQA,UAC7DA,MAAA,EAAAkP,GAAA,oBAA+BlP,MAAA,GAAAA,MAAA,OAAAuM,EAAAuB,o9LCOlBmB,CAA6B,+BCPxCjP,MAAA,WACEA,MAAA,iCACFA,8BAF2BA,MAAA,iBAAA0M,EAAAyC,iBAAA,IACEnP,MAAA,GAAAA,MAAA,iBAAA0M,EAAAoB,iBCWxB,IAAMsB,GAAwB,MAA/B,MAAOA,EAOTlQ,YACY+O,EACAoB,GADAlQ,KAAA8O,qBACA9O,KAAAkQ,iBARZlQ,KAAAmP,YAAiC,GACjCnP,KAAA2O,eAAoC,GACpC3O,KAAAmQ,eAAgB,EAChBnQ,KAAAgQ,iBAAmB,EACnBhQ,KAAAoQ,wBAA0B,CAKvB,CAEHrC,WACIkB,QAAQC,IAAI,4BACZlP,KAAK8O,mBAAmBjE,UAAUG,UAAW1J,IAIzC,OAHAtB,KAAKmQ,eAAgB,EACrBnQ,KAAKgQ,iBAAmB,EACxBhQ,KAAKoQ,wBAA0B,EACvB9O,GACJ,KAAK+I,EAAYC,GACb,MACJ,KAAKD,EAAYE,GACbvK,KAAKoQ,wBAA0B,EAC/B,MACJ,KAAK/F,EAAYG,GAInB,KAAKH,EAAYI,GACXzK,KAAKmQ,eAAgB,EACrBnQ,KAAKoQ,wBAA0B,EAC/B,MACN,KAAK/F,EAAYK,GACX1K,KAAKmQ,eAAgB,EACrBnQ,KAAKgQ,iBAAmB,EACxBhQ,KAAKoQ,wBAA0B,KAM3CpQ,KAAKkQ,eAAeZ,KAAKtE,UAAWqF,IAChC,MAAMf,EAAOe,EACTf,IACEA,EAAKH,cACPnP,KAAKmP,YAAcG,EAAKH,aAEtBG,EAAKX,iBACP3O,KAAK2O,eAAiBW,EAAKX,kBAIvC,CAACzO,SAAAF,KAAA,mBAAAG,iBApDQ8P,GAAwBpP,MAAAC,GAAAD,MAAAE,MAAA,EAAAb,SAAAF,KAAA,UAAAI,EAAAyM,IAAA,MAAxBoD,EAAwBnD,UAAA,2BAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,+JAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDbrCtM,MAAA,WACEA,MAAA,EAAAyP,GAAA,aAGAzP,MAAA,WACEA,MAAA,uBACFA,iBALMA,MAAA,GAAAA,MAAA,OAAAuM,EAAA+C,eAGDtP,MAAA,GAAAA,MAAA,iBAAAuM,EAAAgD,wBAAA,IACcvP,MAAA,GAAAA,MAAA,cAAAuM,EAAA+B,YAAAtO,CAA2B,iBAAAuM,EAAAuB,g1LCQnCsB,CAAwB,8CCLnCpP,MAAA,OAAAA,CAA2C,OAA3CA,CAA2C,cAE/BA,MAAA,yBAAA0P,EAAA1P,MAAA2P,GAAAC,EAAAF,EAAAG,UAAAC,EAAAJ,EAAAK,MAAAC,EAAAhQ,MAAA,UAASA,MAAAgQ,EAAAC,YAAAL,EAAAE,EAAAF,EAAAM,MAAAhJ,GAAA0I,EAAAO,MAAAjJ,IAAsC,GAEjBlH,MAAA,GAAgBA,UAExDA,MAAA,OAAAA,CAAI,cACMA,MAAA,yBAAA0P,EAAA1P,MAAA2P,GAAAC,EAAAF,EAAAG,UAAAC,EAAAJ,EAAAK,MAAAK,EAAApQ,MAAA,UAASA,MAAAoQ,EAAAC,eAAAT,EAAAE,GAAmB,GACI9P,UAE1CA,MAAA,OAAAA,CAAI,cACMA,MAAA,yBAAA0P,EAAA1P,MAAA2P,GAAAC,EAAAF,EAAAG,UAAAC,EAAAJ,EAAAK,MAAAO,EAAAtQ,MAAA,UAASA,MAAAsQ,EAAAL,YAAAL,EAAAE,EAAAF,EAAAO,MAAAjJ,GAAA0I,EAAAM,MAAAhJ,IAAsC,GAEhBlH,MAAA,GAAgBA,wCAV/CA,MAAA,GAAAA,MAAA,UAAA4P,EAAAM,MAAAhJ,MAAA,MAAA0I,EAAAW,SAAA,KAAAX,EAAAW,SAAAC,MAAA,oBAC8BxQ,MAAA,GAAAA,MAAA4P,EAAAM,MAAApP,MAGAd,MAAA,GAAAA,MAAA,UAAA4P,EAAAW,SAAA,sBAK9BvQ,MAAA,GAAAA,MAAA,UAAA4P,EAAAO,MAAAjJ,MAAA,MAAA0I,EAAAW,SAAA,KAAAX,EAAAW,SAAAC,MAAA,qBAC+BxQ,MAAA,GAAAA,MAAA4P,EAAAO,MAAArP,iCApB7Cd,MAAA,UAAAA,CAA2B,cAEvBA,MAAA,UAAAA,CAAkC,UAAlCA,CAAkC,WAGpCA,QACAA,MAAA,WACAA,MAAA,EAAAyQ,GAAA,YAgBAzQ,gCAhBkBA,MAAA,GAAAA,MAAA,UAAA0M,EAAAC,iDAyBpB3M,MAAA,WAAAA,CAAsD,eAAQA,MAAA,mBAAAA,MAAA0Q,GAAA,MAAAC,EAAA3Q,QAAA,OAASA,MAAA2Q,EAAAC,kBAAiB,GAAE5Q,MAAA,UAAIA,kCAC9FA,MAAA,QAAuBA,MAAA,iBAAWA,kDAClCA,MAAA,eAAQA,MAAA,mBAAAA,MAAA6Q,GAAA,MAAAC,EAAA9Q,QAAA,OAASA,MAAA8Q,EAAAvF,QAAO,GAAqBvL,MAAA,WAAKA,SCrB3C,IAAM+Q,GAAsB,MAA7B,MAAOA,EAOX7R,YACUqL,EACA0C,EACA+D,GAFA7R,KAAAoL,MACApL,KAAA8N,eACA9N,KAAA6R,uBAPV7R,KAAAuP,MAAgB,GAChBvP,KAAAwN,MAAoB,GACpBxN,KAAA8R,YAAa,EAOX7C,QAAQC,IAAI9D,EAAIkE,MACZlE,EAAIkE,KAAKC,QACXvP,KAAKuP,MAAQnE,EAAIkE,KAAKC,OAEpBnE,EAAIkE,KAAKyC,SACX/R,KAAK+R,OAAS3G,EAAIkE,KAAKyC,OAE3B,CAEAC,WACEhS,KAAKyR,iBACP,CAEAQ,YAAYlK,GACNA,IAAO/H,KAAKwN,MAAM0E,OAAS,GAC7BlS,KAAKyR,iBAET,CAEAA,kBACE,MAAMU,EAAgB,GACtBA,EAAIvP,KAAK5C,KAAK+R,QACd/R,KAAKwN,MAAMlB,QAAS8F,GAASD,EAAIvP,KAAKwP,EAAKpB,MAAMjJ,KACjD/H,KAAK8N,aACF5F,2BAA2B,CAC1BH,GAAI/H,KAAK+R,OACT9J,QAASkK,EACTnK,QAAQ,IAETgD,UAAWqH,IACJA,GACJrS,KAAKwN,MAAM5K,KAAKyP,GAChBrS,KAAK8R,YAAa,GAElB9R,KAAK8R,YAAa,EAEpB7C,QAAQC,IAAImD,EAAMrS,KAAKwN,MAAM0E,OAAM,EAEzC,CAEAnE,WACE/N,KAAKyR,iBACP,CAEArF,QACEpM,KAAKoL,IAAIgB,OACX,CAEA0E,YAAYuB,EAAgBC,EAAWjB,EAA0BkB,GAC/D,QAAa/K,IAAT6J,QAA6B7J,IAAP+K,EAAkB,CAC1CtD,QAAQC,IAAI,mBACZ,MAAMkC,EAAW,CACfC,KAAMA,EACNkB,GAAIA,GAENvS,KAAK6R,qBACF9H,+BAA+B,CAC9BF,OAAQwH,EACRvH,KAAMyI,IAEPvH,UAAU,KACTqH,EAAKjB,SAAWA,EAChBpR,KAAKiS,YAAYK,EAAC,GAG1B,CAEApB,eAAemB,EAAgBC,GAC7BrD,QAAQC,IAAI,qBACRmD,EAAKjB,UACPpR,KAAK6R,qBACFzH,gCAAgC,CAC/BF,QAASmI,EAAKjB,SAASC,KACvBlH,QAASkI,EAAKjB,SAASmB,KAExBvH,UAAU,KACTqH,EAAKjB,cAAW5J,EAChBxH,KAAKiS,YAAYK,EAAC,EAG1B,CAACpS,SAAAF,KAAA,mBAAAG,iBA5FUyR,GAAsB/Q,MAAAC,MAAAD,MAAAE,GAAAF,MAAA+L,GAAA,EAAA1M,SAAAF,KAAA,UAAAI,EAAAyM,IAAA,MAAtB+E,EAAsB9E,UAAA,yBAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,wVAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDdnCtM,MAAA,QAAIA,MAAA,GAASA,QACbA,MAAA,EAAA2R,GAAA,eAgCA3R,MAAA,EAAA4R,GAAA,cACA5R,MAAA,EAAA6R,GAAA,YACA7R,MAAA,EAAA8R,GAAA,uBAnCI9R,MAAA,GAAAA,MAAAuM,EAAAmC,OACI1O,MAAA,GAAAA,MAAA,QAAAuM,EAAA0E,YAgCDjR,MAAA,GAAAA,MAAA,QAAAuM,EAAA0E,YACFjR,MAAA,GAAAA,MAAA,OAAAuM,EAAA0E,YACsBjR,MAAA,GAAAA,MAAA,OAAAuM,EAAA0E,go8CCrBdF,CAAsB,KCMtBgB,GAAgB,MAAvB,MAAOA,EAOT7S,YACYqL,EACAC,EACAwH,GAFA7S,KAAAoL,MACApL,KAAAqL,cACArL,KAAA6S,cAPH7S,KAAAuL,KAAkBvL,KAAKqL,YAAYG,MAAM,CAC9C7J,KAAM,CAAC,KAAM8J,KAAWC,YAQvBN,EAAIkE,KAAK7I,eACVzG,KAAKyG,aAAe2E,EAAIkE,KAAK7I,aAEjC,CAEAkF,WAAWC,GAEP,GADA5L,KAAK6L,mBAAmB7L,KAAKuL,OACxBvL,KAAKuL,KAAKO,MAEX,YADAF,EAAMG,OAAOC,OAGjB,MAAM8G,EAAmB9S,KAAKuL,KAAKjK,MACnCwR,EAAWhB,YAAa,EACnB9R,KAAKyG,cACVzG,KAAK6S,YACAzL,uBAAuB,CACpBX,aAAczG,KAAKyG,aACnBrC,KAAM0O,IAET9H,UAAWjD,IACR/H,KAAKuL,KAAKY,QACVnM,KAAKoL,IAAIgB,MAAMrE,EAAE,EAE7B,CAEA8D,mBAAmBN,GACf9I,OAAO6C,OAAwBiG,EAAKc,UAAUC,QACzCC,IACGvM,KAAKwM,0BAA0BD,EAAO,EAGlD,CAEAC,0BAA0BD,GACtBA,EAAQE,gBACRF,EAAQG,cACRH,EAAQI,wBACZ,CAACzM,SAAAF,KAAA,mBAAAG,iBAjDQyS,GAAgB/R,MAAAC,MAAAD,MAAAE,MAAAF,MAAA+L,GAAA,EAAA1M,SAAAF,KAAA,UAAAI,EAAAyM,IAAA,MAAhB+F,EAAgB9F,UAAA,mBAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,uIAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ICpB7BtM,MAAA,UAAAA,CAA0B,YAEtBA,MAAA,aACAA,MAAA,cAAQA,MAAA,iBAAAwM,GAAA,OAASD,EAAAzB,WAAA0B,EAAkB,GAA4BxM,MAAA,SAAGA,mBAF9DA,MAAA,GAAAA,MAAA,YAAAuM,EAAA7B,MAEiC1K,MAAA,GAAAA,MAAA,WAAAuM,EAAA7B,KAAA+B,oRDiB5BsF,CAAgB,8CEZ3B/R,MAAA,OAAAA,CAA2C,OAA3CA,CAA2C,cAE/BA,MAAA,yBAAA0P,EAAA1P,MAAA2P,GAAAC,EAAAF,EAAAG,UAAAC,EAAAJ,EAAAK,MAAAC,EAAAhQ,MAAA,UAASA,MAAAgQ,EAAAC,YAAAL,EAAAE,EAAAF,EAAAM,MAAAhJ,GAAA0I,EAAAO,MAAAjJ,IAAsC,GAEjBlH,MAAA,GAAgBA,UAExDA,MAAA,OAAAA,CAAI,cACMA,MAAA,yBAAA0P,EAAA1P,MAAA2P,GAAAC,EAAAF,EAAAG,UAAAC,EAAAJ,EAAAK,MAAAK,EAAApQ,MAAA,UAASA,MAAAoQ,EAAAC,eAAAT,EAAAE,GAAmB,GACI9P,UAE1CA,MAAA,OAAAA,CAAI,cACMA,MAAA,yBAAA0P,EAAA1P,MAAA2P,GAAAC,EAAAF,EAAAG,UAAAC,EAAAJ,EAAAK,MAAAO,EAAAtQ,MAAA,UAASA,MAAAsQ,EAAAL,YAAAL,EAAAE,EAAAF,EAAAO,MAAAjJ,GAAA0I,EAAAM,MAAAhJ,IAAsC,GAEhBlH,MAAA,GAAgBA,wCAV/CA,MAAA,GAAAA,MAAA,UAAA4P,EAAAM,MAAAhJ,MAAA,MAAA0I,EAAAW,SAAA,KAAAX,EAAAW,SAAAC,MAAA,oBAC8BxQ,MAAA,GAAAA,MAAA4P,EAAAM,MAAApP,MAGAd,MAAA,GAAAA,MAAA,UAAA4P,EAAAW,SAAA,sBAK9BvQ,MAAA,GAAAA,MAAA,UAAA4P,EAAAO,MAAAjJ,MAAA,MAAA0I,EAAAW,SAAA,KAAAX,EAAAW,SAAAC,MAAA,qBAC+BxQ,MAAA,GAAAA,MAAA4P,EAAAO,MAAArP,iCApB7Cd,MAAA,UAAAA,CAA2B,cAEvBA,MAAA,UAAAA,CAAkC,UAAlCA,CAAkC,WAGpCA,QACAA,MAAA,WACAA,MAAA,EAAAkS,GAAA,YAgBAlS,gCAhBkBA,MAAA,GAAAA,MAAA,UAAA0M,EAAAC,iDAyBpB3M,MAAA,WAAAA,CAAsD,eAAQA,MAAA,mBAAAA,MAAA0Q,GAAA,MAAAC,EAAA3Q,QAAA,OAASA,MAAA2Q,EAAAC,kBAAiB,GAAE5Q,MAAA,UAAIA,kCAC9FA,MAAA,QAAuBA,MAAA,iBAAWA,kDAClCA,MAAA,eAAQA,MAAA,mBAAAA,MAAA6Q,GAAA,MAAAC,EAAA9Q,QAAA,OAASA,MAAA8Q,EAAAvF,QAAO,GAAqBvL,MAAA,WAAKA,SCvB3C,IAAMmS,GAA4B,MAAnC,MAAOA,EAOXjT,YACUqL,EACA0C,EACA+D,GAFA7R,KAAAoL,MACApL,KAAA8N,eACA9N,KAAA6R,uBAPV7R,KAAAuP,MAAgB,GAChBvP,KAAAwN,MAAoB,GACpBxN,KAAA8R,YAAa,EAOX7C,QAAQC,IAAI9D,EAAIkE,MACZlE,EAAIkE,KAAKC,QACXvP,KAAKuP,MAAQnE,EAAIkE,KAAKC,OAEpBnE,EAAIkE,KAAK7I,eACXzG,KAAKyG,aAAe2E,EAAIkE,KAAK7I,aAEjC,CAEAuL,WACEhS,KAAKyR,iBACP,CAEAQ,YAAYlK,GACNA,IAAO/H,KAAKwN,MAAM0E,OAAS,GAC7BlS,KAAKyR,iBAET,CAEAA,kBACE,IAAKzR,KAAKyG,aAAc,OACxB,MAAM0L,EAAgB,GACtBnS,KAAKwN,MAAMlB,QAAS8F,GAASD,EAAIvP,KAAKwP,EAAKpB,MAAMjJ,KACjD/H,KAAK8N,aACFlG,sCAAsC,CAACnB,aAAczG,KAAKyG,eAC1DuE,UAAWoH,GACVpS,KAAK8N,aACF5F,2BAA2B,CAC1BH,GAAIqK,EAAKrK,GACTE,QAASkK,EACTnK,QAAQ,IAETgD,UAAWqH,IACJA,GACJrS,KAAKwN,MAAM5K,KAAKyP,GAChBrS,KAAK8R,YAAa,GAElB9R,KAAK8R,YAAa,EAEpB7C,QAAQC,IAAImD,EAAMrS,KAAKwN,MAAM0E,OAAM,GAE7C,CAEAnE,WACE/N,KAAKyR,iBACP,CAEArF,QACEpM,KAAKoL,IAAIgB,OACX,CAEA0E,YAAYuB,EAAgBC,EAAWjB,EAA0BkB,GAC/D,QAAa/K,IAAT6J,QAA6B7J,IAAP+K,EAAkB,CAC1CtD,QAAQC,IAAI,mBACZ,MAAMkC,EAAW,CACfC,KAAMA,EACNkB,GAAIA,GAENvS,KAAK6R,qBACF9H,+BAA+B,CAC9BF,OAAQwH,EACRvH,KAAMyI,IAEPvH,UAAU,KACTqH,EAAKjB,SAAWA,EAChBpR,KAAKiS,YAAYK,EAAC,GAG1B,CAEApB,eAAemB,EAAgBC,GAC7BrD,QAAQC,IAAI,qBACRmD,EAAKjB,UACPpR,KAAK6R,qBACFzH,gCAAgC,CAC/BF,QAASmI,EAAKjB,SAASC,KACvBlH,QAASkI,EAAKjB,SAASmB,KAExBvH,UAAU,KACTqH,EAAKjB,cAAW5J,EAChBxH,KAAKiS,YAAYK,EAAC,EAG1B,CAACpS,SAAAF,KAAA,mBAAAG,iBA/FU6S,GAA4BnS,MAAAC,MAAAD,MAAAE,GAAAF,MAAA+L,GAAA,EAAA1M,SAAAF,KAAA,UAAAI,EAAAyM,IAAA,MAA5BmG,EAA4BlG,UAAA,+BAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,wVAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDZzCtM,MAAA,QAAIA,MAAA,GAASA,QACbA,MAAA,EAAAoS,GAAA,eAgCApS,MAAA,EAAAqS,GAAA,cACArS,MAAA,EAAAsS,GAAA,YACAtS,MAAA,EAAAuS,GAAA,uBAnCIvS,MAAA,GAAAA,MAAAuM,EAAAmC,OACI1O,MAAA,GAAAA,MAAA,QAAAuM,EAAA0E,YAgCDjR,MAAA,GAAAA,MAAA,QAAAuM,EAAA0E,YACFjR,MAAA,GAAAA,MAAA,OAAAuM,EAAA0E,YACsBjR,MAAA,GAAAA,MAAA,OAAAuM,EAAA0E,go8CCvBdkB,CAA4B,8CCAnCnS,MAAA,UAAGA,MAAA,mBAAAA,MAAAwS,GAAA,MAAA1F,EAAA9M,QAAA,OAASA,MAAA8M,EAAA2F,YAAW,GAA+FzS,kDACtHA,MAAA,UAAGA,MAAA,mBAAAA,MAAA0S,GAAA,MAAAC,EAAA3S,QAAA,OAASA,MAAA2S,EAAAC,iBAAgB,GAAiG5S,kDAU3HA,MAAA,UAAGA,MAAA,mBAAAA,MAAA6S,GAAA,MAAAC,EAAA9S,QAAA6P,UAAAO,EAAApQ,QAAA,OAASA,MAAAoQ,EAAA2C,cAAAD,EAAA5L,IAAuB,GAAsDlH,kDAD3FA,MAAA,QAA+BA,MAAA,GAC7BA,MAAA,EAAAgT,GAAA,YACAhT,MAAA,UAAGA,MAAA,yBAAA8S,EAAA9S,MAAAiT,GAAApD,UAAAqD,EAAAlT,QAAA,OAASA,MAAAkT,EAAAC,WAAAL,EAAA5L,IAAmB,GAAqBlH,sCAFvBA,MAAA,GAAAA,MAAA,GAAA8S,EAAAhS,KAAA,KACSd,MAAA,GAAAA,MAAA,QAAA8S,EAAA7B,6CCJvC,IAAMmC,GAAuB,MAA9B,MAAOA,EAKXlU,YACU+O,EACAoB,EACA2C,EACA9D,EACAzD,GAJAtL,KAAA8O,qBACA9O,KAAAkQ,iBACAlQ,KAAA6S,cACA7S,KAAA+O,gBACA/O,KAAAsL,qBATVtL,KAAAwN,MAAqB,GACrBxN,KAAA8R,WAAqB,CAUrB,CAEA,aAAIoC,GACF,OAAOhP,KAAKC,UAAUnF,KAAKwN,MAC7B,CAEAO,WACE/N,KAAKkQ,eAAeZ,KAAKtE,UAAWqF,IAClC,MAAMf,EAAOe,EAITf,GAAQA,EAAK9B,QACfxN,KAAKwN,MAAQ8B,EAAK9B,MAAMA,MACxBxN,KAAK8R,WAAaxC,EAAK9B,MAAMsE,WAC7B9R,KAAKgO,WAAasB,EAAKtB,WACvBhO,KAAKsL,mBAAmB7B,oCAAoC,CAAChD,aAAczG,KAAKgO,WAAWjG,KAAMiD,UAAU,IAAMiE,QAAQC,IAAI,YAAU,EAG7I,CAEA0E,cAAc7L,GACZ/H,KAAK+O,cACFM,KAAKuC,GAAwB,CAE5BtC,KAAM,CACJC,MAAO,YACPwC,OAAQhK,KAGXyH,aAAaxE,UAAU,IACxBhL,KAAKmU,SACT,CAEAC,sBACEpU,KAAK+O,cACFM,KAAK2D,GAA8B,CAElC1D,KAAM,CACJC,MAAO,YACP9I,aAAczG,KAAKgO,WAAWjG,MAGjCyH,aAAaxE,UAAU,IACxBhL,KAAKmU,SACT,CAEAH,WAAWjC,GACJA,GAGL/R,KAAK6S,YACFpL,wCAAwC,CAACF,iBAAkBwK,IAC3D/G,UAAU,IAAMhL,KAAKmU,SAE1B,CAEAb,YACEtT,KAAKsL,mBACFnC,uCAAuC,CAAC1C,aAAczG,KAAKgO,WAAWjG,KACtEiD,UAAU,IAAMhL,KAAKgO,WAAW9B,WAAY,EACjD,CAEAmI,UACErU,KAAK+O,cACFM,KAAKuD,GAAkB,CAEtBtD,KAAM,CACJC,MAAO,WACP9I,aAAczG,KAAKgO,WAAWjG,MAGjCyH,aAAaxE,UAAWjD,IAA6BA,GAAI/H,KAAK4T,cAAc7L,EAAE,EACnF,CAEA0L,iBACEzT,KAAKsL,mBACFhC,4CAA4C,CAAC7C,aAAczG,KAAKgO,WAAWjG,KAC3EiD,UAAU,IAAMhL,KAAKgO,WAAW9B,WAAY,EACjD,CAEQiI,SACN,OAAOnU,KAAK6S,YAAY9L,wBAAwB,CAC9CN,aAAczG,KAAKgO,WAAWjG,KAC7BiD,UAAWwC,IACZxN,KAAKwN,MAAQA,EAAMA,MACnBxN,KAAK8R,WAAatE,EAAMsE,YAE5B,CAAC5R,SAAAF,KAAA,mBAAAG,iBApGU8T,GAAuBpT,MAAAC,GAAAD,MAAAE,MAAAF,MAAA+L,GAAA/L,MAAAyT,MAAAzT,MAAA0T,GAAA,EAAArU,SAAAF,KAAA,UAAAI,EAAAyM,IAAA,MAAvBoH,EAAuBnH,UAAA,0BAAAC,MAAA,GAAAC,KAAA,GAAAC,OAAA,orBAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDnBpCtM,MAAA,UAAAA,CAAqB,YACQA,MAAA,SAA4CA,QACvEA,MAAA,YAA2BA,MAAA,GAAmBA,UAGhDA,MAAA,UAAAA,CAAkB,UAAlBA,CAAkB,UAAlBA,CAAkB,SAGTA,MAAA,0BAASuM,EAAAiH,SAAS,GAAgDxT,QACrEA,MAAA,SACyCA,MAAA,0BAASuM,EAAAgH,qBAAqB,uBACvEvT,QACAA,MAAA,GAAA2T,GAAA,WACA3T,MAAA,GAAA4T,GAAA,WACF5T,YAKJA,MAAA,YAAAA,CAAuB,WAAvBA,CAAuB,SAGjBA,MAAA,GAAA6T,GAAA,aAIF7T,mBAzB4BA,MAAA,GAAAA,MAAA,aAAAA,MAAA,GAAA2N,KACH3N,MAAA,GAAAA,MAAAuM,EAAAY,WAAArM,MAOpBd,MAAA,GAAAA,MAAA,YAAAuM,EAAA0E,WAAA,4BAAA1E,EAAA0E,WAAA,qDAAAjR,CAAuH,QAAAA,MAAA,KAAAuM,EAAA0E,WAAA,QAGhGjR,MAAA,GAAAA,MAAA,QAAAuM,EAAAY,WAAA9B,WACKrL,MAAA,GAAAA,MAAA,OAAAuM,EAAAY,WAAA9B,WASVrL,MAAA,GAAAA,MAAA,UAAAuM,EAAAI,k8sBCHdyG,CAAuB,mBCI9B,SAAUU,EACZhT,EACAiT,GAGA,OADcA,EAAMrR,OAAO5B,KAIvBiT,EAAMC,OACCF,EAAUhT,EAAMiT,EAAMC,QAE1B,KACX,CCZM,SAAUF,EACZhT,EACAiT,GAGA,OADcA,EAAMrR,OAAO5B,KAIvBiT,EAAMC,OACCF,EAAUhT,EAAMiT,EAAMC,QAE1B,KACX,CCzBA,MAAMC,GAAiB,CACnB,CACI7R,KAAM,GACN8R,UAAW9E,GACX+E,QAAS,CAAE7F,YCPfyF,MAEOK,OACH9M,GACFI,gDDG+CoG,eEPjDiG,MAEOK,OACH9M,GACFU,0DFKF,CACI5F,KAAM,2BACN8R,UAAWd,GACXe,QAAS,CACLxH,MFbRoH,IAEA,MAAMM,EAAmCP,EAaH,eAXlCC,GAEJ,IAAKM,EACD,OAAOC,IAEX,MAAM1O,GAAwByO,EAC9B,SAAOD,OAAO5O,GAAcU,wBAAwB,CAChDN,aAAcA,GACjB,EEEOuH,WDdR4G,IAEA,MAAMM,EAAmCP,EAaH,eAXlCC,GAEJ,IAAKM,EACD,OAAOC,IAEX,MAAM1O,GAAwByO,EAC9B,SAAOD,OAAO9M,GAAoBa,kCAAkC,CAChEvC,aAAcA,GACjB,ICKH,CACExD,KAAM,OACN8R,UGnB0B,MAAxB,MAAOK,EALbrV,cAMEC,KAAAqV,IAAc,EAEdC,OAAOC,GACLvV,KAAKqV,IAAME,CACb,CAACrV,SAAAF,KAAA,mBAAAG,iBALUiV,EAAiB,EAAAlV,SAAAF,KAAA,UAAAI,EAAAyM,IAAA,MAAjBuI,EAAiBtI,UAAA,oBAAAC,MAAA,EAAAC,KAAA,EAAAE,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ICP9BtM,MAAA,OAAGA,MAAA,sBAAgBA,mBDONuU,CAAiB,OH2BvB,IAAMI,GAAgB,MAAvB,MAAOA,EAAgBtV,SAAAF,KAAA,mBAAAG,iBAAhBqV,EAAgB,EAAAtV,SAAAF,KAAA,UAAAI,EAAAqV,IAAA,MAAhBD,IAAgBtV,SAAAF,KAAA,UAAAI,EAAAsV,IAAA,UAHfC,KAAaC,QAAQd,IACrBa,eAEDH,CAAgB,kDKzBtB,IAAMK,EAAe,MAAtB,MAAOA,EAGT9V,YACY+V,GAAA9V,KAAA8V,SAER9V,KAAK8V,OAAOC,UAAU/K,UAAWgL,IAC7BhW,KAAKiW,SAASD,EAAI,EAE1B,CAEQC,SAASD,GACTA,GACAhW,KAAKkW,SAAWF,EAChBG,aAAaC,QAAQ,YAAalR,KAAKC,UAAUnF,KAAKkW,YAEtDC,aAAaC,QAAQ,YAAa,OAE1C,CAEA,cAAIC,GACA,MAAMC,EAAaH,aAAaI,QAAQ,aAClCP,EAAO9Q,KAAKsR,MAAMF,GAA0B,QAClD,OAAgB,OAATN,IAAwC,IAAvBA,EAAKS,aACjC,CAEAC,aACI,OAAO1W,KAAK2W,UAAU,IAAIC,OAAsBC,KAAMC,MAK1D,CAEMC,WAAQ,IAAAC,EAAAhX,KAAA,SAAAiX,KAAA,YAEV,aADW,EAASC,MAAeF,EAAKlB,OAAOqB,QAClC,EAFH,EAGd,CAEAR,UAAUS,GACN,OAAOpX,KAAK8V,OACPuB,gBAAgBD,GAChBP,KAAMxT,IAIH,MAAM2S,EAAOhW,KAAKsX,YAAYjU,EAAO2S,MACrChW,KAAKiW,SAASD,GACduB,SAASpD,QAAM,GAElBqD,MAAOC,IACJC,OAAOC,MAAMF,EAAK,EAE9B,CAKAH,YAAYtB,GAWR,MAPuB,CACnB4B,IAAK5B,EAAK4B,IACVC,MAAO7B,EAAK6B,MACZC,YAAa9B,EAAK8B,YAClBC,SAAU/B,EAAK+B,SACftB,cAAeT,EAAKS,cAM5B,CAGAuB,UACI,OAAOhY,KAAK8V,OAAOmC,UAAUpB,KAAK,KAC9BV,aAAa+B,WAAW,aACxBX,SAASpD,QAAM,EAEvB,CAACjU,SAAAF,KAAA,mBAAAG,iBAjFQ0V,GAAehV,MAAAC,OAAA,EAAAZ,SAAAF,KAAA,WAAAI,EAAAC,IAAA,OAAfwV,EAAevV,QAAfuV,EAAetV,UAAAC,WAFZ,gBAEHqV,CAAe,KCIfsC,GAAgB,MAAvB,MAAOA,EACTpY,YACYqL,EACAgN,GADApY,KAAAoL,MACApL,KAAAoY,iBACT,CAEH,YAAIC,GACA,OAAOrY,KAAKoY,gBAAgBlC,SAAS4B,WACzC,CAEA,YAAIC,GACA,OAAO/X,KAAKoY,gBAAgBlC,SAAS6B,QACzC,CAEAO,SACItY,KAAKoY,gBAAgBJ,UACrBhY,KAAKoL,IAAIgB,OACb,CAAClM,SAAAF,KAAA,mBAAAG,iBAjBQgY,GAAgBtX,MAAAC,MAAAD,MAAAE,GAAA,EAAAb,SAAAF,KAAA,UAAAI,EAAAyM,IAAA,MAAhBsL,EAAgBrL,UAAA,kBAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,uJAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ICb7BtM,MAAA,UAAAA,CAA8B,WAE1BA,MAAA,UAAAA,CAAkD,WAEpDA,UAEFA,MAAA,QAAIA,MAAA,GACJA,QACAA,MAAA,cAAQA,MAAA,0BAASuM,EAAAkL,QAAQ,GAA6BzX,MAAA,YAAMA,eANnDA,MAAA,GAAAA,MAAA,MAAAuM,EAAA2K,SAAAlX,OAILA,MAAA,GAAAA,MAAA,gBAAAuM,EAAAiL,SAAA,yiBDOSF,CAAgB,8CEZ7BtX,MAAA,SAAGA,MAAA,mBAAAA,MAAA0X,GAAA,MAAA7K,EAAA7M,QAAA,OAASA,MAAA6M,EAAA8K,UAAS,GAAiC3X,kDACtDA,MAAA,cAAQA,MAAA,mBAAAA,MAAA4X,GAAA,MAAA7K,EAAA/M,QAAA,OAASA,MAAA+M,EAAA8I,aAAY,GAA+C7V,MAAA,WAAKA,SCQ1E,IAAM6X,GAAc,MAArB,MAAOA,EACT3Y,YACYqY,EACArJ,GADA/O,KAAAoY,kBACApY,KAAA+O,eACT,CAEH,YAAI4J,GACA,OAAO3Y,KAAKoY,gBAAgB/B,UAChC,CAEA,YAAIgC,GACA,MAAM1W,EAAO3B,KAAKoY,iBAAiBlC,UAAU4B,YAC7C,OAAOnW,GAAc,WACzB,CAEAiX,QACI5Y,KAAK0W,YACT,CAEAA,aACI1W,KAAKoY,gBAAgB1B,YACzB,CAEA8B,UACIxY,KAAK+O,cAAcM,KAAK8I,GAAkB,CAEtC7I,KAAM,CACFC,MAAO,cAGnB,CAACrP,SAAAF,KAAA,mBAAAG,iBA9BQuY,GAAc7X,MAAAC,GAAAD,MAAAE,MAAA,EAAAb,SAAAF,KAAA,UAAAI,EAAAyM,IAAA,MAAd6L,EAAc5L,UAAA,gBAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,sKAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,IDV3BtM,MAAA,YACAA,MAAA,EAAAgY,GAAA,WACAhY,MAAA,EAAAiY,GAAA,gBACAjY,eAFwBA,MAAA,GAAAA,MAAA,OAAAuM,EAAAuL,UACQ9X,MAAA,GAAAA,MAAA,QAAAuM,EAAAuL,kgOCQnBD,CAAc,KCDdK,GAAY,MAAnB,MAAOA,EAIThZ,cAAe,CAEfgO,WACI,CACH7N,SAAAF,KAAA,mBAAAG,iBARQ4Y,EAAY,EAAA7Y,SAAAF,KAAA,UAAAI,EAAAyM,IAAA,MAAZkM,EAAYjM,UAAA,eAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,4EAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ICTzBtM,MAAA,WACEA,MAAA,iBACFA,QACAA,MAAA,UAAAA,CAAuB,WAEnBA,MAAA,mBAiBFA,4vNDbWkY,CAAY,KEeZC,GAAS,MAAhB,MAAOA,EACX,cAAOpD,CAAQrS,GACb,MAAO,CACL0V,SAAUD,EACVE,UAAW,CACT,CACEC,QAASrZ,EACTsZ,SAAU7V,IAIlB,CAEAxD,YAC0BsZ,EACZ1Y,GAEZ,GAAI0Y,EACF,MAAM,IAAIC,MAAM,oEAElB,IAAK3Y,EACH,MAAM,IAAI2Y,MAAM,wHAGpB,CAACpZ,SAAAF,KAAA,mBAAAG,iBAxBU6Y,GAASnY,MAAAmY,EAAA,IAAAnY,MAAAC,KAAA,KAAAZ,SAAAF,KAAA,UAAAI,EAAAqV,IAAA,MAATuD,IAAS9Y,SAAAF,KAAA,UAAAI,EAAAsV,IAAA,WAPT,CACTrP,EACA8B,EACAuB,EACA5J,YAGSkZ,CAAS,2DCXf,IAAMO,GAAuB,MAA9B,MAAOA,EACTxZ,YAAoBqY,GAAApY,KAAAoY,iBAAmC,CAEvDoB,UACIC,EACAvO,GAEA,SAAOmG,MAAKrR,KAAK0Z,OAAOD,EAAKvO,GACjC,CAEMwO,OAAOD,EAAuBvO,GAAiB,IAAA8L,EAAAhX,KAAA,SAAAiX,KAAA,YACjD,MAAM0C,QAAc3C,EAAKoB,gBAAgBrB,WACzC,IAAK4C,EACD,eAAaC,KAAc1O,EAAKwO,OAAOD,IAE3C,MAAMI,EAAOJ,EAAIvS,MAAM,CACnBzD,QAASgW,EAAIhW,QAAQQ,IAAI,gBAAiB,UAAU0V,OAExD,eAAaC,KAAc1O,EAAKwO,OAAOG,GAAO,EARG,EASrD,CAAC3Z,SAAAF,KAAA,mBAAAG,iBAnBQoZ,GAAuB1Y,MAAAC,GAAA,EAAAZ,SAAAF,KAAA,WAAAI,EAAAC,IAAA,OAAvBkZ,EAAuBjZ,QAAvBiZ,EAAuBhZ,UAAAC,WAFpB,gBAEH+Y,CAAuB,oBCoE7B,IAAMO,GAAS,MAAhB,MAAOA,EAAS5Z,SAAAF,KAAA,mBAAAG,iBAAT2Z,EAAS,EAAA5Z,SAAAF,KAAA,UAAAI,EAAAqV,IAAA,MAATqE,EAASC,UAAA,CAFNhB,MAAY7Y,SAAAF,KAAA,UAAAI,EAAAsV,IAAA,WAVb,CACPG,EACA,CACIsD,QAASa,KACTC,SAAUV,GACVW,OAAO,GAEXC,KACAC,MACHC,QAAA,CAxBGC,KACAC,KACAC,KAAoBC,WAAW,CAC3BC,6BAA8B,WAElC1B,GAAUpD,QAAQ,CAAE3V,QAASX,uBAC7BkW,GACAmF,MAAkBC,cAActb,aAAoB,EACpDub,MAAmB,KACf5L,QAAQC,IAAI,2BAA4B5P,aAAoB,EACrDsb,MAActb,eACxB,EACDwb,MAAiB,OAAMC,UAAc,EACrCC,MAAY,OAAMC,mBAcbnB,CAAS,KC7EtBoB,OACKC,gBAAgBrB,IAChBtC,MAAO4D,GAAQnM,QAAQwI,MAAM2D","names":["environment","projectId","appId","storageBucket","apiKey","authDomain","messagingSenderId","measurementId","ApiConfiguration","constructor","this","rootUrl","static","t","core","Yz7","factory","ɵfac","providedIn","BaseService","config","http","_rootUrl","i0","i1","i2","ParameterCodecInstance","ParameterCodec","encodeKey","key","encodeURIComponent","encodeValue","value","decodeKey","decodeURIComponent","decodeValue","Parameter","name","options","defaultStyle","defaultExplode","style","explode","serializeValue","separator","Array","map","v","split","join","array","Object","keys","propVal","push","String","PathParameter","super","append","path","prefix","alreadySerialized","replace","result","QueryParameter","params","HeaderParameter","headers","RequestBuilder","operationPath","method","_path","Map","_query","_header","set","query","header","body","contentType","_bodyContentType","Blob","type","pairs","val","formValue","formDataValue","_bodyContent","p","formData","FormData","toAppend","JSON","stringify","build","pathParam","values","url","httpParams","HttpParams","encoder","queryParam","httpHeaders","HttpHeaders","accept","headerParam","HttpRequest","toUpperCase","responseType","reportProgress","context","ItemsService","ItemsControllerGetItemsPath","itemsControllerGetItems$Response","rb","collectionId","request","pipe","filter","r","HttpResponse","itemsControllerGetItems","ItemsControllerAddItemPath","itemsControllerAddItem$Response","clone","parseFloat","itemsControllerAddItem","ItemsControllerDeleteItemFromCollectionPath","itemsControllerDeleteItemFromCollection$Response","collectionItemId","undefined","itemsControllerDeleteItemFromCollection","ItemsControllerGetLeastCalibratedItemPath","itemsControllerGetLeastCalibratedItem$Response","itemsControllerGetLeastCalibratedItem","ItemsControllerGetBestPairPath","itemsControllerGetBestPair$Response","id","strict","exclude","itemsControllerGetBestPair","CollectionsService","CollectionControllerGetCurrentUserCollectionsPath","collectionControllerGetCurrentUserCollections$Response","nameFilter","collectionControllerGetCurrentUserCollections","CollectionControllerAddCollectionPath","collectionControllerAddCollection$Response","collectionControllerAddCollection","CollectionControllerGetCurrentUserFavoriteCollectionsPath","collectionControllerGetCurrentUserFavoriteCollections$Response","collectionControllerGetCurrentUserFavoriteCollections","CollectionControllerGetCollectionPath","collectionControllerGetCollection$Response","collectionControllerGetCollection","CollectionControllerAddCollectionToFavPath","collectionControllerAddCollectionToFav$Response","collectionControllerAddCollectionToFav","CollectionControllerRemoveCollectionFromFavPath","collectionControllerRemoveCollectionFromFav$Response","collectionControllerRemoveCollectionFromFav","CollectionControllerVisitCollectionPath","collectionControllerVisitCollection$Response","collectionControllerVisitCollection","ItemsRelationService","ItemRelationsControllerAddItemPath","itemRelationsControllerAddItem$Response","fromId","toId","itemRelationsControllerAddItem","ItemRelationsControllerGetItemsPath","itemRelationsControllerGetItems$Response","itemAId","itemBId","itemRelationsControllerGetItems","BreakPoints","xs","sm","md","lg","xl","BreakpointsService","responsive","observe","Observable","observer","subscribe","matches","next","AddCollectionComponent","ref","formBuilder","collectionsService","form","group","Validators","required","addNewItem","event","updateFormValidity","valid","target","blur","newCollection","favourite","reset","close","controls","forEach","control","updateFormControlValidity","markAsTouched","markAsDirty","updateValueAndValidity","i3","Xpm","selectors","decls","vars","consts","template","rf","ctx","$event","invalid","ctx_r0","items","ctx_r1","ctx_r2","ctx_r3","ctx_r4","CollectionCardComponent","itemsService","ngOnInit","collection","slice","inputs","CollectionCardComponent_span_8_Template","CollectionCardComponent_span_10_Template","CollectionCardComponent_span_12_Template","CollectionCardComponent_span_14_Template","CollectionCardComponent_span_16_Template","_c0","collection_r3","CollectionsComponent_div_9_a_5_Template","favCollections","collection_r4","CollectionsComponent","breakpointsService","dialogService","showFavourite","console","log","collections","add","open","data","title","afterClosed$","getCollections","CollectionsComponent_div_9_Template","CollectionsComponent_div_15_Template","collection_r2","CollectionsSidepanelComponent_div_3_a_1_Template","CollectionsSidepanelComponent","CollectionsSidepanelComponent_div_3_Template","sidePanelColumns","CollectionsPageComponent","activatedRoute","showSidePanel","collectionsPanelColumns","routeData","CollectionsPageComponent_div_1_Template","restoredCtx","_r8","p_r5","$implicit","i_r6","index","ctx_r7","addRelation","item1","item2","ctx_r9","deleteRelation","ctx_r10","relation","from","CalibrateItemComponent_table_2_tr_6_Template","_r12","ctx_r11","getNextBestPair","_r14","ctx_r13","CalibrateItemComponent","itemsRelationService","calibrated","itemId","getPairs","itemPressed","length","ids","item","pair","i","to","CalibrateItemComponent_table_2_Template","CalibrateItemComponent_span_3_Template","CalibrateItemComponent_h3_4_Template","CalibrateItemComponent_button_5_Template","AddItemComponent","itemService","itemEntity","CalibrateCollectionComponent_table_2_tr_6_Template","CalibrateCollectionComponent","CalibrateCollectionComponent_table_2_Template","CalibrateCollectionComponent_span_3_Template","CalibrateCollectionComponent_h3_4_Template","CalibrateCollectionComponent_button_5_Template","_r4","addToFavs","_r6","ctx_r5","removeFromFavs","_r11","item_r7","calibrateItem","CollectionPageComponent_li_16_a_2_Template","_r13","ctx_r12","deleteItem","CollectionPageComponent","itemsjson","reload","calibrateCollection","addItem","i4","i5","CollectionPageComponent_a_11_Template","CollectionPageComponent_a_12_Template","CollectionPageComponent_li_16_Template","findParam","route","parent","routes","component","resolve","inject","collectionIdParam","EMPTY","TestPageComponent","idx","select","number","AppRoutingModule","oAB","cJS","RouterModule","forRoot","FireAuthService","afAuth","authState","user","saveUser","userData","localStorage","setItem","isLoggedIn","userString","getItem","parse","emailVerified","GoogleAuth","AuthLogin","GoogleAuthProvider","then","res","getToken","_this","_asyncToGenerator","firstValueFrom","idToken","provider","signInWithPopup","SetUserData","location","catch","error","window","alert","uid","email","displayName","photoURL","SignOut","signOut","removeItem","ProfileComponent","fireAuthService","userName","logOut","_r3","profile","_r5","LoginComponent","loggedIn","login","LoginComponent_a_1_Template","LoginComponent_button_2_Template","AppComponent","ApiModule","ngModule","providers","provide","useValue","parentModule","Error","FirebaseAuthInterceptor","intercept","req","handle","token","lastValueFrom","req1","AppModule","bootstrap","HTTP_INTERCEPTORS","useClass","multi","ScreenTrackingService","UserTrackingService","imports","BrowserModule","HttpClientModule","ReactiveFormsModule","withConfig","warnOnNgModelWithFormControl","AngularFireModule","initializeApp","provideFirebaseApp","provideAnalytics","getAnalytics","provideAuth","getAuth","__NgCli_bootstrap_1","bootstrapModule","err"],"sourceRoot":"webpack:///","sources":["./src/environments/environment.prod.ts","./src/app/api/api-configuration.ts","./src/app/api/base-service.ts","./src/app/api/request-builder.ts","./src/app/api/services/items.service.ts","./src/app/api/services/collections.service.ts","./src/app/api/services/items-relation.service.ts","./src/app/services/breakpoints.service.ts","./src/app/components/add-collection/add-collection.component.ts","./src/app/components/add-collection/add-collection.component.html","./src/app/components/collections/collection-card/collection-card.component.html","./src/app/components/collections/collection-card/collection-card.component.ts","./src/app/components/collections/collections/collections.component.html","./src/app/components/collections/collections/collections.component.ts","./src/app/components/collections/collections-sidepanel/collections-sidepanel.component.html","./src/app/components/collections/collections-sidepanel/collections-sidepanel.component.ts","./src/app/pages/collections-page/collections-page.component.html","./src/app/pages/collections-page/collections-page.component.ts","./src/app/components/calibrate-item/calibrate-item.component.html","./src/app/components/calibrate-item/calibrate-item.component.ts","./src/app/components/add-item/add-item.component.ts","./src/app/components/add-item/add-item.component.html","./src/app/components/calibrate-collection/calibrate-collection.component.html","./src/app/components/calibrate-collection/calibrate-collection.component.ts","./src/app/pages/collection-page/collection-page.component.html","./src/app/pages/collection-page/collection-page.component.ts","./src/app/resolvers/collection-items.resolver.ts","./src/app/resolvers/collection.resolver.ts","./src/app/app-routing.module.ts","./src/app/resolvers/collections.resolver.ts","./src/app/resolvers/favCollections.resolver.ts","./src/app/pages/test-page/test-page.component.ts","./src/app/pages/test-page/test-page.component.html","./src/app/services/fire-auth.service.ts","./src/app/components/profile/profile.component.ts","./src/app/components/profile/profile.component.html","./src/app/components/login/login.component.html","./src/app/components/login/login.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/api/api.module.ts","./src/app/interceptors/firebase-auth.interceptor.ts","./src/app/app.module.ts","./src/main.ts"],"sourcesContent":["import { ApplicationEnvironment } from './application-environment';\n\nexport const environment: ApplicationEnvironment = {\n    firebase: {\n        projectId: 'queuest-cb885',\n        appId: '1:936633637141:web:9cc171d2c3bf1f5a5bb11c',\n        storageBucket: 'queuest-cb885.appspot.com',\n        apiKey: 'AIzaSyDPU4uUi8KAm_2VC1kZg7oIlPpQJvV7MQY',\n        authDomain: 'queuest-cb885.firebaseapp.com',\n        messagingSenderId: '936633637141',\n        measurementId: 'G-P8DPMCNH7X',\n    },\n    production: true,\n    application: {\n        apiUrl: 'https://api.queuest.c7d5a6.com',\n    },\n};\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { CollectionWithItems } from '../models/collection-with-items';\nimport { Item } from '../models/item';\nimport { ItemPair } from '../models/item-pair';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ItemsService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation itemsControllerGetItems\n   */\n  static readonly ItemsControllerGetItemsPath = '/collections/{collectionId}/items';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerGetItems()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetItems$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<CollectionWithItems>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerGetItemsPath, 'get');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<CollectionWithItems>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerGetItems$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetItems(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<CollectionWithItems> {\n\n    return this.itemsControllerGetItems$Response(params,context).pipe(\n      map((r: StrictHttpResponse<CollectionWithItems>) => r.body as CollectionWithItems)\n    );\n  }\n\n  /**\n   * Path part for operation itemsControllerAddItem\n   */\n  static readonly ItemsControllerAddItemPath = '/collections/{collectionId}/items';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerAddItem()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  itemsControllerAddItem$Response(params: {\n    collectionId: number;\n    body: Item\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<number>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerAddItemPath, 'post');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: parseFloat(String((r as HttpResponse<any>).body)) }) as StrictHttpResponse<number>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerAddItem$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  itemsControllerAddItem(params: {\n    collectionId: number;\n    body: Item\n  },\n  context?: HttpContext\n\n): Observable<number> {\n\n    return this.itemsControllerAddItem$Response(params,context).pipe(\n      map((r: StrictHttpResponse<number>) => r.body as number)\n    );\n  }\n\n  /**\n   * Path part for operation itemsControllerDeleteItemFromCollection\n   */\n  static readonly ItemsControllerDeleteItemFromCollectionPath = '/collections/{collectionId}/items/{collectionItemId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerDeleteItemFromCollection()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerDeleteItemFromCollection$Response(params: {\n    collectionItemId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerDeleteItemFromCollectionPath, 'delete');\n    if (params) {\n      rb.path('collectionItemId', params.collectionItemId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerDeleteItemFromCollection$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerDeleteItemFromCollection(params: {\n    collectionItemId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.itemsControllerDeleteItemFromCollection$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation itemsControllerGetLeastCalibratedItem\n   */\n  static readonly ItemsControllerGetLeastCalibratedItemPath = '/collections/{collectionId}/items/least-calibrated';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerGetLeastCalibratedItem()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetLeastCalibratedItem$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Item>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerGetLeastCalibratedItemPath, 'get');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Item>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerGetLeastCalibratedItem$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetLeastCalibratedItem(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<Item> {\n\n    return this.itemsControllerGetLeastCalibratedItem$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Item>) => r.body as Item)\n    );\n  }\n\n  /**\n   * Path part for operation itemsControllerGetBestPair\n   */\n  static readonly ItemsControllerGetBestPairPath = '/collections/{collectionId}/items/{id}/bestpair/{strict}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerGetBestPair()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetBestPair$Response(params: {\n    id: number;\n    strict: boolean;\n    exclude?: Array<number>;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<ItemPair>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerGetBestPairPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n      rb.path('strict', params.strict, {});\n      rb.query('exclude', params.exclude, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ItemPair>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerGetBestPair$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetBestPair(params: {\n    id: number;\n    strict: boolean;\n    exclude?: Array<number>;\n  },\n  context?: HttpContext\n\n): Observable<ItemPair> {\n\n    return this.itemsControllerGetBestPair$Response(params,context).pipe(\n      map((r: StrictHttpResponse<ItemPair>) => r.body as ItemPair)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Collection } from '../models/collection';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CollectionsService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation collectionControllerGetCurrentUserCollections\n   */\n  static readonly CollectionControllerGetCurrentUserCollectionsPath = '/collections';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerGetCurrentUserCollections()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserCollections$Response(params?: {\n    nameFilter?: string;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Collection>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerGetCurrentUserCollectionsPath, 'get');\n    if (params) {\n      rb.query('nameFilter', params.nameFilter, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Collection>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerGetCurrentUserCollections$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserCollections(params?: {\n    nameFilter?: string;\n  },\n  context?: HttpContext\n\n): Observable<Array<Collection>> {\n\n    return this.collectionControllerGetCurrentUserCollections$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Collection>>) => r.body as Array<Collection>)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerAddCollection\n   */\n  static readonly CollectionControllerAddCollectionPath = '/collections';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerAddCollection()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  collectionControllerAddCollection$Response(params: {\n    body: Collection\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerAddCollectionPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerAddCollection$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  collectionControllerAddCollection(params: {\n    body: Collection\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.collectionControllerAddCollection$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerGetCurrentUserFavoriteCollections\n   */\n  static readonly CollectionControllerGetCurrentUserFavoriteCollectionsPath = '/collections/fav';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerGetCurrentUserFavoriteCollections()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserFavoriteCollections$Response(params?: {\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Collection>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerGetCurrentUserFavoriteCollectionsPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Collection>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerGetCurrentUserFavoriteCollections$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserFavoriteCollections(params?: {\n  },\n  context?: HttpContext\n\n): Observable<Array<Collection>> {\n\n    return this.collectionControllerGetCurrentUserFavoriteCollections$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Collection>>) => r.body as Array<Collection>)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerGetCollection\n   */\n  static readonly CollectionControllerGetCollectionPath = '/collections/{collectionId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerGetCollection()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCollection$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Collection>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerGetCollectionPath, 'get');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Collection>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerGetCollection$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCollection(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<Collection> {\n\n    return this.collectionControllerGetCollection$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Collection>) => r.body as Collection)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerAddCollectionToFav\n   */\n  static readonly CollectionControllerAddCollectionToFavPath = '/collections/fav/{collectionId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerAddCollectionToFav()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerAddCollectionToFav$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerAddCollectionToFavPath, 'post');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerAddCollectionToFav$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerAddCollectionToFav(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.collectionControllerAddCollectionToFav$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerRemoveCollectionFromFav\n   */\n  static readonly CollectionControllerRemoveCollectionFromFavPath = '/collections/fav/{collectionId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerRemoveCollectionFromFav()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerRemoveCollectionFromFav$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerRemoveCollectionFromFavPath, 'delete');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerRemoveCollectionFromFav$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerRemoveCollectionFromFav(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.collectionControllerRemoveCollectionFromFav$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerVisitCollection\n   */\n  static readonly CollectionControllerVisitCollectionPath = '/collections/visit/{collectionId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerVisitCollection()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerVisitCollection$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerVisitCollectionPath, 'post');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerVisitCollection$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerVisitCollection(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.collectionControllerVisitCollection$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ItemsRelationService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation itemRelationsControllerAddItem\n   */\n  static readonly ItemRelationsControllerAddItemPath = '/relations/{fromId}/{toId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemRelationsControllerAddItem()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemRelationsControllerAddItem$Response(params: {\n    fromId: number;\n    toId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsRelationService.ItemRelationsControllerAddItemPath, 'post');\n    if (params) {\n      rb.path('fromId', params.fromId, {});\n      rb.path('toId', params.toId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemRelationsControllerAddItem$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemRelationsControllerAddItem(params: {\n    fromId: number;\n    toId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.itemRelationsControllerAddItem$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation itemRelationsControllerGetItems\n   */\n  static readonly ItemRelationsControllerGetItemsPath = '/relations/{itemAId}/{itemBId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemRelationsControllerGetItems()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemRelationsControllerGetItems$Response(params: {\n    itemAId: number;\n    itemBId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsRelationService.ItemRelationsControllerGetItemsPath, 'delete');\n    if (params) {\n      rb.path('itemAId', params.itemAId, {});\n      rb.path('itemBId', params.itemBId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemRelationsControllerGetItems$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemRelationsControllerGetItems(params: {\n    itemAId: number;\n    itemBId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.itemRelationsControllerGetItems$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\n\nexport enum BreakPoints {\n    xs = '(max-width: 599.98px)',\n    sm = '(min-width: 600px) and (max-width: 904.98px)',\n    md = '(min-width: 905px) and (max-width: 1239.98px)',\n    lg = '(min-width: 1240px) and (max-width: 1439.98px)',\n    xl = '(min-width: 1440px)',\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BreakpointsService {\n    constructor(private responsive: BreakpointObserver) {}\n\n    public observe(): Observable<BreakPoints> {\n        return new Observable((observer) => {\n            this.responsive.observe(BreakPoints.xs).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.xs);\n            });\n            this.responsive.observe(BreakPoints.sm).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.sm);\n            });\n            this.responsive.observe(BreakPoints.md).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.md);\n            });\n            this.responsive.observe(BreakPoints.lg).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.lg);\n            });\n            this.responsive.observe(BreakPoints.xl).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.xl);\n            });\n        });\n    }\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {\n    AbstractControl,\n    FormBuilder,\n    FormGroup,\n    UntypedFormGroup,\n    Validators,\n} from '@angular/forms';\nimport { CollectionsService } from '../../api/services/collections.service';\nimport { Collection } from '../../api/models/collection';\nimport { DialogRef } from '@ngneat/dialog';\nimport { Data } from '@angular/router';\n\n@Component({\n    selector: 'app-add-collection',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './add-collection.component.html',\n    styleUrls: ['./add-collection.component.scss'],\n})\nexport class AddCollectionComponent {\n\n    readonly form: FormGroup = this.formBuilder.group({\n        name: [null, Validators.required],\n    });\n\n    constructor(\n        private ref: DialogRef<Data>,\n        private formBuilder: FormBuilder,\n        private collectionsService: CollectionsService,\n    ) {}\n\n    addNewItem(event: any): void {\n        this.updateFormValidity(this.form);\n        if (!this.form.valid) {\n            event.target.blur();\n            return;\n        }\n        const newCollection: Collection = this.form.value;\n        newCollection.favourite = false;\n        this.collectionsService\n            .collectionControllerAddCollection({ body: newCollection })\n            .subscribe(() => {\n                this.form.reset();\n                this.ref.close();\n            });\n    }\n\n    updateFormValidity(form: UntypedFormGroup): void {\n        Object.values<AbstractControl>(form.controls).forEach(\n            (control: AbstractControl): void => {\n                this.updateFormControlValidity(control);\n            },\n        );\n    }\n\n    updateFormControlValidity(control: AbstractControl): void {\n        control.markAsTouched();\n        control.markAsDirty();\n        control.updateValueAndValidity();\n    }\n}\n","<div class=\"addContainer\">\n  <form [formGroup]=\"form\">\n    <!--  <small>Name</small>-->\n    <input class=\"input-item\" formControlName=\"name\" id=\"name\" placeholder=\"Collection Name\">\n    <button (click)=\"addNewItem($event)\" [disabled]=\"form.invalid\">Add</button>\n  </form>\n</div>\n","<a [routerLink]=\"['collection', collection.id]\">\n  <div class=\"card\">\n    <div class=\"card-content\">\n      <div class=\"truncate\"><b>{{collection.name}}</b></div>\n      <ul class=\"items-text\">\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[0]\">{{items[0].name}}</span></li>\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[1]\">{{items[1].name}}</span></li>\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[2]\">{{items[2].name}}</span></li>\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[3]\">{{items[3].name}}</span></li>\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[4]\">{{items[4].name}}</span></li>\n      </ul>\n    </div>\n  </div>\n</a>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Collection} from '../../../api/models/collection';\nimport {ItemsService} from \"../../../api/services/items.service\";\nimport {Item} from \"../../../api/models/item\";\nimport {CollectionsService} from \"../../../api/services/collections.service\";\n\n@Component({\n  selector: 'app-collection-card',\n  templateUrl: './collection-card.component.html',\n  styleUrls: ['./collection-card.component.scss'],\n})\nexport class CollectionCardComponent implements OnInit {\n\n  @Input() collection!: Collection;\n  items: Item[] = [];\n\n  constructor(private itemsService: ItemsService, ) {\n  }\n\n  ngOnInit(): void {\n    this.itemsService\n      .itemsControllerGetItems({collectionId: this.collection.id!})\n      .subscribe(items => {\n        this.items = items.items.slice(0, 5);\n      })\n  }\n}\n","<div class=\"panel-container\">\n  <div class=\"card full-width-card\">\n    <div class=\"card-content\">\n      <div class=\"collection-bar\">\n        <input class=\"search\" placeholder=\"Search\">\n      </div>\n    </div>\n  </div>\n  <div class=\"card\">\n    <div class=\"card-content\">\n      <div class=\"collection-bar\">\n        <a (click)=\"add()\" class=\"rnd-btn add-collection\"></a>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div *ngIf=\"showFavourite && favCollections\" class=\"collections-with-header\">\n  <div class=\"heading\"><span class=\"text-heading\">Favorites</span></div>\n  <div class=\"collections-lines\">\n    <a *ngFor=\"let collection of favCollections;\" [routerLink]=\"['collection', collection.id]\" class=\"card\">\n      <div class=\"card-content\">{{collection.name}}</div>\n    </a>\n  </div>\n</div>\n<div class=\"collections-with-header\">\n  <div class=\"heading\"><span class=\"text-heading\">Collections</span></div>\n  <div class=\"collections-container\">\n    <div *ngFor=\"let collection of collections;\" class=\"collection-card\">\n      <app-collection-card [collection]=\"collection\"></app-collection-card>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n    BreakPoints,\n    BreakpointsService,\n} from '../../../services/breakpoints.service';\nimport { CollectionsService } from '../../../api/services/collections.service';\nimport { Collection } from '../../../api/models/collection';\nimport { DialogService } from '@ngneat/dialog';\nimport { AddCollectionComponent } from '../../add-collection/add-collection.component';\n\n@Component({\n    selector: 'app-collections',\n    templateUrl: './collections.component.html',\n    styleUrls: ['./collections.component.scss'],\n})\nexport class CollectionsComponent implements OnInit {\n    @Input() collections!: Collection[];\n    @Input() favCollections!: Collection[];\n    showFavourite = false;\n\n    constructor(\n        private breakpointsService: BreakpointsService,\n        private collectionsService: CollectionsService,\n        private dialogService: DialogService,\n    ) {}\n\n    ngOnInit(): void {\n        console.log('CollectionsComponent', this.collections);\n        this.breakpointsService.observe().subscribe((value) => {\n            switch (value) {\n                case BreakPoints.xs:\n                    this.showFavourite = true;\n                    break;\n                case BreakPoints.sm:\n                    this.showFavourite = true;\n                    break;\n                case BreakPoints.md:\n                    this.showFavourite = false;\n                    break;\n                case BreakPoints.lg:\n                    this.showFavourite = false;\n                    break;\n                case BreakPoints.xl:\n                    this.showFavourite = false;\n                    break;\n                default:\n                    this.showFavourite = false;\n            }\n        });\n    }\n\n    add(): void {\n        this.dialogService\n            .open(AddCollectionComponent, {\n                // data is typed based on the passed generic\n                data: {\n                    title: 'Add collection',\n                },\n            })\n            .afterClosed$.subscribe(() => this.getCollections());\n    }\n\n    private getCollections() {\n        this.collectionsService\n            .collectionControllerGetCurrentUserCollections()\n            .subscribe((collections) => {\n                this.collections = collections;\n            });\n    }\n}\n","<div class=\"side-heading\"><span class=\"text-heading\">Favorite</span></div>\n<div class=\"side-collections\" *ngIf=\"favCollections\">\n  <a class=\"card\" *ngFor=\"let collection of favCollections;\" [routerLink]=\"['collection', collection.id]\"><div class=\"card-content\">{{collection.name}}</div></a>\n</div>\n","import {Component, Input} from '@angular/core';\nimport { Collection } from '../../../api/models/collection';\n\n@Component({\n    selector: 'app-collections-sidepanel',\n    templateUrl: './collections-sidepanel.component.html',\n    styleUrls: ['./collections-sidepanel.component.scss'],\n})\nexport class CollectionsSidepanelComponent {\n    @Input() favCollections!: Collection[];\n}\n","<div class=\"row\">\n  <div *ngIf=\"showSidePanel\" ngClass=\"col-{{sidePanelColumns}}\" class=\"side\">\n    <app-collections-sidepanel [favCollections]=\"favCollections\"></app-collections-sidepanel>\n  </div>\n  <div ngClass=\"col-{{collectionsPanelColumns}}\" class=\"collections\">\n    <app-collections [collections]=\"collections\" [favCollections]=\"favCollections\"></app-collections>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {\n    BreakPoints,\n    BreakpointsService,\n} from '../../services/breakpoints.service';\nimport { ActivatedRoute, Data } from '@angular/router';\nimport { Collection } from '../../api/models/collection';\n\n@Component({\n    selector: 'app-collections-page',\n    templateUrl: './collections-page.component.html',\n    styleUrls: ['./collections-page.component.scss'],\n})\nexport class CollectionsPageComponent implements OnInit {\n    collections: Array<Collection> = [];\n    favCollections: Array<Collection> = [];\n    showSidePanel = false;\n    sidePanelColumns = 0;\n    collectionsPanelColumns = 0;\n\n    constructor(\n        private breakpointsService: BreakpointsService,\n        private activatedRoute: ActivatedRoute,\n    ) {}\n\n    ngOnInit(): void {\n        console.log('CollectionsPageComponent');\n        this.breakpointsService.observe().subscribe((value) => {\n            this.showSidePanel = false;\n            this.sidePanelColumns = 3;\n            this.collectionsPanelColumns = 4;\n            switch (value) {\n                case BreakPoints.xs:\n                    break;\n                case BreakPoints.sm:\n                    this.collectionsPanelColumns = 8;\n                    break;\n                case BreakPoints.md:\n                    this.showSidePanel = true;\n                    this.collectionsPanelColumns = 9;\n                    break;\n              case BreakPoints.lg:\n                    this.showSidePanel = true;\n                    this.collectionsPanelColumns = 9;\n                    break;\n              case BreakPoints.xl:\n                    this.showSidePanel = true;\n                    this.sidePanelColumns = 4;\n                    this.collectionsPanelColumns = 8;\n                    break;\n                default:\n                    break;\n            }\n        });\n        this.activatedRoute.data.subscribe((routeData: Data) => {\n            const data = routeData as { collections: Array<Collection>, favCollections: Array<Collection> };\n            if (data) {\n              if (data.collections) {\n                this.collections = data.collections;\n              }\n              if (data.favCollections) {\n                this.favCollections = data.favCollections;\n              }\n            }\n        });\n    }\n}\n","<h2>{{title}}</h2>\n<table *ngIf=\"!calibrated\">\n  <colgroup>\n    <col span=\"1\" style=\"width: 50%;\">\n    <col span=\"1\" style=\"width: 72px;\">\n    <col span=\"1\" style=\"width: 50%;\">\n  </colgroup>\n  <tbody>\n  <tr *ngFor=\"let p of items; let i = index\">\n    <td>\n      <button (click)=\"addRelation(p,i,p.item1.id,p.item2.id)\"\n              [ngClass]=\"p.item1.id === p.relation?.from?'selected-left':''\"\n              class=\"compare compare-left \">{{p.item1.name}}</button>\n    </td>\n    <td>\n      <button (click)=\"deleteRelation(p,i)\" [ngClass]=\"!p.relation?'selected-center':''\"\n              class=\"compare compare-center \"></button>\n    </td>\n    <td>\n      <button (click)=\"addRelation(p,i,p.item2.id,p.item1.id)\"\n              [ngClass]=\"p.item2.id === p.relation?.from?'selected-right':''\"\n              class=\"compare compare-right \">{{p.item2.name}}</button>\n    </td>\n  </tr>\n  </tbody>\n</table>\n<!--<div>-->\n<!--  <ul>-->\n<!--    <li *ngFor=\"let p of items; let i = index\">-->\n<!--      <app-pair (pressed)=\"itemPressed(i)\" [pair]=\"p\"></app-pair>-->\n<!--    </li>-->\n<!--  </ul>-->\n<!--</div>-->\n<span *ngIf=\"!calibrated\" style=\"padding-left: 20px;\"><button (click)=\"getNextBestPair()\">Next</button></span>\n<h3 *ngIf=\"calibrated\">Calibrated!</h3>\n<button (click)=\"close()\" *ngIf=\"calibrated\">Close</button>\n","import {\n  Component, OnInit,\n} from '@angular/core';\nimport {ItemsService} from '../../api/services/items.service';\nimport {DialogRef} from \"@ngneat/dialog\";\nimport {Data} from \"@angular/router\";\nimport {ItemPair} from \"../../api/models/item-pair\";\nimport {ItemsRelationService} from \"../../api/services/items-relation.service\";\n\n@Component({\n  selector: 'app-calibrate-item',\n  templateUrl: './calibrate-item.component.html',\n  styleUrls: ['./calibrate-item.component.scss'],\n})\nexport class CalibrateItemComponent implements OnInit {\n\n  itemId: number | undefined;\n  title: string = '';\n  items: ItemPair[] = [];\n  calibrated = true;\n\n  constructor(\n    private ref: DialogRef<Data>,\n    private itemsService: ItemsService,\n    private itemsRelationService: ItemsRelationService\n  ) {\n    console.log(ref.data);\n    if (ref.data['title']) {\n      this.title = ref.data['title']\n    }\n    if (ref.data['itemId']) {\n      this.itemId = ref.data['itemId']\n    }\n  }\n\n  getPairs() {\n    this.getNextBestPair();\n  }\n\n  itemPressed(id: number) {\n    if (id === this.items.length - 1) {\n      this.getNextBestPair();\n    }\n  }\n\n  getNextBestPair() {\n    const ids: number[] = [];\n    ids.push(this.itemId!);\n    this.items.forEach((item) => ids.push(item.item2.id!));\n    this.itemsService\n      .itemsControllerGetBestPair({\n        id: this.itemId!,\n        exclude: ids,\n        strict: true\n      })\n      .subscribe((pair) => {\n        if (!!pair) {\n          this.items.push(pair);\n          this.calibrated = false;\n        } else {\n          this.calibrated = true;\n        }\n        console.log(pair, this.items.length)\n      });\n  }\n\n  ngOnInit(): void {\n    this.getNextBestPair();\n  }\n\n  close() {\n    this.ref.close();\n  }\n\n  addRelation(pair: ItemPair, i: number, from: number | undefined, to: number | undefined) {\n    if (from !== undefined && to !== undefined) {\n      console.log('adding relation');\n      const relation = {\n        from: from,\n        to: to,\n      };\n      this.itemsRelationService\n        .itemRelationsControllerAddItem({\n          fromId: from,\n          toId: to\n        })\n        .subscribe(() => {\n          pair.relation = relation;\n          this.itemPressed(i);\n        });\n    }\n  }\n\n  deleteRelation(pair: ItemPair, i: number) {\n    console.log('deleting relation');\n    if (pair.relation) {\n      this.itemsRelationService\n        .itemRelationsControllerGetItems({\n          itemAId: pair.relation.from,\n          itemBId: pair.relation.to\n        })\n        .subscribe(() => {\n          pair.relation = undefined;\n          this.itemPressed(i);\n        });\n    }\n  }\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {\n    AbstractControl,\n    FormBuilder,\n    FormGroup,\n    UntypedFormGroup,\n    Validators,\n} from '@angular/forms';\nimport { ItemsService } from '../../api/services/items.service';\nimport { Collection } from '../../api/models/collection';\nimport { Item } from 'src/app/api/models';\nimport {DialogRef} from \"@ngneat/dialog\";\nimport {Data} from \"@angular/router\";\n\n@Component({\n    selector: 'app-add-item',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './add-item.component.html',\n    styleUrls: ['./add-item.component.scss'],\n})\nexport class AddItemComponent {\n    collectionId: number | undefined;\n\n    readonly form: FormGroup = this.formBuilder.group({\n        name: [null, Validators.required],\n    });\n\n    constructor(\n        private ref: DialogRef<Data>,\n        private formBuilder: FormBuilder,\n        private itemService: ItemsService,\n    ) {\n      if(ref.data['collectionId']){\n        this.collectionId = ref.data['collectionId']\n      }\n    }\n\n    addNewItem(event: any): void {\n        this.updateFormValidity(this.form);\n        if (!this.form.valid) {\n            event.target.blur();\n            return;\n        }\n        const itemEntity: Item = this.form.value;\n        itemEntity.calibrated = false;\n        if (!this.collectionId) return;\n        this.itemService\n            .itemsControllerAddItem({\n                collectionId: this.collectionId,\n                body: itemEntity,\n            })\n            .subscribe((id) => {\n                this.form.reset();\n                this.ref.close(id);\n            });\n    }\n\n    updateFormValidity(form: UntypedFormGroup): void {\n        Object.values<AbstractControl>(form.controls).forEach(\n            (control: AbstractControl): void => {\n                this.updateFormControlValidity(control);\n            },\n        );\n    }\n\n    updateFormControlValidity(control: AbstractControl): void {\n        control.markAsTouched();\n        control.markAsDirty();\n        control.updateValueAndValidity();\n    }\n}\n","<div class=\"addContainer\">\n  <form [formGroup]=\"form\">\n    <input class=\"input-item\" formControlName=\"name\" id=\"name\" placeholder=\"Item\">\n    <button (click)=\"addNewItem($event)\" [disabled]=\"form.invalid\">Add</button>\n  </form>\n</div>\n","<h2>{{title}}</h2>\n<table *ngIf=\"!calibrated\">\n  <colgroup>\n    <col span=\"1\" style=\"width: 50%;\">\n    <col span=\"1\" style=\"width: 72px;\">\n    <col span=\"1\" style=\"width: 50%;\">\n  </colgroup>\n  <tbody>\n  <tr *ngFor=\"let p of items; let i = index\">\n    <td>\n      <button (click)=\"addRelation(p,i,p.item1.id,p.item2.id)\"\n              [ngClass]=\"p.item1.id === p.relation?.from?'selected-left':''\"\n              class=\"compare compare-left \">{{p.item1.name}}</button>\n    </td>\n    <td>\n      <button (click)=\"deleteRelation(p,i)\" [ngClass]=\"!p.relation?'selected-center':''\"\n              class=\"compare compare-center \"></button>\n    </td>\n    <td>\n      <button (click)=\"addRelation(p,i,p.item2.id,p.item1.id)\"\n              [ngClass]=\"p.item2.id === p.relation?.from?'selected-right':''\"\n              class=\"compare compare-right \">{{p.item2.name}}</button>\n    </td>\n  </tr>\n  </tbody>\n</table>\n<!--<div>-->\n<!--  <ul>-->\n<!--    <li *ngFor=\"let p of items; let i = index\">-->\n<!--      <app-pair (pressed)=\"itemPressed(i)\" [pair]=\"p\"></app-pair>-->\n<!--    </li>-->\n<!--  </ul>-->\n<!--</div>-->\n<span *ngIf=\"!calibrated\" style=\"padding-left: 20px;\"><button (click)=\"getNextBestPair()\">Next</button></span>\n<h3 *ngIf=\"calibrated\">Calibrated!</h3>\n<button (click)=\"close()\" *ngIf=\"calibrated\">Close</button>\n","import {Component, OnInit,} from '@angular/core';\nimport {ItemsService} from '../../api/services/items.service';\nimport {DialogRef} from \"@ngneat/dialog\";\nimport {Data} from \"@angular/router\";\nimport {ItemPair} from \"../../api/models/item-pair\";\nimport {ItemsRelationService} from \"../../api/services/items-relation.service\";\n\n@Component({\n  selector: 'app-calibrate-collection',\n  templateUrl: './calibrate-collection.component.html',\n  styleUrls: ['./calibrate-collection.component.scss'],\n})\nexport class CalibrateCollectionComponent implements OnInit {\n\n  collectionId: number | undefined;\n  title: string = '';\n  items: ItemPair[] = [];\n  calibrated = true;\n\n  constructor(\n    private ref: DialogRef<Data>,\n    private itemsService: ItemsService,\n    private itemsRelationService: ItemsRelationService\n  ) {\n    console.log(ref.data);\n    if (ref.data['title']) {\n      this.title = ref.data['title']\n    }\n    if (ref.data['collectionId']) {\n      this.collectionId = ref.data['collectionId']\n    }\n  }\n\n  getPairs() {\n    this.getNextBestPair();\n  }\n\n  itemPressed(id: number) {\n    if (id === this.items.length - 1) {\n      this.getNextBestPair();\n    }\n  }\n\n  getNextBestPair() {\n    if (!this.collectionId) return;\n    const ids: number[] = [];\n    this.items.forEach((item) => ids.push(item.item2.id!));\n    this.itemsService\n      .itemsControllerGetLeastCalibratedItem({collectionId: this.collectionId})\n      .subscribe((item) =>\n        this.itemsService\n          .itemsControllerGetBestPair({\n            id: item.id!,\n            exclude: ids,\n            strict: false\n          })\n          .subscribe((pair) => {\n            if (!!pair) {\n              this.items.push(pair);\n              this.calibrated = false;\n            } else {\n              this.calibrated = true;\n            }\n            console.log(pair, this.items.length)\n          }));\n  }\n\n  ngOnInit(): void {\n    this.getNextBestPair();\n  }\n\n  close() {\n    this.ref.close();\n  }\n\n  addRelation(pair: ItemPair, i: number, from: number | undefined, to: number | undefined) {\n    if (from !== undefined && to !== undefined) {\n      console.log('adding relation');\n      const relation = {\n        from: from,\n        to: to,\n      };\n      this.itemsRelationService\n        .itemRelationsControllerAddItem({\n          fromId: from,\n          toId: to\n        })\n        .subscribe(() => {\n          pair.relation = relation;\n          this.itemPressed(i);\n        });\n    }\n  }\n\n  deleteRelation(pair: ItemPair, i: number) {\n    console.log('deleting relation');\n    if (pair.relation) {\n      this.itemsRelationService\n        .itemRelationsControllerGetItems({\n          itemAId: pair.relation.from,\n          itemBId: pair.relation.to\n        })\n        .subscribe(() => {\n          pair.relation = undefined;\n          this.itemPressed(i);\n        });\n    }\n  }\n}\n","<div class=\"heading\">\n  <span class=\"text-heading\"><a [routerLink]=\"['']\" class=\"nav-back\"></a></span>\n  <span class=\"text-heading\">{{collection.name}}</span>\n\n</div>\n<div class=\"card\">\n  <div class=\"card-content\">\n    <div class=\"collection-items\">\n      <a (click)=\"addItem()\" class=\"rnd-btn add-item\" title=\"Add new item\"></a>\n      <a [className]=\"calibrated<0.5?'rnd-btn not-calibrated':calibrated<0.90?'rnd-btn calibrated':'rnd-btn exactly-calibrated'\"\n         [title]=\"calibrated |  percent:'0.0'\" (click)=\"calibrateCollection()\">\n      </a>\n      <a (click)=\"addToFavs()\" *ngIf=\"!collection.favourite\" class=\"rnd-btn unfav-btn\" title=\"Add collection to favourites\"></a>\n      <a (click)=\"removeFromFavs()\" *ngIf=\"collection.favourite\" class=\"rnd-btn fav-btn\" title=\"Remove collection from favourites\"></a>\n    </div>\n  </div>\n</div>\n<!--Calibrated: {{calibrated |  percent:'0.0'}}-->\n<!--<app-add-item [collection]=\"collection\" (changes)=\"calibrateItem($event)\"></app-add-item>-->\n<div class=\"card list\">\n  <div class=\"card-content\">\n    <ol>\n      <li *ngFor=\"let item of items\">{{item.name}}\n        <a (click)=\"calibrateItem(item.id!)\" *ngIf=\"!item.calibrated\" class=\"calibrate-item-btn\"></a>\n        <a (click)=\"deleteItem(item.id)\" class=\"delete-btn\"></a>\n      </li>\n    </ol>\n  </div>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Data} from '@angular/router';\nimport {BreakpointsService} from '../../services/breakpoints.service';\nimport {Item} from '../../api/models/item';\nimport {Collection} from '../../api/models/collection';\nimport {ItemsService} from '../../api/services/items.service';\nimport {DialogService} from \"@ngneat/dialog\";\nimport {CalibrateItemComponent} from \"../../components/calibrate-item/calibrate-item.component\";\nimport {CollectionsService} from \"../../api/services/collections.service\";\nimport {CollectionWithItems} from \"../../api/models/collection-with-items\";\nimport {AddCollectionComponent} from \"../../components/add-collection/add-collection.component\";\nimport {AddItemComponent} from \"../../components/add-item/add-item.component\";\nimport {CalibrateCollectionComponent} from \"../../components/calibrate-collection/calibrate-collection.component\";\n\n@Component({\n  selector: 'app-collection-page',\n  templateUrl: './collection-page.component.html',\n  styleUrls: ['./collection-page.component.scss'],\n})\nexport class CollectionPageComponent implements OnInit {\n  items: Array<Item> = [];\n  calibrated: number = 0;\n  collection!: Collection;\n\n  constructor(\n    private breakpointsService: BreakpointsService,\n    private activatedRoute: ActivatedRoute,\n    private itemService: ItemsService,\n    private dialogService: DialogService,\n    private collectionsService: CollectionsService,\n  ) {\n  }\n\n  get itemsjson(): string {\n    return JSON.stringify(this.items);\n  }\n\n  ngOnInit(): void {\n    this.activatedRoute.data.subscribe((routeData: Data) => {\n      const data = routeData as {\n        items: CollectionWithItems;\n        collection: Collection;\n      };\n      if (data && data.items) {\n        this.items = data.items.items;\n        this.calibrated = data.items.calibrated!;\n        this.collection = data.collection;\n        this.collectionsService.collectionControllerVisitCollection({collectionId: this.collection.id!}).subscribe(() => console.log(\"visited\"));\n      }\n    });\n  }\n\n  calibrateItem(id: number) {\n    this.dialogService\n      .open(CalibrateItemComponent, {\n        // data is typed based on the passed generic\n        data: {\n          title: `Calibrate`,\n          itemId: id,\n        },\n      })\n      .afterClosed$.subscribe(() =>\n      this.reload());\n  }\n\n  calibrateCollection() {\n    this.dialogService\n      .open(CalibrateCollectionComponent, {\n        // data is typed based on the passed generic\n        data: {\n          title: `Calibrate`,\n          collectionId: this.collection.id,\n        },\n      })\n      .afterClosed$.subscribe(() =>\n      this.reload());\n  }\n\n  deleteItem(itemId: number | undefined) {\n    if (!itemId) {\n      return;\n    }\n    this.itemService\n      .itemsControllerDeleteItemFromCollection({collectionItemId: itemId})\n      .subscribe(() => this.reload());\n\n  }\n\n  addToFavs() {\n    this.collectionsService\n      .collectionControllerAddCollectionToFav({collectionId: this.collection.id!})\n      .subscribe(() => this.collection.favourite = true);\n  }\n\n  addItem(): void {\n    this.dialogService\n      .open(AddItemComponent, {\n        // data is typed based on the passed generic\n        data: {\n          title: 'Add Item',\n          collectionId: this.collection.id!,\n        },\n      })\n      .afterClosed$.subscribe((id: number|undefined) => {if(id) this.calibrateItem(id)});\n  }\n\n  removeFromFavs() {\n    this.collectionsService\n      .collectionControllerRemoveCollectionFromFav({collectionId: this.collection.id!})\n      .subscribe(() => this.collection.favourite = false);\n  }\n\n  private reload() {\n    return this.itemService.itemsControllerGetItems({\n      collectionId: this.collection.id!,\n    }).subscribe((items) => {\n      this.items = items.items;\n      this.calibrated = items.calibrated!\n    });\n  }\n}\n","import { ActivatedRouteSnapshot, ResolveFn } from '@angular/router';\nimport { EMPTY, Observable } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { ItemsService } from '../api/services';\nimport {CollectionWithItems} from \"../api/models/collection-with-items\";\n\nexport const collectionItemsResolver: ResolveFn<CollectionWithItems> = (\n    route: ActivatedRouteSnapshot,\n): Observable<CollectionWithItems> => {\n    const collectionIdParam: string | null = findParam(\n        ROUTER_PARAM_COLLECTION_ID,\n        route,\n    );\n    if (!collectionIdParam) {\n        return EMPTY;\n    }\n    const collectionId: number = +collectionIdParam;\n    return inject(ItemsService).itemsControllerGetItems({\n        collectionId: collectionId,\n    });\n};\n\nexport const ROUTER_PARAM_COLLECTION_ID = 'collectionId';\nexport function findParam(\n    name: string,\n    route: ActivatedRouteSnapshot,\n): string | null {\n    const value = route.params[name];\n    if (value) {\n        return value;\n    }\n    if (route.parent) {\n        return findParam(name, route.parent);\n    }\n    return null;\n}\n","import { ActivatedRouteSnapshot, ResolveFn } from '@angular/router';\nimport { EMPTY, Observable } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { CollectionsService } from '../api/services';\nimport { Collection } from '../api/models/collection';\n\nexport const collectionResolver: ResolveFn<Collection> = (\n    route: ActivatedRouteSnapshot,\n): Observable<Collection> => {\n    const collectionIdParam: string | null = findParam(\n        ROUTER_PARAM_COLLECTION_ID,\n        route,\n    );\n    if (!collectionIdParam) {\n        return EMPTY;\n    }\n    const collectionId: number = +collectionIdParam;\n    return inject(CollectionsService).collectionControllerGetCollection({\n        collectionId: collectionId,\n    });\n};\n\nexport const ROUTER_PARAM_COLLECTION_ID = 'collectionId';\nexport function findParam(\n    name: string,\n    route: ActivatedRouteSnapshot,\n): string | null {\n    const value = route.params[name];\n    if (value) {\n        return value;\n    }\n    if (route.parent) {\n        return findParam(name, route.parent);\n    }\n    return null;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { collectionsResolver } from './resolvers/collections.resolver';\nimport { CollectionsPageComponent } from './pages/collections-page/collections-page.component';\nimport { CollectionPageComponent } from './pages/collection-page/collection-page.component';\nimport { collectionItemsResolver } from './resolvers/collection-items.resolver';\nimport { collectionResolver } from './resolvers/collection.resolver';\nimport {favCollectionsResolver} from \"./resolvers/favCollections.resolver\";\nimport {TestPageComponent} from \"./pages/test-page/test-page.component\";\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CollectionsPageComponent,\n        resolve: { collections: collectionsResolver, favCollections: favCollectionsResolver },\n    },\n    {\n        path: 'collection/:collectionId',\n        component: CollectionPageComponent,\n        resolve: {\n            items: collectionItemsResolver,\n            collection: collectionResolver,\n        },\n    },\n  {\n    path: 'test',\n    component: TestPageComponent,\n  },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { ActivatedRouteSnapshot, ResolveFn } from '@angular/router';\nimport { Collection } from '../api/models/collection';\nimport { Observable } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { CollectionsService } from '../api/services';\n\nexport const collectionsResolver: ResolveFn<Array<Collection>> = (\n    route: ActivatedRouteSnapshot,\n): Observable<Array<Collection>> => {\n    return inject(\n        CollectionsService,\n    ).collectionControllerGetCurrentUserCollections();\n};\n","import { ActivatedRouteSnapshot, ResolveFn } from '@angular/router';\nimport { Collection } from '../api/models/collection';\nimport { Observable } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { CollectionsService } from '../api/services';\n\nexport const favCollectionsResolver: ResolveFn<Array<Collection>> = (\n    route: ActivatedRouteSnapshot,\n): Observable<Array<Collection>> => {\n    return inject(\n        CollectionsService,\n    ).collectionControllerGetCurrentUserFavoriteCollections();\n};\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-test-page',\n  templateUrl: './test-page.component.html',\n  styleUrls: ['./test-page.component.scss']\n})\nexport class TestPageComponent {\n  idx: number = 0;\n\n  select(number: number) {\n    this.idx = number;\n  }\n}\n","<p>test-page works!</p>\n\n","import { Injectable } from '@angular/core';\nimport { GoogleAuthProvider } from '@firebase/auth';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { User } from '../model/user';\nimport { firstValueFrom } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FireAuthService {\n    userData: any;\n\n    constructor(\n        private afAuth: AngularFireAuth, // private afs: AngularFirestore,\n    ) {\n        this.afAuth.authState.subscribe((user) => {\n            this.saveUser(user);\n        });\n    }\n\n    private saveUser(user: any) {\n        if (user) {\n            this.userData = user;\n            localStorage.setItem('fire.user', JSON.stringify(this.userData));\n        } else {\n            localStorage.setItem('fire.user', 'null');\n        }\n    }\n\n    get isLoggedIn(): boolean {\n        const userString = localStorage.getItem('fire.user');\n        const user = JSON.parse(userString ? userString : 'null');\n        return user !== null && user.emailVerified !== false;\n    }\n\n    GoogleAuth() {\n        return this.AuthLogin(new GoogleAuthProvider()).then((res: any) => {\n            // if (res) {\n            //   this.router.navigate(['dashboard']);\n            // }\n        });\n    }\n\n    async getToken() {\n        const token = await firstValueFrom(this.afAuth.idToken);\n        return token;\n    }\n\n    AuthLogin(provider: any) {\n        return this.afAuth\n            .signInWithPopup(provider)\n            .then((result) => {\n                // this.ngZone.run(() => {\n                //   this.router.navigate(['dashboard']);\n                // });\n                const user = this.SetUserData(result.user);\n                this.saveUser(user);\n                location.reload();\n            })\n            .catch((error) => {\n                window.alert(error);\n            });\n    }\n\n    /* Setting up user data when sign in with username/password,\nsign up with username/password and sign in with social auth\nprovider in Firestore database using AngularFirestore + AngularFirestoreDocument service */\n    SetUserData(user: any) {\n        // const userRef: AngularFirestoreDocument<any> = this.afs.doc<any>(\n        //     `users/${user.uid}`,\n        // );\n        const userData: User = {\n            uid: user.uid,\n            email: user.email,\n            displayName: user.displayName,\n            photoURL: user.photoURL,\n            emailVerified: user.emailVerified,\n        };\n        return userData;\n        // return userRef.set(userData, {\n        //     merge: true,\n        // });\n    }\n\n    // Sign out\n    SignOut() {\n        return this.afAuth.signOut().then(() => {\n            localStorage.removeItem('fire.user');\n            location.reload();\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DialogRef } from '@ngneat/dialog';\nimport { FireAuthService } from '../../services/fire-auth.service';\n\ninterface Data {\n    userName: string;\n}\n\n@Component({\n    selector: 'app-profile',\n    templateUrl: './profile.component.html',\n    styleUrls: ['./profile.component.scss'],\n})\nexport class ProfileComponent {\n    constructor(\n        private ref: DialogRef<Data>,\n        private fireAuthService: FireAuthService,\n    ) {}\n\n    get userName() {\n        return this.fireAuthService.userData.displayName;\n    }\n\n    get photoURL() {\n        return this.fireAuthService.userData.photoURL;\n    }\n\n    logOut(): void {\n        this.fireAuthService.SignOut();\n        this.ref.close();\n    }\n}\n","<div class=\"profileContainer\">\n  <div class=\"profileImageContainer\">\n    <img [src]=\"photoURL\" alt=\"\" class=\"profilePhoto\">\n    <div class=\"profilePhotoBorder\"></div>\n  </div>\n</div>\n<h2>Logged in as {{userName}}\n</h2>\n<button (click)=\"logOut()\" class=\"text-main link-btn\">LOGOUT</button>\n","<span class=\"login-block\">\n<a (click)=\"profile()\" *ngIf=\"loggedIn\" class=\"login\"></a>\n<button (click)=\"GoogleAuth()\" *ngIf=\"!loggedIn\" class=\"text-main link-btn\">LOGIN</button>\n</span>\n","import { Component } from '@angular/core';\nimport { FireAuthService } from '../../services/fire-auth.service';\nimport { DialogService } from '@ngneat/dialog';\nimport { ProfileComponent } from '../profile/profile.component';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n    constructor(\n        private fireAuthService: FireAuthService,\n        private dialogService: DialogService,\n    ) {}\n\n    get loggedIn(): boolean {\n        return this.fireAuthService.isLoggedIn;\n    }\n\n    get userName(): string {\n        const name = this.fireAuthService?.userData?.displayName;\n        return name ? name : 'Logged In';\n    }\n\n    login() {\n        this.GoogleAuth();\n    }\n\n    GoogleAuth(): void {\n        this.fireAuthService.GoogleAuth();\n    }\n\n    profile(): void {\n        this.dialogService.open(ProfileComponent, {\n            // data is typed based on the passed generic\n            data: {\n                title: 'asdasdsad',\n            },\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ItemsService } from './api/services/items.service';\nimport { Item } from './api/models/item';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n    // items: Item[] = [];\n    // lastItem?: Item;\n\n    constructor() {}\n\n    ngOnInit(): void {\n        // this.reloadItems();\n    }\n\n    // reloadItems() {\n    //   this.getItems();\n    //   this.getLastItem();\n    // }\n    //\n    // getItems() {\n    //   // this.itemsService\n    //   //     .itemsControllerGetItems()\n    //   //     .subscribe((value) => (this.items = value));\n    // }\n    //\n    // getLastItem() {\n    //   // this.itemsService\n    //   //     .itemsControllerGetLastItem()\n    //   //     .subscribe((value) => (this.lastItem = value));\n    // }\n}\n","<div class=\"topbar\">\n  <app-login class=\"login-block\"></app-login>\n</div>\n<div class=\"full-body\">\n  <div class=\"responsive-container\">\n    <router-outlet></router-outlet>\n    <!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-add-item (changes)=\"reloadItems()\"></app-add-item>-->\n<!--        <app-list [items]=\"items\"></app-list>-->\n<!--      </div>-->\n<!--    </div>-->\n<!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-calibrate-item (changes)=\"reloadItems()\" *ngIf=\"!!lastItem\" [lastItem]=\"lastItem\"></app-calibrate-item>-->\n<!--      </div>-->\n<!--    </div>-->\n<!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-pairs (changes)=\"reloadItems()\"></app-pairs>-->\n<!--      </div>-->\n<!--    </div>-->\n  </div>\n</div>\n\n","/* tslint:disable */\n/* eslint-disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { ItemsService } from './services/items.service';\nimport { CollectionsService } from './services/collections.service';\nimport { ItemsRelationService } from './services/items-relation.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    ItemsService,\n    CollectionsService,\n    ItemsRelationService,\n    ApiConfiguration\n  ],\n})\nexport class ApiModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<ApiModule> {\n    return {\n      ngModule: ApiModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: ApiModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    HttpEvent,\n    HttpHandler,\n    HttpInterceptor,\n    HttpRequest,\n} from '@angular/common/http';\nimport { FireAuthService } from '../services/fire-auth.service';\nimport { from, lastValueFrom, Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FirebaseAuthInterceptor implements HttpInterceptor {\n    constructor(private fireAuthService: FireAuthService) {}\n\n    intercept(\n        req: HttpRequest<any>,\n        next: HttpHandler,\n    ): Observable<HttpEvent<any>> {\n        return from(this.handle(req, next));\n    }\n\n    async handle(req: HttpRequest<any>, next: HttpHandler) {\n        const token = await this.fireAuthService.getToken();\n        if (!token) {\n            return await lastValueFrom(next.handle(req));\n        }\n        const req1 = req.clone({\n            headers: req.headers.set('Authorization', `Bearer ${token}`),\n        });\n        return await lastValueFrom(next.handle(req1));\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { environment } from '../environments/environment';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ListComponent } from './components/list/list.component';\nimport { ApiModule } from './api/api.module';\nimport { PairsComponent } from './components/pairs/pairs.component';\nimport { AddItemComponent } from './components/add-item/add-item.component';\nimport { PairComponent } from './components/pairs/pair/pair.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CalibrateItemComponent } from './components/calibrate-item/calibrate-item.component';\nimport { CalibrateCollectionComponent } from './components/calibrate-collection/calibrate-collection.component';\nimport { initializeApp, provideFirebaseApp } from '@angular/fire/app';\nimport {\n    getAnalytics,\n    provideAnalytics,\n    ScreenTrackingService,\n    UserTrackingService,\n} from '@angular/fire/analytics';\nimport { getAuth, provideAuth } from '@angular/fire/auth';\nimport { FireAuthService } from './services/fire-auth.service';\nimport { FirebaseAuthInterceptor } from './interceptors/firebase-auth.interceptor';\nimport { AngularFireModule } from '@angular/fire/compat';\nimport { LoginComponent } from './components/login/login.component';\nimport { CollectionsComponent } from './components/collections/collections/collections.component';\nimport { CollectionsPageComponent } from './pages/collections-page/collections-page.component';\nimport { CollectionsSidepanelComponent } from './components/collections/collections-sidepanel/collections-sidepanel.component';\nimport { CollectionCardComponent } from './components/collections/collection-card/collection-card.component';\nimport { AddCollectionComponent } from './components/add-collection/add-collection.component';\nimport { CollectionPageComponent } from './pages/collection-page/collection-page.component';\nimport { TestPageComponent } from './pages/test-page/test-page.component';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        ListComponent,\n        PairsComponent,\n        AddItemComponent,\n        PairComponent,\n        CalibrateItemComponent,\n        CalibrateCollectionComponent,\n        LoginComponent,\n        CollectionsComponent,\n        CollectionsPageComponent,\n        CollectionsSidepanelComponent,\n        CollectionCardComponent,\n        AddCollectionComponent,\n        CollectionPageComponent,\n        TestPageComponent,\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        ReactiveFormsModule.withConfig({\n            warnOnNgModelWithFormControl: 'always',\n        }),\n        ApiModule.forRoot({ rootUrl: environment.application.apiUrl }),\n        AppRoutingModule,\n        AngularFireModule.initializeApp(environment.firebase),\n        provideFirebaseApp(() => {\n            console.log('*********MODULE*********', environment.firebase);\n            return initializeApp(environment.firebase);\n        }),\n        provideAnalytics(() => getAnalytics()),\n        provideAuth(() => getAuth()),\n    ],\n    providers: [\n        FireAuthService,\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: FirebaseAuthInterceptor,\n            multi: true,\n        },\n        ScreenTrackingService,\n        UserTrackingService,\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch((err) => console.error(err));\n"],"x_google_ignoreList":[]}