{"version":3,"file":"main.f1702e927a9167be.js","mappings":"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","names":["environment","projectId","appId","storageBucket","apiKey","authDomain","messagingSenderId","measurementId","ApiConfiguration","constructor","this","rootUrl","t","core","Yz7","factory","ɵfac","providedIn","BaseService","config","http","_rootUrl","i0","i1","i2","ParameterCodecInstance","ParameterCodec","encodeKey","key","encodeURIComponent","encodeValue","value","decodeKey","decodeURIComponent","decodeValue","Parameter","name","options","defaultStyle","defaultExplode","style","explode","serializeValue","separator","Array","map","v","split","join","array","Object","keys","propVal","push","String","PathParameter","super","append","path","prefix","alreadySerialized","replace","result","QueryParameter","params","HeaderParameter","headers","RequestBuilder","operationPath","method","_path","Map","_query","_header","set","query","header","body","contentType","_bodyContentType","Blob","type","pairs","val","formValue","formDataValue","_bodyContent","p","formData","FormData","toAppend","JSON","stringify","build","pathParam","values","url","httpParams","HttpParams","encoder","queryParam","httpHeaders","HttpHeaders","accept","headerParam","HttpRequest","toUpperCase","responseType","reportProgress","context","ItemsService","itemsControllerGetItems$Response","rb","ItemsControllerGetItemsPath","collectionId","request","pipe","filter","r","HttpResponse","itemsControllerGetItems","itemsControllerAddItem$Response","ItemsControllerAddItemPath","clone","parseFloat","itemsControllerAddItem","itemsControllerGetBestPair$Response","ItemsControllerGetBestPairPath","id","exclude","itemsControllerGetBestPair","CollectionsService","collectionControllerGetCurrentUserCollections$Response","CollectionControllerGetCurrentUserCollectionsPath","collectionControllerGetCurrentUserCollections","collectionControllerAddCollection$Response","CollectionControllerAddCollectionPath","undefined","collectionControllerAddCollection","collectionControllerGetCollection$Response","CollectionControllerGetCollectionPath","collectionControllerGetCollection","collectionControllerGetCurrentUserFavoriteCollections$Response","CollectionControllerGetCurrentUserFavoriteCollectionsPath","collectionControllerGetCurrentUserFavoriteCollections","ItemsRelationService","itemRelationsControllerAddItem$Response","ItemRelationsControllerAddItemPath","fromId","toId","itemRelationsControllerAddItem","itemRelationsControllerGetItems$Response","ItemRelationsControllerGetItemsPath","itemAId","itemBId","itemRelationsControllerGetItems","BreakPoints","xs","sm","md","lg","xl","BreakpointsService","responsive","observe","Observable","observer","subscribe","matches","next","AddCollectionComponent","ref","formBuilder","collectionsService","form","group","Validators","addNewItem","event","updateFormValidity","valid","reset","close","target","blur","controls","forEach","control","updateFormControlValidity","markAsTouched","markAsDirty","updateValueAndValidity","i3","Xpm","selectors","decls","vars","consts","template","rf","ctx","$event","invalid","ctx_r0","items","ctx_r1","ctx_r2","ctx_r3","ctx_r4","CollectionCardComponent","itemsService","ngOnInit","collection","slice","inputs","CollectionCardComponent_span_8_Template","CollectionCardComponent_span_10_Template","CollectionCardComponent_span_12_Template","CollectionCardComponent_span_14_Template","CollectionCardComponent_span_16_Template","_c0","collection_r3","CollectionsComponent_div_6_div_5_Template","favCollections","collection_r4","CollectionsComponent","breakpointsService","dialogService","showFavourite","console","log","collections","add","open","data","title","afterClosed$","getCollections","CollectionsComponent_div_6_Template","CollectionsComponent_div_12_Template","collection_r2","CollectionsSidepanelComponent_div_3_div_1_Template","CollectionsSidepanelComponent","CollectionsSidepanelComponent_div_3_Template","sidePanelColumns","CollectionsPageComponent","activatedRoute","showSidePanel","collectionsPanelColumns","routeData","CollectionsPageComponent_div_1_Template","pair","item1","_r7","ctx_r6","addRelation","item2","_r9","ctx_r8","deleteRelation","relation","from","to","_r11","ctx_r10","ctx_r5","PairComponent","itemsRelationService","pressed","EventEmitter","emit","outputs","PairComponent_span_0_Template","PairComponent_button_1_Template","PairComponent_span_2_Template","PairComponent_button_3_Template","PairComponent_span_4_Template","PairComponent_button_5_Template","i_r6","_r8","index","ctx_r7","itemPressed","p_r5","CalibrateItemComponent_div_2_li_2_Template","_r10","ctx_r9","getNextBestPair","_r12","ctx_r11","CalibrateItemComponent","calibrated","itemId","getPairs","length","ids","item","CalibrateItemComponent_div_2_Template","CalibrateItemComponent_span_3_Template","CalibrateItemComponent_h3_4_Template","CalibrateItemComponent_button_5_Template","AddItemComponent","itemService","changes","item_r1","CollectionPageComponent","itemsjson","itemAdded","i4","CollectionPageComponent_li_9_Template","findParam","route","parent","routes","component","resolve","inject","collectionIdParam","EMPTY","AppRoutingModule","oAB","cJS","RouterModule","FireAuthService","afAuth","authState","user","saveUser","userData","localStorage","setItem","isLoggedIn","userString","getItem","parse","emailVerified","GoogleAuth","AuthLogin","GoogleAuthProvider","then","res","getToken","_this","_asyncToGenerator","firstValueFrom","idToken","provider","signInWithPopup","SetUserData","location","reload","catch","error","window","alert","uid","email","displayName","photoURL","SignOut","signOut","removeItem","ProfileComponent","fireAuthService","userName","logOut","_r3","profile","_r5","LoginComponent","loggedIn","login","LoginComponent_a_1_Template","LoginComponent_button_2_Template","AppComponent","ApiModule","static","ngModule","providers","provide","useValue","parentModule","Error","FirebaseAuthInterceptor","intercept","req","handle","token","lastValueFrom","req1","AppModule","bootstrap","HTTP_INTERCEPTORS","useClass","multi","ScreenTrackingService","UserTrackingService","imports","BrowserModule","HttpClientModule","ReactiveFormsModule","warnOnNgModelWithFormControl","AngularFireModule","provideFirebaseApp","initializeApp","provideAnalytics","getAnalytics","provideAuth","getAuth","__NgCli_bootstrap_1","bootstrapModule","err"],"sourceRoot":"webpack:///","sources":["./src/environments/environment.prod.ts","./src/app/api/api-configuration.ts","./src/app/api/base-service.ts","./src/app/api/request-builder.ts","./src/app/api/services/items.service.ts","./src/app/api/services/collections.service.ts","./src/app/api/services/items-relation.service.ts","./src/app/services/breakpoints.service.ts","./src/app/components/add-collection/add-collection.component.ts","./src/app/components/add-collection/add-collection.component.html","./src/app/components/collections/collection-card/collection-card.component.html","./src/app/components/collections/collection-card/collection-card.component.ts","./src/app/components/collections/collections/collections.component.html","./src/app/components/collections/collections/collections.component.ts","./src/app/components/collections/collections-sidepanel/collections-sidepanel.component.html","./src/app/components/collections/collections-sidepanel/collections-sidepanel.component.ts","./src/app/pages/collections-page/collections-page.component.html","./src/app/pages/collections-page/collections-page.component.ts","./src/app/components/pairs/pair/pair.component.html","./src/app/components/pairs/pair/pair.component.ts","./src/app/components/calibrate-item/calibrate-item.component.html","./src/app/components/calibrate-item/calibrate-item.component.ts","./src/app/components/add-item/add-item.component.ts","./src/app/components/add-item/add-item.component.html","./src/app/pages/collection-page/collection-page.component.html","./src/app/pages/collection-page/collection-page.component.ts","./src/app/resolvers/collection-items.resolver.ts","./src/app/resolvers/collection.resolver.ts","./src/app/app-routing.module.ts","./src/app/resolvers/collections.resolver.ts","./src/app/services/fire-auth.service.ts","./src/app/components/profile/profile.component.ts","./src/app/components/profile/profile.component.html","./src/app/components/login/login.component.html","./src/app/components/login/login.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/api/api.module.ts","./src/app/interceptors/firebase-auth.interceptor.ts","./src/app/app.module.ts","./src/main.ts"],"sourcesContent":["import { ApplicationEnvironment } from './application-environment';\n\nexport const environment: ApplicationEnvironment = {\n    firebase: {\n        projectId: 'queuest-cb885',\n        appId: '1:936633637141:web:9cc171d2c3bf1f5a5bb11c',\n        storageBucket: 'queuest-cb885.appspot.com',\n        apiKey: 'AIzaSyDPU4uUi8KAm_2VC1kZg7oIlPpQJvV7MQY',\n        authDomain: 'queuest-cb885.firebaseapp.com',\n        messagingSenderId: '936633637141',\n        measurementId: 'G-P8DPMCNH7X',\n    },\n    production: true,\n    application: {\n        apiUrl: 'https://api.queuest.c7d5a6.com',\n    },\n};\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = '';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Item } from '../models/item';\nimport { ItemPair } from '../models/item-pair';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ItemsService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation itemsControllerGetItems\n   */\n  static readonly ItemsControllerGetItemsPath = '/collections/{collectionId}/items';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerGetItems()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetItems$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Item>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerGetItemsPath, 'get');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Item>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerGetItems$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetItems(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<Array<Item>> {\n\n    return this.itemsControllerGetItems$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Item>>) => r.body as Array<Item>)\n    );\n  }\n\n  /**\n   * Path part for operation itemsControllerAddItem\n   */\n  static readonly ItemsControllerAddItemPath = '/collections/{collectionId}/items';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerAddItem()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  itemsControllerAddItem$Response(params: {\n    collectionId: number;\n    body: Item\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<number>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerAddItemPath, 'post');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: parseFloat(String((r as HttpResponse<any>).body)) }) as StrictHttpResponse<number>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerAddItem$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  itemsControllerAddItem(params: {\n    collectionId: number;\n    body: Item\n  },\n  context?: HttpContext\n\n): Observable<number> {\n\n    return this.itemsControllerAddItem$Response(params,context).pipe(\n      map((r: StrictHttpResponse<number>) => r.body as number)\n    );\n  }\n\n  /**\n   * Path part for operation itemsControllerGetBestPair\n   */\n  static readonly ItemsControllerGetBestPairPath = '/collections/{collectionId}/items/{id}/bestpair';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemsControllerGetBestPair()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetBestPair$Response(params: {\n    id: number;\n    exclude?: Array<number>;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<ItemPair>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsService.ItemsControllerGetBestPairPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n      rb.query('exclude', params.exclude, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<ItemPair>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemsControllerGetBestPair$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemsControllerGetBestPair(params: {\n    id: number;\n    exclude?: Array<number>;\n  },\n  context?: HttpContext\n\n): Observable<ItemPair> {\n\n    return this.itemsControllerGetBestPair$Response(params,context).pipe(\n      map((r: StrictHttpResponse<ItemPair>) => r.body as ItemPair)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\nimport { Collection } from '../models/collection';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CollectionsService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation collectionControllerGetCurrentUserCollections\n   */\n  static readonly CollectionControllerGetCurrentUserCollectionsPath = '/collections';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerGetCurrentUserCollections()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserCollections$Response(params?: {\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Collection>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerGetCurrentUserCollectionsPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Collection>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerGetCurrentUserCollections$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserCollections(params?: {\n  },\n  context?: HttpContext\n\n): Observable<Array<Collection>> {\n\n    return this.collectionControllerGetCurrentUserCollections$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Collection>>) => r.body as Array<Collection>)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerAddCollection\n   */\n  static readonly CollectionControllerAddCollectionPath = '/collections';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerAddCollection()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  collectionControllerAddCollection$Response(params: {\n    body: Collection\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerAddCollectionPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerAddCollection$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  collectionControllerAddCollection(params: {\n    body: Collection\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.collectionControllerAddCollection$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerGetCollection\n   */\n  static readonly CollectionControllerGetCollectionPath = '/collections/{collectionId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerGetCollection()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCollection$Response(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Collection>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerGetCollectionPath, 'get');\n    if (params) {\n      rb.path('collectionId', params.collectionId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Collection>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerGetCollection$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCollection(params: {\n    collectionId: number;\n  },\n  context?: HttpContext\n\n): Observable<Collection> {\n\n    return this.collectionControllerGetCollection$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Collection>) => r.body as Collection)\n    );\n  }\n\n  /**\n   * Path part for operation collectionControllerGetCurrentUserFavoriteCollections\n   */\n  static readonly CollectionControllerGetCurrentUserFavoriteCollectionsPath = '/collections/fav';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `collectionControllerGetCurrentUserFavoriteCollections()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserFavoriteCollections$Response(params?: {\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<Array<Collection>>> {\n\n    const rb = new RequestBuilder(this.rootUrl, CollectionsService.CollectionControllerGetCurrentUserFavoriteCollectionsPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<Collection>>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `collectionControllerGetCurrentUserFavoriteCollections$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  collectionControllerGetCurrentUserFavoriteCollections(params?: {\n  },\n  context?: HttpContext\n\n): Observable<Array<Collection>> {\n\n    return this.collectionControllerGetCurrentUserFavoriteCollections$Response(params,context).pipe(\n      map((r: StrictHttpResponse<Array<Collection>>) => r.body as Array<Collection>)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpContext } from '@angular/common/http';\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\nimport { Observable } from 'rxjs';\nimport { map, filter } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ItemsRelationService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation itemRelationsControllerAddItem\n   */\n  static readonly ItemRelationsControllerAddItemPath = '/relations/{fromId}/{toId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemRelationsControllerAddItem()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemRelationsControllerAddItem$Response(params: {\n    fromId: number;\n    toId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsRelationService.ItemRelationsControllerAddItemPath, 'post');\n    if (params) {\n      rb.path('fromId', params.fromId, {});\n      rb.path('toId', params.toId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemRelationsControllerAddItem$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemRelationsControllerAddItem(params: {\n    fromId: number;\n    toId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.itemRelationsControllerAddItem$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n  /**\n   * Path part for operation itemRelationsControllerGetItems\n   */\n  static readonly ItemRelationsControllerGetItemsPath = '/relations/{itemAId}/{itemBId}';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `itemRelationsControllerGetItems()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemRelationsControllerGetItems$Response(params: {\n    itemAId: number;\n    itemBId: number;\n  },\n  context?: HttpContext\n\n): Observable<StrictHttpResponse<void>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ItemsRelationService.ItemRelationsControllerGetItemsPath, 'delete');\n    if (params) {\n      rb.path('itemAId', params.itemAId, {});\n      rb.path('itemBId', params.itemBId, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context: context\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `itemRelationsControllerGetItems$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  itemRelationsControllerGetItems(params: {\n    itemAId: number;\n    itemBId: number;\n  },\n  context?: HttpContext\n\n): Observable<void> {\n\n    return this.itemRelationsControllerGetItems$Response(params,context).pipe(\n      map((r: StrictHttpResponse<void>) => r.body as void)\n    );\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\n\nexport enum BreakPoints {\n    xs = '(max-width: 599.98px)',\n    sm = '(min-width: 600px) and (max-width: 904.98px)',\n    md = '(min-width: 905px) and (max-width: 1239.98px)',\n    lg = '(min-width: 1240px) and (max-width: 1439.98px)',\n    xl = '(min-width: 1440px)',\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BreakpointsService {\n    constructor(private responsive: BreakpointObserver) {}\n\n    public observe(): Observable<BreakPoints> {\n        return new Observable((observer) => {\n            this.responsive.observe(BreakPoints.xs).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.xs);\n            });\n            this.responsive.observe(BreakPoints.sm).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.sm);\n            });\n            this.responsive.observe(BreakPoints.md).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.md);\n            });\n            this.responsive.observe(BreakPoints.lg).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.lg);\n            });\n            this.responsive.observe(BreakPoints.xl).subscribe((result) => {\n                if (result.matches) observer.next(BreakPoints.xl);\n            });\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n    AbstractControl,\n    FormBuilder,\n    FormGroup,\n    UntypedFormGroup,\n    Validators,\n} from '@angular/forms';\nimport { CollectionsService } from '../../api/services/collections.service';\nimport { Collection } from '../../api/models/collection';\nimport { DialogRef } from '@ngneat/dialog';\nimport { Data } from '@angular/router';\n\n@Component({\n    selector: 'app-add-collection',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './add-collection.component.html',\n    styleUrls: ['./add-collection.component.scss'],\n})\nexport class AddCollectionComponent {\n    readonly form: FormGroup = this.formBuilder.group({\n        name: [null, Validators.required],\n    });\n\n    constructor(\n        private ref: DialogRef<Data>,\n        private formBuilder: FormBuilder,\n        private collectionsService: CollectionsService,\n    ) {}\n\n    addNewItem(event: any): void {\n        this.updateFormValidity(this.form);\n        if (!this.form.valid) {\n            event.target.blur();\n            return;\n        }\n        const newCollection: Collection = this.form.value;\n        this.collectionsService\n            .collectionControllerAddCollection({ body: newCollection })\n            .subscribe(() => {\n                this.form.reset();\n                this.ref.close();\n            });\n    }\n\n    updateFormValidity(form: UntypedFormGroup): void {\n        Object.values<AbstractControl>(form.controls).forEach(\n            (control: AbstractControl): void => {\n                this.updateFormControlValidity(control);\n            },\n        );\n    }\n\n    updateFormControlValidity(control: AbstractControl): void {\n        control.markAsTouched();\n        control.markAsDirty();\n        control.updateValueAndValidity();\n    }\n}\n","<div class=\"addContainer\">\n  <form [formGroup]=\"form\">\n    <!--  <small>Name</small>-->\n    <input class=\"input-item\" formControlName=\"name\" id=\"name\" placeholder=\"Collection Name\">\n    <button (click)=\"addNewItem($event)\" [disabled]=\"form.invalid\">Add</button>\n  </form>\n</div>\n","<a [routerLink]=\"['collection', collection.id]\">\n  <div class=\"card\">\n    <div class=\"card-content\">\n      <div><b>{{collection.name}}</b></div>\n      <ul class=\"items-text\">\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[0]\">{{items[0].name}}</span></li>\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[1]\">{{items[1].name}}</span></li>\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[2]\">{{items[2].name}}</span></li>\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[3]\">{{items[3].name}}</span></li>\n        <li class=\"content\"><span class=\"truncate\" *ngIf=\"items[4]\">{{items[4].name}}</span></li>\n      </ul>\n<!--      <div class=\"card-footer\">-->\n<!--        <button disabled>X</button>-->\n<!--      </div>-->\n    </div>\n  </div>\n</a>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Collection} from '../../../api/models/collection';\nimport {ItemsService} from \"../../../api/services/items.service\";\nimport {Item} from \"../../../api/models/item\";\n\n@Component({\n  selector: 'app-collection-card',\n  templateUrl: './collection-card.component.html',\n  styleUrls: ['./collection-card.component.scss'],\n})\nexport class CollectionCardComponent implements OnInit {\n\n  @Input() collection!: Collection;\n  items: Item[] = [];\n\n  constructor(private itemsService: ItemsService) {\n  }\n\n  ngOnInit(): void {\n    this.itemsService\n      .itemsControllerGetItems({collectionId: this.collection.id!})\n      .subscribe(items => {\n        this.items = items.slice(0, 5);\n      })\n  }\n}\n","<div class=\"card\">\n  <div class=\"card-content\">\n    <div class=\"collection-bar\">\n      <input class=\"search\" placeholder=\"Search\">\n      <button (click)=\"add()\">NEW</button>\n    </div>\n  </div>\n</div>\n<div *ngIf=\"showFavourite && favCollections\" class=\"collections-with-header\">\n  <div class=\"heading\"><span class=\"text-heading\">Favorites</span></div>\n  <div class=\"collections-container\">\n    <div *ngFor=\"let collection of favCollections;\" class=\"collection-card\">\n      <app-collection-card [collection]=\"collection\"></app-collection-card>\n    </div>\n  </div>\n</div>\n<div class=\"collections-with-header\">\n  <div class=\"heading\"><span class=\"text-heading\">Collections</span></div>\n  <div class=\"collections-container\">\n    <div *ngFor=\"let collection of collections;\"  class=\"collection-card\">\n      <app-collection-card [collection]=\"collection\"></app-collection-card>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport {\n    BreakPoints,\n    BreakpointsService,\n} from '../../../services/breakpoints.service';\nimport { CollectionsService } from '../../../api/services/collections.service';\nimport { Collection } from '../../../api/models/collection';\nimport { DialogService } from '@ngneat/dialog';\nimport { AddCollectionComponent } from '../../add-collection/add-collection.component';\n\n@Component({\n    selector: 'app-collections',\n    templateUrl: './collections.component.html',\n    styleUrls: ['./collections.component.scss'],\n})\nexport class CollectionsComponent implements OnInit {\n    @Input() collections!: Collection[];\n    favCollections: Collection[] = [];\n    showFavourite = false;\n\n    constructor(\n        private breakpointsService: BreakpointsService,\n        private collectionsService: CollectionsService,\n        private dialogService: DialogService,\n    ) {}\n\n    ngOnInit(): void {\n        console.log('CollectionsComponent', this.collections);\n        this.breakpointsService.observe().subscribe((value) => {\n            switch (value) {\n                case BreakPoints.xs:\n                    this.showFavourite = true;\n                    break;\n                case BreakPoints.sm:\n                    this.showFavourite = true;\n                    break;\n                case BreakPoints.md:\n                    this.showFavourite = false;\n                    break;\n                case BreakPoints.lg:\n                    this.showFavourite = false;\n                    break;\n                case BreakPoints.xl:\n                    this.showFavourite = false;\n                    break;\n                default:\n                    this.showFavourite = false;\n            }\n        });\n    }\n\n    add(): void {\n        this.dialogService\n            .open(AddCollectionComponent, {\n                // data is typed based on the passed generic\n                data: {\n                    title: 'Add collection',\n                },\n            })\n            .afterClosed$.subscribe(() => this.getCollections());\n    }\n\n    private getCollections() {\n        this.collectionsService\n            .collectionControllerGetCurrentUserCollections()\n            .subscribe((collections) => {\n                this.collections = collections;\n            });\n    }\n}\n","<div class=\"side-heading\"><span class=\"text-heading\">Favorite</span></div>\n<div class=\"side-collections\" *ngIf=\"favCollections\">\n  <div class=\"card\" *ngFor=\"let collection of favCollections;\"><div class=\"card-content\">{{collection.name}}</div></div>\n</div>\n","import { Component } from '@angular/core';\nimport { Collection } from '../../../api/models/collection';\n\n@Component({\n    selector: 'app-collections-sidepanel',\n    templateUrl: './collections-sidepanel.component.html',\n    styleUrls: ['./collections-sidepanel.component.scss'],\n})\nexport class CollectionsSidepanelComponent {\n    favCollections: Collection[] = [];\n}\n","<div class=\"row\">\n  <div *ngIf=\"showSidePanel\" ngClass=\"col-{{sidePanelColumns}}\" class=\"side\">\n    <app-collections-sidepanel></app-collections-sidepanel>\n  </div>\n  <div ngClass=\"col-{{collectionsPanelColumns}}\" class=\"collections\">\n    <app-collections [collections]=\"collections\"></app-collections>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {\n    BreakPoints,\n    BreakpointsService,\n} from '../../services/breakpoints.service';\nimport { ActivatedRoute, Data } from '@angular/router';\nimport { Collection } from '../../api/models/collection';\n\n@Component({\n    selector: 'app-collections-page',\n    templateUrl: './collections-page.component.html',\n    styleUrls: ['./collections-page.component.scss'],\n})\nexport class CollectionsPageComponent implements OnInit {\n    collections: Array<Collection> = [];\n    showSidePanel = false;\n    sidePanelColumns = 0;\n    collectionsPanelColumns = 0;\n\n    constructor(\n        private breakpointsService: BreakpointsService,\n        private activatedRoute: ActivatedRoute,\n    ) {}\n\n    ngOnInit(): void {\n        console.log('CollectionsPageComponent');\n        this.breakpointsService.observe().subscribe((value) => {\n            this.showSidePanel = false;\n            this.sidePanelColumns = 3;\n            this.collectionsPanelColumns = 4;\n            switch (value) {\n                case BreakPoints.xs:\n                    break;\n                case BreakPoints.sm:\n                    this.collectionsPanelColumns = 8;\n                    break;\n                case BreakPoints.md:\n                    this.showSidePanel = true;\n                    this.collectionsPanelColumns = 9;\n                    break;\n                case BreakPoints.lg:\n                    this.showSidePanel = true;\n                    this.collectionsPanelColumns = 9;\n                    break;\n                case BreakPoints.xl:\n                    this.showSidePanel = true;\n                    this.sidePanelColumns = 4;\n                    this.collectionsPanelColumns = 8;\n                    break;\n                default:\n                    break;\n            }\n        });\n        this.activatedRoute.data.subscribe((routeData: Data) => {\n            const data = routeData as { collections: Array<Collection> };\n            if (data && data.collections) {\n                this.collections = data.collections;\n            }\n        });\n    }\n}\n","<span *ngIf=\"pair.item1.id === pair.relation?.from\" class='bold-pair'>{{pair.item1.name}}</span>\n<button (click)=\"addRelation(pair.item1.id,pair.item2.id)\"\n        *ngIf=\"pair.item1.id !== pair.relation?.from\" class='btn-pair'>{{pair.item1.name}}</button>\n<span *ngIf=\"!pair.relation\" class='bold-pair'>=</span>\n<button (click)=\"deleteRelation(pair.relation.from,pair.relation.to)\" *ngIf=\"!!pair.relation\" class='btn-pair'>=</button>\n<span *ngIf=\"pair.item2.id === pair.relation?.from\" class='bold-pair'>{{pair.item2.name}}</span>\n<button (click)=\"addRelation(pair.item2.id,pair.item1.id)\"\n        *ngIf=\"pair.item2.id !== pair.relation?.from\" class='btn-pair'>{{pair.item2.name}}</button>\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ItemPair} from \"../../../api/models/item-pair\";\nimport {ItemsRelationService} from \"../../../api/services/items-relation.service\";\n\n@Component({\n  selector: 'app-pair',\n  templateUrl: './pair.component.html',\n  styleUrls: ['./pair.component.scss'],\n})\nexport class PairComponent {\n  @Input() pair!: ItemPair;\n  @Output() pressed = new EventEmitter<void>();\n\n  constructor(private itemsRelationService: ItemsRelationService) {\n  }\n\n  addRelation(from: number | undefined, to: number | undefined) {\n    if (from !== undefined && to !== undefined) {\n      console.log('adding relation');\n      const relation = {\n        from: from,\n        to: to,\n      };\n      this.itemsRelationService\n        .itemRelationsControllerAddItem({\n          fromId: from,\n          toId: to\n        })\n        .subscribe(() => {\n          this.pair.relation = relation;\n          this.pressed.emit();\n        });\n    }\n  }\n\n  deleteRelation(from: number, to: number) {\n    console.log('deleting relation');\n    this.itemsRelationService\n      .itemRelationsControllerGetItems({\n        itemAId: from,\n        itemBId: to\n      })\n      .subscribe(() => {\n        this.pair.relation = undefined;\n        this.pressed.emit();\n      });\n  }\n}\n","<h2>{{title}}</h2>\n<div *ngIf=\"!calibrated\">\n  <ul>\n    <li *ngFor=\"let p of items; let i = index\"><app-pair (pressed)=\"itemPressed(i)\" [pair]=\"p\"></app-pair></li>\n  </ul>\n</div>\n<span *ngIf=\"!calibrated\" style=\"padding-left: 20px;\"><button (click)=\"getNextBestPair()\">Next</button></span>\n<h3 *ngIf=\"calibrated\">Calibrated!</h3>\n<button *ngIf=\"calibrated\" (click)=\"close()\">Close</button>\n","import {\n  Component, OnInit,\n} from '@angular/core';\nimport {ItemsService} from '../../api/services/items.service';\nimport {DialogRef} from \"@ngneat/dialog\";\nimport {Data} from \"@angular/router\";\nimport {ItemPair} from \"../../api/models/item-pair\";\n\n@Component({\n  selector: 'app-calibrate-item',\n  templateUrl: './calibrate-item.component.html',\n  styleUrls: ['./calibrate-item.component.scss'],\n})\nexport class CalibrateItemComponent implements OnInit {\n\n  itemId: number | undefined;\n  title: string = '';\n  items: ItemPair[] = [];\n  calibrated = true;\n\n  constructor(\n    private ref: DialogRef<Data>,\n    private itemsService: ItemsService,\n  ) {\n    console.log(ref.data);\n    if(ref.data['title']){\n      this.title = ref.data['title']\n    }\n    if(ref.data['itemId']){\n      this.itemId = ref.data['itemId']\n    }\n  }\n\n  getPairs() {\n    this.getNextBestPair();\n  }\n\n  itemPressed(id: number) {\n    if (id === this.items.length - 1) {\n        this.getNextBestPair();\n    }\n  }\n\n  getNextBestPair() {\n    const ids: number[] = [];\n    ids.push(this.itemId!);\n    this.items.forEach((item) => ids.push(item.item2.id!));\n    this.itemsService\n        .itemsControllerGetBestPair({\n            id: this.itemId!,\n            exclude: ids,\n        })\n        .subscribe((pair) => {\n            if (!!pair) {\n                this.items.push(pair);\n              this.calibrated = false;\n            } else {\n                this.calibrated = true;\n            }\n            console.log(pair,this.items.length)\n        });\n  }\n\n  ngOnInit(): void {\n    this.getNextBestPair();\n  }\n\n  close() {\n    this.ref.close();\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport {\n    AbstractControl,\n    FormBuilder,\n    FormGroup,\n    UntypedFormGroup,\n    Validators,\n} from '@angular/forms';\nimport { ItemsService } from '../../api/services/items.service';\nimport { Collection } from '../../api/models/collection';\n\n@Component({\n    selector: 'app-add-item',\n    templateUrl: './add-item.component.html',\n    styleUrls: ['./add-item.component.scss'],\n})\nexport class AddItemComponent {\n    @Input() collection!: Collection;\n    @Output() changes = new EventEmitter<number>();\n\n    readonly form: FormGroup = this.formBuilder.group({\n        name: [null, Validators.required],\n    });\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private itemService: ItemsService,\n    ) {}\n\n    addNewItem(event: any): void {\n        this.updateFormValidity(this.form);\n        if (!this.form.valid) {\n            event.target.blur();\n            return;\n        }\n        const itemEntity = this.form.value;\n        if (!this.collection.id) return;\n        this.itemService\n            .itemsControllerAddItem({\n                collectionId: this.collection.id,\n                body: itemEntity,\n            })\n            .subscribe((id) => {\n                this.form.reset();\n                this.changes.emit(id);\n            });\n    }\n\n    updateFormValidity(form: UntypedFormGroup): void {\n        Object.values<AbstractControl>(form.controls).forEach(\n            (control: AbstractControl): void => {\n                this.updateFormControlValidity(control);\n            },\n        );\n    }\n\n    updateFormControlValidity(control: AbstractControl): void {\n        control.markAsTouched();\n        control.markAsDirty();\n        control.updateValueAndValidity();\n    }\n}\n","<form [formGroup]=\"form\">\n  <!--  <small>Name</small>-->\n  <input formControlName=\"name\" id=\"name\" placeholder=\"Item\" class=\"input-item\">\n  <button (click)=\"addNewItem($event)\" [disabled]=\"form.invalid\">Add</button>\n</form>\n","<div class=\"heading\">\n  <span class=\"text-heading\"><a [routerLink]=\"['']\" class=\"nav-button\"><</a></span>\n  <span class=\"text-heading\">{{collection.name}}</span>\n</div>\n<app-add-item [collection]=\"collection\" (changes)=\"itemAdded($event)\"></app-add-item>\n<div>\n  <ol>\n    <li *ngFor=\"let item of items\">{{item.name}}</li>\n  </ol>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Data} from '@angular/router';\nimport {BreakpointsService} from '../../services/breakpoints.service';\nimport {Item} from '../../api/models/item';\nimport {Collection} from '../../api/models/collection';\nimport {ItemsService} from '../../api/services/items.service';\nimport {DialogService} from \"@ngneat/dialog\";\nimport {CalibrateItemComponent} from \"../../components/calibrate-item/calibrate-item.component\";\n\n@Component({\n  selector: 'app-collection-page',\n  templateUrl: './collection-page.component.html',\n  styleUrls: ['./collection-page.component.scss'],\n})\nexport class CollectionPageComponent implements OnInit {\n  items: Array<Item> = [];\n  collection!: Collection;\n\n  constructor(\n    private breakpointsService: BreakpointsService,\n    private activatedRoute: ActivatedRoute,\n    private itemService: ItemsService,\n    private dialogService: DialogService,\n  ) {\n  }\n\n  get itemsjson(): string {\n    return JSON.stringify(this.items);\n  }\n\n  ngOnInit(): void {\n    this.activatedRoute.data.subscribe((routeData: Data) => {\n      const data = routeData as {\n        items: Array<Item>;\n        collection: Collection;\n      };\n      if (data && data.items) {\n        this.items = data.items;\n        this.collection = data.collection;\n      }\n    });\n  }\n\n  itemAdded(id: number) {\n    this.dialogService\n      .open(CalibrateItemComponent, {\n        // data is typed based on the passed generic\n        data: {\n          title: `Calibrate`,\n          itemId: id,\n        },\n      })\n      .afterClosed$.subscribe(() =>\n      this.itemService.itemsControllerGetItems({\n        collectionId: this.collection.id!,\n      }).subscribe((items) => (this.items = items)));\n\n  }\n}\n","import { ActivatedRouteSnapshot, ResolveFn } from '@angular/router';\nimport { EMPTY, Observable } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { ItemsService } from '../api/services';\nimport { Item } from '../api/models/item';\n\nexport const collectionItemsResolver: ResolveFn<Array<Item>> = (\n    route: ActivatedRouteSnapshot,\n): Observable<Array<Item>> => {\n    const collectionIdParam: string | null = findParam(\n        ROUTER_PARAM_COLLECTION_ID,\n        route,\n    );\n    if (!collectionIdParam) {\n        return EMPTY;\n    }\n    const collectionId: number = +collectionIdParam;\n    return inject(ItemsService).itemsControllerGetItems({\n        collectionId: collectionId,\n    });\n};\n\nexport const ROUTER_PARAM_COLLECTION_ID = 'collectionId';\nexport function findParam(\n    name: string,\n    route: ActivatedRouteSnapshot,\n): string | null {\n    const value = route.params[name];\n    if (value) {\n        return value;\n    }\n    if (route.parent) {\n        return findParam(name, route.parent);\n    }\n    return null;\n}\n","import { ActivatedRouteSnapshot, ResolveFn } from '@angular/router';\nimport { EMPTY, Observable } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { CollectionsService } from '../api/services';\nimport { Collection } from '../api/models/collection';\n\nexport const collectionResolver: ResolveFn<Collection> = (\n    route: ActivatedRouteSnapshot,\n): Observable<Collection> => {\n    const collectionIdParam: string | null = findParam(\n        ROUTER_PARAM_COLLECTION_ID,\n        route,\n    );\n    if (!collectionIdParam) {\n        return EMPTY;\n    }\n    const collectionId: number = +collectionIdParam;\n    return inject(CollectionsService).collectionControllerGetCollection({\n        collectionId: collectionId,\n    });\n};\n\nexport const ROUTER_PARAM_COLLECTION_ID = 'collectionId';\nexport function findParam(\n    name: string,\n    route: ActivatedRouteSnapshot,\n): string | null {\n    const value = route.params[name];\n    if (value) {\n        return value;\n    }\n    if (route.parent) {\n        return findParam(name, route.parent);\n    }\n    return null;\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { collectionsResolver } from './resolvers/collections.resolver';\nimport { CollectionsPageComponent } from './pages/collections-page/collections-page.component';\nimport { CollectionPageComponent } from './pages/collection-page/collection-page.component';\nimport { collectionItemsResolver } from './resolvers/collection-items.resolver';\nimport { collectionResolver } from './resolvers/collection.resolver';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CollectionsPageComponent,\n        resolve: { collections: collectionsResolver },\n    },\n    {\n        path: 'collection/:collectionId',\n        component: CollectionPageComponent,\n        resolve: {\n            items: collectionItemsResolver,\n            collection: collectionResolver,\n        },\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { ActivatedRouteSnapshot, ResolveFn } from '@angular/router';\nimport { Collection } from '../api/models/collection';\nimport { Observable } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { CollectionsService } from '../api/services';\n\nexport const collectionsResolver: ResolveFn<Array<Collection>> = (\n    route: ActivatedRouteSnapshot,\n): Observable<Array<Collection>> => {\n    return inject(\n        CollectionsService,\n    ).collectionControllerGetCurrentUserCollections();\n};\n","import { Injectable } from '@angular/core';\nimport { GoogleAuthProvider } from '@firebase/auth';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { User } from '../model/user';\nimport { firstValueFrom } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FireAuthService {\n    userData: any;\n\n    constructor(\n        private afAuth: AngularFireAuth, // private afs: AngularFirestore,\n    ) {\n        this.afAuth.authState.subscribe((user) => {\n            this.saveUser(user);\n        });\n    }\n\n    private saveUser(user: any) {\n        if (user) {\n            this.userData = user;\n            localStorage.setItem('fire.user', JSON.stringify(this.userData));\n        } else {\n            localStorage.setItem('fire.user', 'null');\n        }\n    }\n\n    get isLoggedIn(): boolean {\n        const userString = localStorage.getItem('fire.user');\n        const user = JSON.parse(userString ? userString : 'null');\n        return user !== null && user.emailVerified !== false;\n    }\n\n    GoogleAuth() {\n        return this.AuthLogin(new GoogleAuthProvider()).then((res: any) => {\n            // if (res) {\n            //   this.router.navigate(['dashboard']);\n            // }\n        });\n    }\n\n    async getToken() {\n        const token = await firstValueFrom(this.afAuth.idToken);\n        return token;\n    }\n\n    AuthLogin(provider: any) {\n        return this.afAuth\n            .signInWithPopup(provider)\n            .then((result) => {\n                // this.ngZone.run(() => {\n                //   this.router.navigate(['dashboard']);\n                // });\n                const user = this.SetUserData(result.user);\n                this.saveUser(user);\n                location.reload();\n            })\n            .catch((error) => {\n                window.alert(error);\n            });\n    }\n\n    /* Setting up user data when sign in with username/password,\nsign up with username/password and sign in with social auth\nprovider in Firestore database using AngularFirestore + AngularFirestoreDocument service */\n    SetUserData(user: any) {\n        // const userRef: AngularFirestoreDocument<any> = this.afs.doc<any>(\n        //     `users/${user.uid}`,\n        // );\n        const userData: User = {\n            uid: user.uid,\n            email: user.email,\n            displayName: user.displayName,\n            photoURL: user.photoURL,\n            emailVerified: user.emailVerified,\n        };\n        return userData;\n        // return userRef.set(userData, {\n        //     merge: true,\n        // });\n    }\n\n    // Sign out\n    SignOut() {\n        return this.afAuth.signOut().then(() => {\n            localStorage.removeItem('fire.user');\n            location.reload();\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DialogRef } from '@ngneat/dialog';\nimport { FireAuthService } from '../../services/fire-auth.service';\n\ninterface Data {\n    userName: string;\n}\n\n@Component({\n    selector: 'app-profile',\n    templateUrl: './profile.component.html',\n    styleUrls: ['./profile.component.scss'],\n})\nexport class ProfileComponent {\n    constructor(\n        private ref: DialogRef<Data>,\n        private fireAuthService: FireAuthService,\n    ) {}\n\n    get userName() {\n        return this.fireAuthService.userData.displayName;\n    }\n\n    get photoURL() {\n        return this.fireAuthService.userData.photoURL;\n    }\n\n    logOut(): void {\n        this.fireAuthService.SignOut();\n        this.ref.close();\n    }\n}\n","<div class=\"profileContainer\">\n  <div class=\"profileImageContainer\">\n    <img [src]=\"photoURL\" alt=\"\" class=\"profilePhoto\">\n    <div class=\"profilePhotoBorder\"></div>\n  </div>\n</div>\n<h2>Logged in as {{userName}}\n</h2>\n<button (click)=\"logOut()\" class=\"text-main link-btn\">LOGOUT</button>\n","<span class=\"login-block\">\n<a (click)=\"profile()\" *ngIf=\"loggedIn\" class=\"login\"></a>\n<button (click)=\"GoogleAuth()\" *ngIf=\"!loggedIn\" class=\"text-main link-btn\">LOGIN</button>\n</span>\n","import { Component } from '@angular/core';\nimport { FireAuthService } from '../../services/fire-auth.service';\nimport { DialogService } from '@ngneat/dialog';\nimport { ProfileComponent } from '../profile/profile.component';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n    constructor(\n        private fireAuthService: FireAuthService,\n        private dialogService: DialogService,\n    ) {}\n\n    get loggedIn(): boolean {\n        return this.fireAuthService.isLoggedIn;\n    }\n\n    get userName(): string {\n        const name = this.fireAuthService?.userData?.displayName;\n        return name ? name : 'Logged In';\n    }\n\n    login() {\n        this.GoogleAuth();\n    }\n\n    GoogleAuth(): void {\n        this.fireAuthService.GoogleAuth();\n    }\n\n    profile(): void {\n        this.dialogService.open(ProfileComponent, {\n            // data is typed based on the passed generic\n            data: {\n                title: 'asdasdsad',\n            },\n        });\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ItemsService } from './api/services/items.service';\nimport { Item } from './api/models/item';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n    // items: Item[] = [];\n    // lastItem?: Item;\n\n    constructor() {}\n\n    ngOnInit(): void {\n        // this.reloadItems();\n    }\n\n    // reloadItems() {\n    //   this.getItems();\n    //   this.getLastItem();\n    // }\n    //\n    // getItems() {\n    //   // this.itemsService\n    //   //     .itemsControllerGetItems()\n    //   //     .subscribe((value) => (this.items = value));\n    // }\n    //\n    // getLastItem() {\n    //   // this.itemsService\n    //   //     .itemsControllerGetLastItem()\n    //   //     .subscribe((value) => (this.lastItem = value));\n    // }\n}\n","<div class=\"topbar\">\n  <app-login class=\"login-block\"></app-login>\n</div>\n<div class=\"full-body\">\n  <div class=\"responsive-container\">\n    <router-outlet></router-outlet>\n    <!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-add-item (changes)=\"reloadItems()\"></app-add-item>-->\n<!--        <app-list [items]=\"items\"></app-list>-->\n<!--      </div>-->\n<!--    </div>-->\n<!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-calibrate-item (changes)=\"reloadItems()\" *ngIf=\"!!lastItem\" [lastItem]=\"lastItem\"></app-calibrate-item>-->\n<!--      </div>-->\n<!--    </div>-->\n<!--    <div class=\"card\">-->\n<!--      <div class=\"card-content\">-->\n<!--        <app-pairs (changes)=\"reloadItems()\"></app-pairs>-->\n<!--      </div>-->\n<!--    </div>-->\n  </div>\n</div>\n\n","/* tslint:disable */\n/* eslint-disable */\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration, ApiConfigurationParams } from './api-configuration';\n\nimport { ItemsService } from './services/items.service';\nimport { CollectionsService } from './services/collections.service';\nimport { ItemsRelationService } from './services/items-relation.service';\n\n/**\n * Module that provides all services and configuration.\n */\n@NgModule({\n  imports: [],\n  exports: [],\n  declarations: [],\n  providers: [\n    ItemsService,\n    CollectionsService,\n    ItemsRelationService,\n    ApiConfiguration\n  ],\n})\nexport class ApiModule {\n  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<ApiModule> {\n    return {\n      ngModule: ApiModule,\n      providers: [\n        {\n          provide: ApiConfiguration,\n          useValue: params\n        }\n      ]\n    }\n  }\n\n  constructor( \n    @Optional() @SkipSelf() parentModule: ApiModule,\n    @Optional() http: HttpClient\n  ) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n      'See also https://github.com/angular/angular/issues/20575');\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    HttpEvent,\n    HttpHandler,\n    HttpInterceptor,\n    HttpRequest,\n} from '@angular/common/http';\nimport { FireAuthService } from '../services/fire-auth.service';\nimport { from, lastValueFrom, Observable } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class FirebaseAuthInterceptor implements HttpInterceptor {\n    constructor(private fireAuthService: FireAuthService) {}\n\n    intercept(\n        req: HttpRequest<any>,\n        next: HttpHandler,\n    ): Observable<HttpEvent<any>> {\n        return from(this.handle(req, next));\n    }\n\n    async handle(req: HttpRequest<any>, next: HttpHandler) {\n        const token = await this.fireAuthService.getToken();\n        if (!token) {\n            return await lastValueFrom(next.handle(req));\n        }\n        const req1 = req.clone({\n            headers: req.headers.set('Authorization', `Bearer ${token}`),\n        });\n        return await lastValueFrom(next.handle(req1));\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { environment } from '../environments/environment';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ListComponent } from './components/list/list.component';\nimport { ApiModule } from './api/api.module';\nimport { PairsComponent } from './components/pairs/pairs.component';\nimport { AddItemComponent } from './components/add-item/add-item.component';\nimport { PairComponent } from './components/pairs/pair/pair.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CalibrateItemComponent } from './components/calibrate-item/calibrate-item.component';\nimport { initializeApp, provideFirebaseApp } from '@angular/fire/app';\nimport {\n    getAnalytics,\n    provideAnalytics,\n    ScreenTrackingService,\n    UserTrackingService,\n} from '@angular/fire/analytics';\nimport { getAuth, provideAuth } from '@angular/fire/auth';\nimport { FireAuthService } from './services/fire-auth.service';\nimport { FirebaseAuthInterceptor } from './interceptors/firebase-auth.interceptor';\nimport { AngularFireModule } from '@angular/fire/compat';\nimport { LoginComponent } from './components/login/login.component';\nimport { CollectionsComponent } from './components/collections/collections/collections.component';\nimport { CollectionsPageComponent } from './pages/collections-page/collections-page.component';\nimport { CollectionsSidepanelComponent } from './components/collections/collections-sidepanel/collections-sidepanel.component';\nimport { CollectionCardComponent } from './components/collections/collection-card/collection-card.component';\nimport { AddCollectionComponent } from './components/add-collection/add-collection.component';\nimport { CollectionPageComponent } from './pages/collection-page/collection-page.component';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        ListComponent,\n        PairsComponent,\n        AddItemComponent,\n        PairComponent,\n        CalibrateItemComponent,\n        LoginComponent,\n        CollectionsComponent,\n        CollectionsPageComponent,\n        CollectionsSidepanelComponent,\n        CollectionCardComponent,\n        AddCollectionComponent,\n        CollectionPageComponent,\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        ReactiveFormsModule.withConfig({\n            warnOnNgModelWithFormControl: 'always',\n        }),\n        ApiModule.forRoot({ rootUrl: environment.application.apiUrl }),\n        AppRoutingModule,\n        AngularFireModule.initializeApp(environment.firebase),\n        provideFirebaseApp(() => {\n            console.log('*********MODULE*********', environment.firebase);\n            return initializeApp(environment.firebase);\n        }),\n        provideAnalytics(() => getAnalytics()),\n        provideAuth(() => getAuth()),\n    ],\n    providers: [\n        FireAuthService,\n        {\n            provide: HTTP_INTERCEPTORS,\n            useClass: FirebaseAuthInterceptor,\n            multi: true,\n        },\n        ScreenTrackingService,\n        UserTrackingService,\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch((err) => console.error(err));\n"],"x_google_ignoreList":[]}